
&НаСервере
Процедура СоздатьОбновитьОтчетПроизводства(НаДату,ЗаказВПроизводство, Номенклатура, Характеристика, МассивОпераций)
	//Нужно найти есть ли отчет производства по этому заказу на эту продукцию
	//Если нет, то создать 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	вт_ОтчетПроизводстваТовары.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
	                      |ГДЕ
	                      |	вт_ОтчетПроизводстваТовары.Ссылка.ДокументОснование = &ЗаказВПроизводство
	                      |	И вт_ОтчетПроизводстваТовары.Номенклатура = &Номенклатура
	                      |	И вт_ОтчетПроизводстваТовары.Характеристика = &Характеристика
	                      |	И НАЧАЛОПЕРИОДА(вт_ОтчетПроизводстваТовары.Ссылка.Дата, ДЕНЬ) = &Дата
	                      |	И вт_ОтчетПроизводстваТовары.Ссылка.Проведен = ИСТИНА");
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(НаДату));
	Запрос.УстановитьПараметр("ЗаказВПроизводство",ЗаказВПроизводство);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() ТОгда
		ДокПроизводство = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ДокПроизводство = СоздатьЗаполнитьНовыйОтчетПроизводства(НаДату, ЗаказВПроизводство, Номенклатура, Характеристика);
	КонецЕсли;
	
	//Теперь проверяем содержимое
	ДанныеТовары = ДокПроизводство.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ЗаказВПроизводство);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",Характеристика);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	вт_ЗаказВПроизводствоТовары.ВариантПроизводства КАК ВариантПроизводства,
	               |	вт_ЗаказВПроизводствоТовары.Количество КАК Количество,
	               |	вт_ЗаказВПроизводствоТовары.КлючСтроки КАК КлючСтроки,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_ЗаказВПроизводствоОперацииПроизводства.Операция) КАК КоличествоОпераций,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_ЗаказВПроизводствоРасходСырьяНаОперации.КодСтрокиОперации) КАК КоличествоОперацийССырьем
	               |ИЗ
	               |	Документ.вт_ЗаказВПроизводство.Товары КАК вт_ЗаказВПроизводствоТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ЗаказВПроизводство.ОперацииПроизводства КАК вт_ЗаказВПроизводствоОперацииПроизводства
	               |		ПО вт_ЗаказВПроизводствоТовары.Ссылка = вт_ЗаказВПроизводствоОперацииПроизводства.Ссылка
	               |			И вт_ЗаказВПроизводствоТовары.КлючСтроки = вт_ЗаказВПроизводствоОперацииПроизводства.КлючСвязиСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вт_ЗаказВПроизводство.РасходСырьяНаОперации КАК вт_ЗаказВПроизводствоРасходСырьяНаОперации
	               |		ПО вт_ЗаказВПроизводствоТовары.Ссылка = вт_ЗаказВПроизводствоРасходСырьяНаОперации.Ссылка
	               |			И вт_ЗаказВПроизводствоТовары.КлючСтроки = вт_ЗаказВПроизводствоРасходСырьяНаОперации.КлючСвязиСтроки
	               |ГДЕ
	               |	вт_ЗаказВПроизводствоТовары.Ссылка = &Ссылка
	               |	И вт_ЗаказВПроизводствоТовары.Номенклатура = &Номенклатура
	               |	И вт_ЗаказВПроизводствоТовары.Характеристика = &Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_ЗаказВПроизводствоТовары.ВариантПроизводства,
	               |	вт_ЗаказВПроизводствоТовары.Количество,
	               |	вт_ЗаказВПроизводствоТовары.КлючСтроки";
	
	ВыборкаТоварИзЗаказа = Запрос.Выполнить().Выбрать();
	КлючСвязиСтроки = "";
	Если ВыборкаТоварИзЗаказа.Следующий() Тогда
		КлючСвязиСтроки = ВыборкаТоварИзЗаказа.КлючСтроки;
	ИНаче
		ВызватьИсключение "Не нашли номенклатуру в заказе производства"; 
		Возврат;
	КонецЕсли;
	
	Если ДанныеТовары.Количество()=0 Тогда //Если еще нет, то добавляем
			КодСтроки = ДокПроизводство.Товары.Количество()+1;
			//Берем данные из заказа в производство
			СтрокаТовары = ДокПроизводство.Товары.Добавить();     
			СтрокаТовары.КодСтроки = КодСтроки;
			СтрокаТовары.Номенклатура   = Номенклатура;	
			СтрокаТовары.Характеристика = Характеристика;
			СтрокаТовары.Количество     = ВыборкаТоварИзЗаказа.Количество / ВыборкаТоварИзЗаказа.КоличествоОперацийССырьем;
			СтрокаТовары.КоличествоПлан = ВыборкаТоварИзЗаказа.Количество / ВыборкаТоварИзЗаказа.КоличествоОперацийССырьем;
			СтрокаТовары.ВариантПроизводства = ВыборкаТоварИзЗаказа.ВариантПроизводства;
	Иначе
		 КодСтроки = ДанныеТовары[0].КодСтроки;
	КонецЕсли;
	
	//Текущие остатки по операциям
	ОтборСтруктура = Новый Структура("ЗаказПроизводства, Номенклатура, Характеристика", ЗаказВПроизводство, Номенклатура, Характеристика);
	ОстаткиПоОперациям = РегистрыНакопления.вт_ОперацииВыпускаПродукции.Остатки(ДокПроизводство.МоментВремени(), ОтборСтруктура ,"ЗаказПроизводства,Операция","Количество");
	
    ЗапросОстаткиПосырьюЗаказа = Новый Запрос;
	ЗапросОстаткиПосырьюЗаказа.Текст = 
		"ВЫБРАТЬ
		|	вт_ЗаказВПроизводствоСырье.Номенклатура КАК Номенклатура,
		|	вт_ЗаказВПроизводствоСырье.Характеристика КАК Характеристика,
		|	вт_ЗаказВПроизводствоСырье.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_СЫРЬЕ_ЗАКАЗА
		|ИЗ
		|	Документ.вт_ЗаказВПроизводство.Сырье КАК вт_ЗаказВПроизводствоСырье
		|ГДЕ
		|	вт_ЗаказВПроизводствоСырье.Ссылка = &Ссылка
		|	И вт_ЗаказВПроизводствоСырье.КлючСвязиСтроки = &КлючСвязиСтроки
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|//ВЫБРАТЬ
		|//	Т_СЫРЬЕ.НоменклатураСырья КАК НоменклатураСырья,
		|//	Т_СЫРЬЕ.ХарактеристикаСырья КАК ХарактеристикаСырья,
		|//	Т_СЫРЬЕ.Количество КАК Количество
		|//ПОМЕСТИТЬ ВТ_СПИСАННОЕ_ПО_ОПЕРАЦИЯМ
		|//ИЗ
		|//	&Т_СЫРЬЕ КАК Т_СЫРЬЕ
		|//;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_СырьеВыпускаПродукцииОбороты.Номенклатура КАК Номенклатурасырья,
		|	вт_СырьеВыпускаПродукцииОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаСырья,
		|	вт_СырьеВыпускаПродукцииОбороты.КоличествоОборот КАК КоличествоОборот
		|ПОМЕСТИТЬ ВТ_СПИСАНО_ПО_ВЫПУСКАМ
		|ИЗ
		|	Документ.вт_ЗаказВПроизводство.Товары КАК вт_ЗаказВПроизводствоТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
		|		ПО (вт_ЗаказВПроизводствоТовары.Ссылка = вт_ОтчетПроизводстваТовары.Ссылка.ДокументОснование
		|				И вт_ЗаказВПроизводствоТовары.Номенклатура = вт_ОтчетПроизводстваТовары.Номенклатура
		|				И вт_ЗаказВПроизводствоТовары.Характеристика = вт_ОтчетПроизводстваТовары.Характеристика)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.вт_СырьеВыпускаПродукции.Обороты(, , Регистратор, ) КАК вт_СырьеВыпускаПродукцииОбороты
		|			ПО (вт_ОтчетПроизводстваТовары.Ссылка = вт_СырьеВыпускаПродукцииОбороты.Регистратор
		|					И вт_ОтчетПроизводстваТовары.Номенклатура = вт_СырьеВыпускаПродукцииОбороты.ГотоваяПродукция
		|					И вт_ОтчетПроизводстваТовары.Характеристика = вт_СырьеВыпускаПродукцииОбороты.Характеристика)
		|				
		|ГДЕ вт_ЗаказВПроизводствоТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЫРЬЕ_ЗАКАЗА.Количество КАК КоличествоЗаказ,
		|	ВТ_СЫРЬЕ_ЗАКАЗА.Номенклатура КАК НоменклатураСырье,
		|	ВТ_СЫРЬЕ_ЗАКАЗА.Характеристика КАК ХарактеристикаСырье,
		|	ВТ_СЫРЬЕ_ЗАКАЗА.Количество - ЕСТЬNULL(ВТ_СПИСАНО_ПО_ВЫПУСКАМ.КоличествоОборот, 0) КАК ОсталосьСписать,
		|	ЕСТЬNULL(ВТ_СПИСАНО_ПО_ВЫПУСКАМ.КоличествоОборот, 0) КАК СписаноПоВыпускам
		|ИЗ
		|	ВТ_СЫРЬЕ_ЗАКАЗА КАК ВТ_СЫРЬЕ_ЗАКАЗА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СПИСАНО_ПО_ВЫПУСКАМ КАК ВТ_СПИСАНО_ПО_ВЫПУСКАМ
		|		ПО ВТ_СЫРЬЕ_ЗАКАЗА.Номенклатура = ВТ_СПИСАНО_ПО_ВЫПУСКАМ.Номенклатурасырья
		|			И ВТ_СЫРЬЕ_ЗАКАЗА.Характеристика = ВТ_СПИСАНО_ПО_ВЫПУСКАМ.ХарактеристикаСырья";
	
	
	ЗапросОстаткиПосырьюЗаказа.УстановитьПараметр("КлючСвязиСтроки", КлючСвязиСтроки);
	ЗапросОстаткиПосырьюЗаказа.УстановитьПараметр("Ссылка", ЗаказВПроизводство);
	
	РезультатЗапроса = ЗапросОстаткиПосырьюЗаказа.Выполнить();
	
	ОстаткиСырьяПоОперациям = РезультатЗапроса.Выгрузить(); // РегистрыНакопления.вт_ОперацииВыпускаСырье.Остатки(,,Новый Структура("ЗаказПроизводства", ЗаказВПроизводство),"Операция, Номенклатура,Характеристика,НоменклатураСырье, ХарактеристикаСырье","Количество");
		
	//Идем по операциям
	Для Каждого ЭлементОперация из МассивОпераций цикл
		ДанныеОперации = ДокПроизводство.Операции.НайтиСтроки(Новый Структура("КлючСтрокипродукции,Операция",КодСтроки,ЭлементОперация));
		Если ДанныеОперации.Количество()>0 ТОгда//Уже есть в списке операций
			Продолжить;
		КонецЕсли;	
		
		//Добавляем операцию
		СтрокаОперации = ДокПроизводство.Операции.Добавить();
		СтрокаОперации.КлючСтрокипродукции = КодСтроки;
		СтрокаОперации.Операция = ЭлементОперация;
		СтрокаОперации.ВремяЗавершения = НаДату;
		
		//Проверим нужно ли списывать сырье по этой операции
		Запрос.Текст = "ВЫБРАТЬ
		               |	вт_ЗаказВПроизводствоРасходСырьяНаОперации.Номенклатура КАК Номенклатура,
		               |	вт_ЗаказВПроизводствоРасходСырьяНаОперации.Характеристика КАК Характеристика,
		               |	вт_ЗаказВПроизводствоРасходСырьяНаОперации.Количество КАК Количество
		               |ИЗ
		               |	Документ.вт_ЗаказВПроизводство.РасходСырьяНаОперации КАК вт_ЗаказВПроизводствоРасходСырьяНаОперации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ЗаказВПроизводство.ОперацииПроизводства КАК вт_ЗаказВПроизводствоОперацииПроизводства
		               |		ПО вт_ЗаказВПроизводствоРасходСырьяНаОперации.Ссылка = вт_ЗаказВПроизводствоОперацииПроизводства.Ссылка
		               |			И вт_ЗаказВПроизводствоРасходСырьяНаОперации.КодСтрокиОперации = вт_ЗаказВПроизводствоОперацииПроизводства.КодСтроки
		               |			И вт_ЗаказВПроизводствоРасходСырьяНаОперации.КлючСвязиСтроки = вт_ЗаказВПроизводствоОперацииПроизводства.КлючСвязиСтроки
		               |ГДЕ
		               |	вт_ЗаказВПроизводствоРасходСырьяНаОперации.Ссылка = &Ссылка
		               |	И вт_ЗаказВПроизводствоОперацииПроизводства.Операция = &Операция
		               |	И вт_ЗаказВПроизводствоОперацииПроизводства.КлючСвязиСтроки = &КлючСвязиСтроки";
		Запрос.УстановитьПараметр("Операция", ЭлементОперация);
		Запрос.УстановитьПараметр("КлючСвязиСтроки",КлючСвязиСтроки);
		ВыборкаСырья = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСырья.Следующий() Цикл
			  СтрокаСырье = ДокПроизводство.вт_ПроизводствоСырье.Добавить();
			  СтрокаСырье.КлючСвязиСтроки  = КодСтроки;
			  СтрокаСырье.ГотоваяПродукция = Номенклатура;
			  СтрокаСырье.Номенклатура     = ВыборкаСырья.Номенклатура;
			  СтрокаСырье.Характеристика   = ВыборкаСырья.Характеристика;
			  СтрокаСырье.Количество       = ВыборкаСырья.Количество;
			  
			  //Добавляем и расход сырья
			  СтрокаОстаткиСырья = ОстаткиСырьяПоОперациям.Добавить();
			//СтрокаОстаткиСырья.Операция = ЭлементОперация;
			//  СтрокаОстаткиСырья.Номенклатура   = Номенклатура;
			//  СтрокаОстаткиСырья.Характеристика = Характеристика;
			  СтрокаОстаткиСырья.НоменклатураСырье = СтрокаСырье.Номенклатура;
			  СтрокаОстаткиСырья.ХарактеристикаСырье =  СтрокаСырье.Характеристика;
			  СтрокаОстаткиСырья.ОсталосьСписать = - СтрокаСырье.Количество;
		КонецЦикла;
		
		//К остаткам добавляем текущий расход операции. Потом будем анализировать
		СтрокаОстатки = ОстаткиПоОперациям.Добавить();
		СтрокаОстатки.ЗаказПроизводства= ЗаказВПроизводство;
		СтрокаОстатки.Операция         = ЭлементОперация;
		СтрокаОстатки.Количество 	   = -1;
		
	КонецЦикла;
	
	
	 //Если получается все операции выполнены
	 Если ОстаткиПоОперациям.Итог("Количество") = 0 Тогда
		 //тогда проверим всё ли количество готовой продукции было учтено при предыдущих операциях
		 
		 ОстатокГотовойПродукцииПоЗаказу = ВыборкаТоварИзЗаказа.Количество; //сначала берем сколько было в заказе
		 
		 //смотрим по регистру себестоимость сколько учли
		 ЗапросКоличествоСебестоимости = Новый Запрос;
		 ЗапросКоличествоСебестоимости.Текст = 
		 "ВЫБРАТЬ
		 |	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК АналитикаУчетаНоменклатурыНоменклатура,
		 |	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК АналитикаУчетаНоменклатурыХарактеристика,
		 |	СУММА(СебестоимостьТоваровОбороты.КоличествоПриход) КАК КоличествоПриход
		 |ИЗ
		 |	Документ.вт_ЗаказВПроизводство КАК вт_ЗаказВПроизводство
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства КАК вт_ОтчетПроизводства
		 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Обороты(
		 |					,
		 |					,
		 |					Регистратор,
		 |					АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
		 |						И АналитикаУчетаНоменклатуры.Характеристика = &Характеристика) КАК СебестоимостьТоваровОбороты
		 |			ПО вт_ОтчетПроизводства.Ссылка = СебестоимостьТоваровОбороты.Регистратор
		 |		ПО вт_ЗаказВПроизводство.Ссылка = вт_ОтчетПроизводства.ДокументОснование
		 |ГДЕ
		 |	вт_ЗаказВПроизводство.Ссылка = &Ссылка
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура,
		 |	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Характеристика";
		 
		 ЗапросКоличествоСебестоимости.УстановитьПараметр("Номенклатура", Номенклатура);
		 ЗапросКоличествоСебестоимости.УстановитьПараметр("Характеристика", Характеристика);
		 ЗапросКоличествоСебестоимости.УстановитьПараметр("Ссылка", ЗаказВПроизводство);
		 
		 
		 РезультатЗапроса = ЗапросКоличествоСебестоимости.Выполнить();
		 
		 ВыборкаКоличествоСебест = РезультатЗапроса.Выбрать();
		 
		 Если ВыборкаКоличествоСебест.Следующий() Тогда
			 ОстатокГотовойПродукцииПоЗаказу = ОстатокГотовойПродукцииПоЗаказу - ВыборкаКоличествоСебест.КоличествоПриход;
		 КонецЕсли;
		 
		//тзнОстаткиПоЗаказуПроизводства = РегистрыНакопления.вт_ЗаказВПроизводство.Остатки(ДокПроизводство.МоментВремени(), ОтборСтруктура, "ЗаказПроизводства,Номенклатура,Характеристика","Количество");
		
		//ОстатокГотовойПродукцииПоЗаказу = ВыборкаТоварИзЗаказа.Количество -  тзнОстаткиПоЗаказуПроизводства.Итог("Количество");
		Если ОстатокГотовойПродукцииПоЗаказу>0 Тогда
			 //вероятно в предыдущие производства не всё количество продукции приходовали т.к. делили пропорционально
			СтрокаТовары = ДокПроизводство.Товары.НайтиСтроки(Новый Структура("КодСтроки",КодСтроки));
			Если СтрокаТовары.Количество()>0 Тогда
				СтрокаТовары[0].Количество     = ОстатокГотовойПродукцииПоЗаказу;	
				СтрокаТовары[0].КоличествоПлан = ОстатокГотовойПродукцииПоЗаказу;
			КонецЕсли;
 
		КонецЕсли;	
		 
		//Тогда проверяем не осталось ли еще неиспользованного сырья в заказе
		ОстаткиСырьяПоОперациям.Свернуть("НоменклатураСырье, ХарактеристикаСырье", "ОсталосьСписать");
		//и если осталось, то его досписываем
		Если ОстаткиСырьяПоОперациям.Итог("ОсталосьСписать")>0 Тогда
			Для Каждого СтрокаОстаткаСырья из ОстаткиСырьяПоОперациям Цикл
				Если СтрокаОстаткаСырья.ОсталосьСписать<=0 Тогда //еще раз проверка на всякий случай
					Продолжить;
				КонецЕсли;	
				СтрокаСырье = ДокПроизводство.вт_ПроизводствоСырье.Добавить();
				СтрокаСырье.КлючСвязиСтроки  = КодСтроки;
				СтрокаСырье.ГотоваяПродукция = Номенклатура;
				СтрокаСырье.Номенклатура     = СтрокаОстаткаСырья.НоменклатураСырье;
				СтрокаСырье.Характеристика   = СтрокаОстаткаСырья.ХарактеристикаСырье;
				СтрокаСырье.Количество       = СтрокаОстаткаСырья.ОсталосьСписать;
			
			КонецЦикла;	
		КонецЕсли;	
		
		
	КонецЕсли;	

	ДокПроизводство.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	


&НаСервере
Функция СоздатьЗаполнитьНовыйОтчетПроизводства(НаДату, ЗаказВПроизводство, Номенклатура, Характеристика)
	
    Док = Документы.вт_ОтчетПроизводства.СоздатьДокумент();
	
    Док.Организация = ЗаказВПроизводство.Организация;
    
    Док.Подразделение = ?(ЗначениеЗаполнено(ЗаказВПроизводство.Подразделение),ЗаказВПроизводство.Подразделение, КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ПодразделениеПроизводства"));
    
    Док.Склад = ЗаказВПроизводство.Склад;
    
    Док.СтатьяДоходов = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СтатьяДоходовПроизводство");
    
    Док.ВидОперацииПроизводства = Перечисления.вт_ВидыОперацийПроизводства.СобственноеПроизводство;
    
    //Док.АналитикаДоходов = ;
	
    Док.ОтразитьВПроизводственномУчете = ИСТИНА;
	Док.ОтразитьВРеглУчете			   = ИСТИНА; //ВАЖНО! Сразу отражаем в регл.учете т.к. на разных этапах проверяются данные в том числе регл.учета
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
    Док.Дата = НаДату;
	
	Док.ДокументОснование = ЗаказВПроизводство;  
	
	Возврат Док;
	
КонецФункции

&НаСервере
Процедура КомандаСоздатьОтчетПроизводстваНаСервере()
	// нужно из дерева по каждой строке собрать все вновь отмеченные галочки  (именно вновь) и сформировать массив операций
	// и для каждой строки вызывам процедуру СоздатьОбновитьОтчетПроизводства , в которую передаем параметры
	// НаДату - текущая дата
	//ЗаказВПроизводство - ссылка на заказ в производство из текущей строки 
	//Номенклатура - номенклатура готовой продукции из текущей строки,
	//Характеристика - готовой продукции из текущей строки, 
	//МассивОпераций - массив ссылок Операций для текущей обрабатываемой строки
	
	ДеревоПлан = РеквизитФормыВЗначение("ДеревоОперацииПроизводства");
	Для Каждого СтрокаПродукции из ДеревоПлан.Строки Цикл
		
		Для Каждого СтрокаЗаказа из СтрокаПродукции.Строки Цикл
			
			МассивОпераций = Новый Массив;
			
			Для инд=1 по  КоличествоЭтапов  цикл
				 Операция = СтрокаЗаказа["Операция" + инд];
				 ПометкаОперации = СтрокаЗаказа["ЭтапПометка" + инд];
				 СтараяПометкаОперации = СтрокаЗаказа["ЭтапСтараяПометка" + инд];
				 Если ПометкаОперации И  НЕ СтараяПометкаОперации ТОгда
					 МассивОпераций.Добавить(Операция);
				КонецЕсли;	 
			КонецЦикла;	
			
			Если МассивОпераций.Количество()>0 Тогда //Если есть выбранные операции
				СоздатьОбновитьОтчетПроизводства(ТекущаяДата(), СтрокаЗаказа.ЗаказПроизводства,  
								СтрокаПродукции.Номенклатура, СтрокаПродукции.Характеристика, 
								МассивОпераций);
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьОтчетПроизводства(Команда)
	КомандаСоздатьОтчетПроизводстваНаСервере();
	КомандаОбновитьДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаОбновитьДанныеНаСервере()
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗаполнения");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	
	//ПараметрыНастройки = НастройкиКомпоновщика.ПараметрыДанных;
	//
	//Параметр = ПараметрыНастройки.Элементы.Найти("ДатаПланирования");
	//Параметр.Использование = Истина;
	//Параметр.Значение = ДатаПланирования;
	//
	//Параметр = ПараметрыНастройки.Элементы.Найти("ДатаПроизводства");
	//Параметр.Использование = Истина;
	//Параметр.Значение = ДатаПроизводства;
	//
	//Параметр = ПараметрыНастройки.Элементы.Найти("ТолькоЗапланированные");
	//Параметр.Использование = Истина;
	//Параметр.Значение = ТолькоЗапланированные;
	//
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоЗаказов = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗаказов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	
	ДеревоОперацииПроизводства.ПолучитьЭлементы().Очистить();
	
	НовоеКоличествоЭтапов = 0;
	Для каждого СтрокаЗаказ Из ДеревоЗаказов.Строки Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.Строки Цикл
			НовоеКоличествоЭтапов = Макс(НовоеКоличествоЭтапов, СтрокаПродукция.Строки.Количество());
		КонецЦикла; 
	КонецЦикла;  
	
	ОбновитьРеквизитыДереваЗаказов(НовоеКоличествоЭтапов);
	ОбновитьЭлементыФормы(НовоеКоличествоЭтапов);
	
	Если НовоеКоличествоЭтапов<>КоличествоЭтапов Тогда
		КоличествоЭтапов = НовоеКоличествоЭтапов;
		ОбновитьУсловноеОформление();
	КонецЕсли; 
	
//	Возврат;
	
	Для каждого СтрокаПродукция Из ДеревоЗаказов.Строки Цикл
		//Уровень с товаром
		НоваяСтрокаПродукт = ДеревоОперацииПроизводства.ПолучитьЭлементы().Добавить();
		//Продолжить;
		НоваяСтрокаПродукт.Номенклатура = СтрокаПродукция.Номенклатура; // ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказ, СтрокаЗаказ, "Организация, ЗаказПокупателя, ЗаказНаПроизводство, Контрагент");
		НоваяСтрокаПродукт.Характеристика = СтрокаПродукция.Характеристика;
		НоваяСтрокаПродукт.Уровень = 1;
		НоваяСтрокаПродукт.Представление = ПредставлениеНоменклатуры(НоваяСтрокаПродукт);
		//Для ии = СтрокаЗаказ.КоличествоЭтапов + 1 По КоличествоЭтапов Цикл
		//	НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] = Истина;
		//КонецЦикла; 
		
		Для каждого СтрокаЗаказ Из СтрокаПродукция.Строки Цикл
			НоваяСтрокаЗаказ = НоваяСтрокаПродукт.ПолучитьЭлементы().Добавить();
			НоваяСтрокаЗаказ.ЗаказПроизводства = СтрокаЗаказ.ЗаказПроизводства;
			
			НоваяСтрокаЗаказ.Уровень = 2;
			НоваяСтрокаЗаказ.Представление = ПредставлениеЗаказов(НоваяСтрокаЗаказ);
//			НоваяСтрокаПродукция.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
			//Для ии = СтрокаПродукция.КоличествоЭтапов + 1 По КоличествоЭтапов Цикл
			//	НоваяСтрокаПродукция["ЭтапСкрыт" + ии] = Истина;
			//КонецЦикла; 
			НомерЭтапа = 1;  
			
			Для каждого СтрокаЭтап Из СтрокаЗаказ.Строки Цикл
				НоваяСтрокаЗаказ["Операция" + НомерЭтапа] = СтрокаЭтап.Операция;
				НоваяСтрокаЗаказ["ЭтапПометка" + НомерЭтапа] = СтрокаЭтап.Выполнено;
				НоваяСтрокаЗаказ["ЭтапСтараяПометка" + НомерЭтапа] = СтрокаЭтап.Выполнено;
				
				//НоваяСтрокаПродукция["ИсполнительПредставление" + НомерЭтапа] = Строка(СтрокаЭтап.ИсполнительПоУмолчанию);
				//НоваяСтрокаПродукция["Этап" + НомерЭтапа] = СтрокаЭтап.Этап;
				//Если ЗначениеЗаполнено(СтрокаЭтап.Операция) И Элементы.ОтметитьЭтап.СписокВыбора.НайтиПоЗначению(СтрокаЭтап.Операция)=Неопределено Тогда
				//	Элементы.ОтметитьЭтап.СписокВыбора.Добавить(СтрокаЭтап.Операция, Строка(СтрокаЭтап.Операция));
				//КонецЕсли; 
				///НоваяСтрокаПродукция["СборкаЗапасов" + НомерЭтапа] = СтрокаЭтап.СборкаЗапасов;
				//Если ЗначениеЗаполнено(СтрокаЭтап.СборкаЗапасов) Тогда
				//	НоваяСтрокаПродукция["СборкаЗапасовПредставление" + НомерЭтапа] = 
				//	СтрШаблон(НСтр("ru = '№%1 от %2'"), 
				//	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЭтап.СборкаЗапасовНомер, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя),
				//	Формат(СтрокаЭтап.СборкаЗапасовДата, "ДЛФ=D"));
				//ИначеЕсли СтрокаЭтап.КоличествоСборокЗапасов>1 Тогда
				//	НоваяСтрокаПродукция["СборкаЗапасовПредставление" + НомерЭтапа] = 
				//	СтрШаблон(НСтр("ru = 'Производство (%1)'"), 
				//	СтрокаЭтап.КоличествоСборокЗапасов);
				//	НоваяСтрокаПродукция["ЭтапНедоступен" + НомерЭтапа] = Истина;
				//КонецЕсли; 
				//Если ВыполнениеЭтаповРазнымиПодразделениями Тогда
				//	НоваяСтрокаПродукция["СтруктурнаяЕдиница" + НомерЭтапа] = СтрокаЭтап.СборкаЗапасовИсполнитель;
				//Иначе
				//	НоваяСтрокаПродукция["СтруктурнаяЕдиница" + НомерЭтапа] = НоваяСтрокаПродукция.СтруктурнаяЕдиница;
				//КонецЕсли; 
				//НоваяСтрокаПродукция["Исполнитель" + НомерЭтапа] = СтрокаЭтап.СдельныйНарядИсполнитель;
				//НоваяСтрокаПродукция["ИсполнительСкрыт" + НомерЭтапа] = СтрокаЭтап.ИсполнительСкрыт;
				//НоваяСтрокаПродукция["ВыбиратьИсполнителя" + НомерЭтапа] = СтрокаЭтап.ВыбиратьИсполнителя;
				//Если СтрокаЭтап.Выполнено И НЕ СтрокаЭтап.ВЭтотДень Тогда
				//	НоваяСтрокаПродукция["ЭтапНедоступен" + НомерЭтапа] = Истина;
				//КонецЕсли;
				НоваяСтрокаЗаказ.ЕстьВыполненныеЭтапы = (НоваяСтрокаЗаказ.ЕстьВыполненныеЭтапы ИЛИ СтрокаЭтап.Выполнено);
				НоваяСтрокаЗаказ.ЕстьСохраненныеДокументы = (НоваяСтрокаЗаказ.ЕстьСохраненныеДокументы ИЛИ СтрокаЭтап.Выполнено);
				НоваяСтрокаЗаказ.ЕстьНедоступныеЭтапы = (НоваяСтрокаЗаказ.ЕстьНедоступныеЭтапы ИЛИ НоваяСтрокаЗаказ["ЭтапНедоступен" + НомерЭтапа]);
				НомерЭтапа = НомерЭтапа + 1;
				Если НомерЭтапа>КоличествоЭтапов Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			для ии=НомерЭтапа по КоличествоЭтапов Цикл
				
			КонецЦикла;
			
			//НоваяСтрокаЗаказ.ЕстьВыполненныеЭтапы 	  = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "ЕстьВыполненныеЭтапы");
			//НоваяСтрокаЗаказ.ЕстьСохраненныеДокументы = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "ЕстьСохраненныеДокументы");
		КонецЦикла;
		
		Продолжить;
		
		Если НоваяСтрокаПродукт.ПолучитьЭлементы().Количество()=0 Тогда
			ДеревоОперацииПроизводства.ПолучитьЭлементы().Удалить(НоваяСтрокаПродукт);
			Продолжить;
		КонецЕсли; 
		
		
		// Настройка отображения строки заказа
		// 1. Проверка что в колонках располагаются одинаковые этапы
		ПредыдущаяСтрока = Неопределено;
		Если НоваяСтрокаПродукт.ПолучитьЭлементы().Количество()<=1 Тогда
			Для ии = 1 По КоличествоЭтапов Цикл
				НоваяСтрокаПродукт["ЭтапСкрыт" + ии] = Истина;
			КонецЦикла;
			НоваяСтрокаПродукт.ЕстьНедоступныеЭтапы = Истина;
		Иначе
			Для каждого СтрокаПродукция Из НоваяСтрокаЗаказ.ПолучитьЭлементы() Цикл
				Если ПредыдущаяСтрока=Неопределено Тогда
					ПредыдущаяСтрока = СтрокаПродукция;
					Продолжить;
				КонецЕсли; 
				Для ии = 1 По КоличествоЭтапов Цикл
					Скрыт = Ложь;
					Если ПредыдущаяСтрока["Этап" + ии]<>СтрокаПродукция["Этап" + ии] 
						ИЛИ НЕ ЗначениеЗаполнено(ПредыдущаяСтрока["Этап" + ии]) 
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаПродукция["Этап" + ии]) Тогда
						Скрыт = Истина;
					КонецЕсли; 
					Если Скрыт И НЕ НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] Тогда
						НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущаяСтрока = СтрокаПродукция;
			КонецЦикла;
			Если ПредыдущаяСтрока<>Неопределено Тогда
				Для ии = 1 По КоличествоЭтапов Цикл
					Если НЕ НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] Тогда
						НоваяСтрокаЗаказ["Этап" + ии] = ПредыдущаяСтрока["Этап" + ии];
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли; 
		// 2. Отметка выполненных этапов для заказов
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаПродукт["ЭтапПометка" + ии] = ЗначениеЗаполнено(НоваяСтрокаПродукт["Операция" + ии]);
		КонецЦикла; 
		Для каждого СтрокаЗаказ Из НоваяСтрокаПродукт.ПолучитьЭлементы() Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Если НоваяСтрокаПродукт["ЭтапПометка" + ии] И НЕ СтрокаЗаказ["ЭтапПометка" + ии] Тогда
					НоваяСтрокаПродукт["ЭтапПометка" + ии] = Ложь;
				КонецЕсли; 
				Если НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] ИЛИ НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаЗаказ["ЭтапНедоступен" + ии] Тогда
					НоваяСтрокаПродукт["ЭтапНедоступен" + ии] = Истина;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["ЭтапСтараяПометка" + ии] = НоваяСтрокаЗаказ["ЭтапПометка" + ии];
		КонецЦикла;
		// 3. Доступность операций для этапов
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["ИсполнительСкрыт" + ии] = Истина;
			НоваяСтрокаЗаказ["ВыбиратьИсполнителя" + ии] = Ложь;
		КонецЦикла; 
		Для каждого СтрокаПродукция Из НоваяСтрокаЗаказ.ПолучитьЭлементы() Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Если НЕ НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] 
					И НоваяСтрокаЗаказ["ИсполнительСкрыт" + ии] 
					И НЕ СтрокаПродукция["ИсполнительСкрыт" + ии] Тогда
					НоваяСтрокаЗаказ["ИсполнительСкрыт" + ии] = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] 
					И НЕ НоваяСтрокаЗаказ["ВыбиратьИсполнителя" + ии] 
					И СтрокаПродукция["ВыбиратьИсполнителя" + ии] Тогда
					НоваяСтрокаЗаказ["ВыбиратьИсполнителя" + ии] = Истина;
				КонецЕсли;
				Если НЕ ПустаяСтрока(СтрокаПродукция["ИсполнительПредставление" + ии]) 
					И Найти(НоваяСтрокаЗаказ["ИсполнительПредставление" + ии], СтрокаПродукция["ИсполнительПредставление" + ии])=0 Тогда
					НоваяСтрокаЗаказ["ИсполнительПредставление" + ии] = НоваяСтрокаЗаказ["ИсполнительПредставление" + ии] + ?(ПустаяСтрока(НоваяСтрокаЗаказ["ИсполнительПредставление" + ии]), "", ", ") + СтрокаПродукция["ИсполнительПредставление" + ии];
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		// 4. Поля расшифровки
		//Для ии = 1 По КоличествоЭтапов Цикл
		//	НоваяСтрокаЗаказ["СборкаЗапасов" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СборкаЗапасов", ии);
		//	Если ЗначениеЗаполнено(НоваяСтрокаЗаказ["СборкаЗапасов" + ии]) 
		//		И НоваяСтрокаЗаказ.ПолучитьЭлементы().Количество()>=1 Тогда
		//		НоваяСтрокаЗаказ["СборкаЗапасовПредставление" + ии] = НоваяСтрокаЗаказ.ПолучитьЭлементы().Получить(0)["СборкаЗапасовПредставление" + ии];
		//	КонецЕсли; 
		//	НоваяСтрокаЗаказ["СдельныйНаряд" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СдельныйНаряд", ии);
		//	Если ЗначениеЗаполнено(НоваяСтрокаЗаказ["СдельныйНаряд" + ии]) 
		//		И НоваяСтрокаЗаказ.ПолучитьЭлементы().Количество()>=1 Тогда
		//		НоваяСтрокаЗаказ["СдельныйНарядПредставление" + ии] = НоваяСтрокаЗаказ.ПолучитьЭлементы().Получить(0)["СдельныйНарядПредставление" + ии];
		//	КонецЕсли; 
		//	НоваяСтрокаЗаказ["СтруктурнаяЕдиница" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СтруктурнаяЕдиница", ии);
		//	НоваяСтрокаЗаказ["Исполнитель" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "Исполнитель", ии);
		//КонецЦикла;
		//// 5. Структурная единица завершающего этапа
		//НоваяСтрокаЗаказ.СтруктурнаяЕдиница = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СтруктурнаяЕдиница");
		//
	КонецЦикла;
	
КонецПроцедуры                     

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНоменклатуры(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Возврат НСтр("ru = '<Номенклатура не указана>'");
	КонецЕсли;
	
	Представление = Строка(СтрокаДерева.Номенклатура);
	Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Характеристика);
	КонецЕсли; 
	//Если ЗначениеЗаполнено(СтрокаДерева.Партия) Тогда
	//	Представление = Представление + ", " + Строка(СтрокаДерева.Партия);
	//КонецЕсли; 
	//Если ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
	//	Представление = Представление + ", " + Строка(СтрокаДерева.Спецификация);
	//КонецЕсли; 
	
	Возврат Представление;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗаказов(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.ЗаказПроизводства) Тогда
		Возврат НСтр("ru = '<Без заказа>'");
	КонецЕсли;
	
	ЗаполненыОбаЗаказа = ЗначениеЗаполнено(СтрокаДерева.ЗаказПроизводства);
	
	Представление = "";
	Если ЗначениеЗаполнено(СтрокаДерева.ЗаказПроизводства) Тогда
		Представление = Представление + " №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаДерева.ЗаказПроизводства.Номер) + " от "+ Формат(СтрокаДерева.ЗаказПроизводства.Дата,"ДФ=dd.MM.yyyy"); // СтрЗаменить(Строка(СтрокаДерева.ЗаказПроизводства), "Заказ в производство", "");
	КонецЕсли; 
	
	
	
	Возврат Представление;
	
КонецФункции 

&НаСервере
Процедура ОбновитьРеквизитыДереваЗаказов(НовоеКоличествоЭтапов)
	
	// Обновление реквизитов формы
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Если НовоеКоличествоЭтапов>КоличествоЭтапов Тогда
		
		Для ии = КоличествоЭтапов + 1 По НовоеКоличествоЭтапов Цикл
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Операция" + ии, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапПометка" + ии, Новый ОписаниеТипов("Булево"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапСтараяПометка" + ии, Новый ОписаниеТипов("Булево"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапНедоступен" + ии, Новый ОписаниеТипов("Булево"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапСкрыт" + ии, Новый ОписаниеТипов("Булево"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Подразделение" + ии, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИсполнительСкрыт" + ии, Новый ОписаниеТипов("Булево"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВыбиратьИсполнителя" + ии, Новый ОписаниеТипов("Булево"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Исполнитель" + ии, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица, СправочникСсылка.вт_РабочиеСмены"), "ДеревоОперацииПроизводства"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИсполнительПредставление" + ии, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)), "ДеревоОперацииПроизводства"));
			//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СборкаЗапасов" + ии, Новый ОписаниеТипов("ДокументСсылка.СборкаЗапасов"), "Заказы"));
			//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СборкаЗапасовПредставление" + ии, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)), "Заказы"));
			//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СдельныйНаряд" + ии, Новый ОписаниеТипов("ДокументСсылка.СдельныйНаряд"), "Заказы"));
			//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СдельныйНарядПредставление" + ии, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)), "Заказы"));
		КонецЦикла; 
		
	ИначеЕсли НовоеКоличествоЭтапов<КоличествоЭтапов Тогда
		
		Для ии = НовоеКоличествоЭтапов + 1 По КоличествоЭтапов Цикл
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.Операция" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ЭтапПометка" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ЭтапСтараяПометка" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ЭтапНедоступен" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ЭтапСкрыт" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ИсполнительСкрыт" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ВыбиратьИсполнителя" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.Исполнитель" + ии);
			МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.ИсполнительПредставление" + ии);
			//МассивУдаляемыхРеквизитов.Добавить("ДеревоОперацииПроизводства.СтруктурнаяЕдиница" + ии);
			//МассивУдаляемыхРеквизитов.Добавить("Заказы.СборкаЗапасов" + ии);
			//МассивУдаляемыхРеквизитов.Добавить("Заказы.СборкаЗапасовПредставление" + ии);
			//МассивУдаляемыхРеквизитов.Добавить("Заказы.СдельныйНаряд" + ии);
			//МассивУдаляемыхРеквизитов.Добавить("Заказы.СдельныйНарядПредставление" + ии);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если МассивДобавляемыхРеквизитов.Количество()>0 ИЛИ МассивУдаляемыхРеквизитов.Количество()>0 Тогда
		
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(НовоеКоличествоЭтапов)
	
	Если НовоеКоличествоЭтапов>КоличествоЭтапов Тогда
		    ГруппаВертикально = Элементы.Найти("ЗаказыГруппаЭтапВертикально");
			Если ГруппаВертикально = Неопределено ТОгда
				ГруппаВертикально = Элементы.Добавить("ЗаказыГруппаЭтапВертикально", Тип("ГруппаФормы"), Элементы.ДеревоОперацииПроизводства);
				ГруппаВертикально.Вид = ВидГруппыФормы.ГруппаКолонок;
				ГруппаВертикально.Группировка = ГруппировкаКолонок.Горизонтальная;
				ГруппаВертикально.ОтображатьВШапке = Истина;
				ГруппаВертикально.РастягиватьПоГоризонтали = Ложь;
				ГруппаВертикально.Ширина = 30;
				ГруппаВертикально.Заголовок = "Операции производства ";
			КонецЕсли;
		
		Для ии = КоличествоЭтапов + 1 По НовоеКоличествоЭтапов Цикл
			
			
			Группа = Элементы.Добавить("ЗаказыГруппаЭтап" + ии, Тип("ГруппаФормы"), ГруппаВертикально);
			Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
			Группа.Группировка = ГруппировкаКолонок.ВЯчейке;
			Группа.ОтображатьВШапке = Ложь;
			Группа.РастягиватьПоГоризонтали = Ложь;
			Группа.Ширина = 30;
			
			ЭлементПометка = Элементы.Добавить("ЗаказыЭтапПометка" + ии, Тип("ПолеФормы"), Группа);
			ЭлементПометка.Заголовок = "Пометка "+ии;
			ЭлементПометка.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементПометка.ПутьКДанным = "ДеревоОперацииПроизводства.ЭтапПометка" + ии;
			ЭлементПометка.ОтображатьВШапке = Ложь;
			ЭлементПометка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			ЭлементПометка.УстановитьДействие("ПриИзменении", "Подключаемый_ЭтапПометкаПриИзменении");
			
			ЭлементЗаголовок = Элементы.Добавить("ЗаказыЭтапЗаголовок" + ии, Тип("ПолеФормы"), Группа);
			ЭлементЗаголовок.Заголовок = "Заголовок "+ии;
			ЭлементЗаголовок.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементЗаголовок.ПутьКДанным = "ДеревоОперацииПроизводства.Операция" + ии;
			ЭлементЗаголовок.ОтображатьВШапке = Ложь;
			ЭлементЗаголовок.Ширина = 30;
			
			//ГруппаРасшифровка = Элементы.Добавить("ЗаказыГруппаРасшифровка" + ии, Тип("ГруппаФормы"), ГруппаВертикально);
			//ГруппаРасшифровка.Вид = ВидГруппыФормы.ГруппаКолонок;
			//ГруппаРасшифровка.Группировка = ГруппировкаКолонок.Вертикальная;
			//ГруппаРасшифровка.ОтображатьВШапке = Ложь;
			
			// Реквизиты этапов
			//Группа = Элементы.Добавить("ЗаказыГруппаПоля" + ии, Тип("ГруппаФормы"), ГруппаРасшифровка);
			//Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
			//Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
			//Группа.ОтображатьВШапке = Ложь;
			//Группа.РастягиватьПоГоризонтали = Ложь;
			//Группа.Ширина = 30;
			//
			//Если ИспользоватьСтруктурныеЕдиницы И ВыполнениеЭтаповРазнымиПодразделениями Тогда
			//	
			//	ЭлементПоле = Элементы.Добавить("ЗаказыЭтапСтруктурнаяЕдиница" + ии, Тип("ПолеФормы"), Группа);
			//	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
			//	ЭлементПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			//	ЭлементПоле.ПутьКДанным = "Заказы.СтруктурнаяЕдиница" + ии;
			//	ЭлементПоле.ОтображатьВШапке = Ложь;
			//	ЭлементПоле.Ширина = 15;
			//	ЭлементПоле.ПодсказкаВвода = НСтр("ru = 'Подразделение этапа'");
			//	ЭлементПоле.КнопкаОткрытия = Ложь;
			//	ЭлементПоле.КнопкаСоздания = Ложь;
			//	Если ВыполнениеЭтаповРазнымиПодразделениями Тогда
			//		ЭлементПоле.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			//	КонецЕсли; 
			//	ЭлементПоле.УстановитьДействие("Автоподбор", "Подключаемый_ЭтапСтруктурнаяЕдиницаАвтоподбор");
			//	ЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ЭтапСтруктурнаяЕдиницаПриИзменении");
			//	ЭлементПоле.ПараметрыВыбора = Элементы.ЗаказыСтруктурнаяЕдиница.ПараметрыВыбора;
			//	
			//КонецЕсли;
			//
			//Если ИспользоватьТехоперации Тогда
			//	
			//	ГруппаТехОперации = Элементы.Добавить("ЗаказыГруппаТехОперации" + ии, Тип("ГруппаФормы"), Группа);
			//	ГруппаТехОперации.Вид = ВидГруппыФормы.ГруппаКолонок;
			//	ГруппаТехОперации.Группировка = ГруппировкаКолонок.Вертикальная;
			//	ГруппаТехОперации.ОтображатьВШапке = Ложь;
			//	
			//	ЭлементПоле = Элементы.Добавить("ЗаказыЭтапИсполнитель" + ии, Тип("ПолеФормы"), ГруппаТехОперации);
			//	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
			//	ЭлементПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			//	ЭлементПоле.ПутьКДанным = "Заказы.Исполнитель" + ии;
			//	ЭлементПоле.ОтображатьВШапке = Ложь;
			//	ЭлементПоле.Ширина = 15;
			//	ЭлементПоле.КнопкаОткрытия = Ложь;
			//	ЭлементПоле.КнопкаСоздания = Ложь;
			//	ЭлементПоле.ПодсказкаВвода = НСтр("ru = 'Исполнитель этапа'");
			//	ЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ЭтапИсполнительПриИзменении");
			//	
			//	ЭлементПоле = Элементы.Добавить("ЗаказыЭтапИсполнительПредставление" + ии, Тип("ПолеФормы"), ГруппаТехОперации);
			//	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
			//	ЭлементПоле.ПутьКДанным = "Заказы.ИсполнительПредставление" + ии;
			//	ЭлементПоле.ОтображатьВШапке = Ложь;
			//	ЭлементПоле.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
			//	ЭлементПоле.Ширина = 15;
			//	ЭлементПоле.ТолькоПросмотр = Истина;
			//	
			//КонецЕсли; 
			
			// Сформированные документы
			//Группа = Элементы.Добавить("ЗаказыГруппаДокументы" + ии, Тип("ГруппаФормы"), ГруппаРасшифровка);
			//Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
			//Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
			//Группа.ОтображатьВШапке = Ложь;
			//Группа.РастягиватьПоГоризонтали = Ложь;
			//Группа.Ширина = 30;
			//
			//ЭлементПоле = Элементы.Добавить("ЗаказыЭтапСборкаЗапасовПредставление" + ии, Тип("ПолеФормы"), Группа);
			//ЭлементПоле.Вид = ВидПоляФормы.ПолеНадписи;
			//ЭлементПоле.ПутьКДанным = "Заказы.СборкаЗапасовПредставление" + ии;
			//ЭлементПоле.ОтображатьВШапке = Ложь;
			//ЭлементПоле.Гиперссылка = Истина;
			//ЭлементПоле.ГиперссылкаЯчейки = Истина;
			//ЭлементПоле.Ширина = 30;
			//
			//Если ИспользоватьТехоперации Тогда
			//	
			//	ЭлементПоле = Элементы.Добавить("ЗаказыЭтапСдельныйНарядПредставление" + ии, Тип("ПолеФормы"), Группа);
			//	ЭлементПоле.Вид = ВидПоляФормы.ПолеНадписи;
			//	ЭлементПоле.ПутьКДанным = "Заказы.СдельныйНарядПредставление" + ии;
			//	ЭлементПоле.ОтображатьВШапке = Ложь;
			//	ЭлементПоле.Гиперссылка = Истина;
			//	ЭлементПоле.ГиперссылкаЯчейки = Истина;
			//	ЭлементПоле.Ширина = 30;
			//	
			//КонецЕсли; 
			
		КонецЦикла;
		
	ИначеЕсли НовоеКоличествоЭтапов<КоличествоЭтапов Тогда
		
		Для ии = НовоеКоличествоЭтапов + 1 По КоличествоЭтапов Цикл
			УдалитьЭлементФормы("ЗаказыЭтапПометка" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапЗаголовок" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапСтруктурнаяЕдиница" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапИсполнитель" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапСборкаЗапасовПредставление" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапСдельныйНарядПредставление" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаЭтап" + ии);
			//УдалитьЭлементФормы("ЗаказыГруппаДокументы" + ии);
			//УдалитьЭлементФормы("ЗаказыГруппаТехОперации" + ии);
			//УдалитьЭлементФормы("ЗаказыГруппаПоля" + ии);
			//УдалитьЭлементФормы("ЗаказыГруппаРасшифровка" + ии);
			//УдалитьЭлементФормы("ЗаказыГруппаЭтапВертикально" + ии);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//Закрашиваем строку на уровне
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ДеревоОперацииПроизводства");
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.Уровень", 1);
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
	//КомпоновкаДанныхКлиентСервер.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.Уровень", 1);
	//КомпоновкаДанныхКлиентСервер.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	
	
	Для ии = 1 По КоличествоЭтапов Цикл
		
		//ячейки в строках с продукцией
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ЗаказыЭтапПометка" + ии);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ЗаказыЭтапЗаголовок" + ии);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.Уровень", 1);
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("Отображать", ЛОЖЬ);
		
		//Отмеченные/выполненные ячейки  в строке заказа
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ЗаказыЭтапПометка" + ии);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.Уровень", 2);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.ЭтапПометка"+ии, Истина);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.ЭтапСтараяПометка"+ии, Истина);
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", ИСТИНА);
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПредупреждения);
		
		//сделать недоступными поля где нет операции
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ЗаказыЭтапПометка" + ии);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ЗаказыЭтапЗаголовок" + ии);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.Операция" + ии, Справочники.Номенклатура.ПустаяСсылка());
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("Отображать", ЛОЖЬ);
		Продолжить;
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(НовоеУсловноеОформление.Поля, "ЗаказыЭтапПометка" + ии);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоОперацииПроизводства.ЭтапНедоступен" + ии, Истина);
		КомпоновкаДанныхКлиентСервер.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапЗаголовок" + ии);
		ОтборЭлемента = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОперацииПроизводства.ЭтапПометка" + ии);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОперацииПроизводства.ЭтапСтараяПометка" + ии);
		КомпоновкаДанныхКлиентСервер.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Новый Шрифт, , , Истина));
		
		//// Структурная единица
		//Если ИспользоватьСтруктурныеЕдиницы И ВыполнениеЭтаповРазнымиПодразделениями Тогда
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Этап" + ии, Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СтруктурнаяЕдиница" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 2);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапПометка" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
		//	ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.СборкаЗапасов" + ии, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапСтараяПометка" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
		//	ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапПометка" + ии, Ложь);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
		//	
		//КонецЕсли; 
		//
		//// Исполнитель
		//Если ИспользоватьТехоперации Тогда
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Исполнитель" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапПометка" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ВыбиратьИсполнителя" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 2);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
		//	ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапПометка" + ии, Ложь);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
		//	ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ИсполнительСкрыт" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ВыбиратьИсполнителя" + ии, Ложь);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.СдельныйНаряд" + ии, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапСтараяПометка" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		//	
		//	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнительПредставление" + ии);
		//	ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ИсполнительСкрыт" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ВыбиратьИсполнителя" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.СдельныйНаряд" + ии, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
		//	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапСтараяПометка" + ии, Истина);
		//	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		//	
		//КонецЕсли; 
		
		// Производство
		//НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСборкаЗапасовПредставление" + ии);
		//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СборкаЗапасовПредставление" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		//// Для скрытых этапов элемент используется как разделитель
		//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапСкрыт" + ии, Ложь);
		//РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		//
		// Сдельный наряд
		//НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСдельныйНарядПредставление" + ии);
		//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СдельныйНарядПредставление" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		//ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Ложь);
		//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ИсполнительСкрыт" + ии, Истина);
		//РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		// Скрытые этапы
		//НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапПометка" + ии);
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапЗаголовок" + ии);
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
		//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСдельныйНарядПредставление" + ии);
		//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапСкрыт" + ии, Истина);
		//РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	КонецЦикла; 
	
	//// Структурная единица завершения производства
	//НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыСтруктурнаяЕдиница");
	//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 2);
	//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЕстьВыполненныеЭтапы", Истина);
	//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СтруктурнаяЕдиница", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	//РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	//
	//НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	//РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыСтруктурнаяЕдиница");
	//ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЕстьНедоступныеЭтапы", Истина);
	//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЕстьСохраненныеДокументы", Истина);
	//РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЗаказНаПроизводство", Документы.ЗаказНаПроизводство.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	//РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	//РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	//      
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент<>Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	КомандаОбновитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперацииПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.текущиеДанные.ЗаказПроизводства=Неопределено ТОгда
		Возврат;
	КонецЕсли;	
	ОткрытьЗначение(Элемент.текущиеДанные.ЗаказПроизводства);
КонецПроцедуры
