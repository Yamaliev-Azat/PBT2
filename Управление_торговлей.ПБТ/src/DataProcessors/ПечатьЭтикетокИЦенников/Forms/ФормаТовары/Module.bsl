
&НаСервере
Процедура Р1_ЗаполнитьПоСменномуЗаданиюПослеНаСервере(пСменноеЗадание)
	
	Если НЕ ЗначениеЗаполнено(СменноеЗадание) Тогда
	    Возврат;
	КонецЕсли;
	
	Объект.СменноеЗадание = пСменноеЗадание;
	ОбновлениеДанныхПоВыбраннымТоварам = Ложь;
	СохранятьШаблоныИКоличество = Ложь;
	
		// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	
	УстановитьОбязательныеПоляДанных(СтруктураНастроек, Истина);
	
	УстановитьПараметрыДанных(СтруктураНастроек);
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	Если Объект.ИсходныеДанныеТовары.Количество() > 0 ИЛИ ПечатьИзДокумента ИЛИ ОбновлениеДанныхПоВыбраннымТоварам Тогда
		Если КонтролироватьАссортимент Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТоварыАссортимент";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТовары";
		КонецЕсли;
		Если ОбновлениеДанныхПоВыбраннымТоварам Тогда
			ИсходныеДанные = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Упаковка");
			ИсходныеДанные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
		Иначе
			СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанныеТовары.Выгрузить();
		КонецЕсли;
	Иначе
		Если КонтролироватьАссортимент Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТоварыАссортимент";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТовары";
		КонецЕсли;
	КонецЕсли;
	
	Объект.Товары.Очистить();

	НомерСтроки = 0;
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанныхПоСЗ(СтруктураНастроек, "Товары", пСменноеЗадание);
	
	ПроверятьЕдиничнуюУпаковку = Истина;
	Если СтруктураРезультата.Таблица.Колонки.Найти("ИспользоватьУпаковки") = Неопределено 
		Или СтруктураРезультата.Таблица.Колонки.Найти("НеОднаЕдиничнаяУпаковка") = Неопределено Тогда
		ПроверятьЕдиничнуюУпаковку = Ложь;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Для Каждого СтрокаТЧ Из СтруктураРезультата.Таблица Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Цена                        = СтрокаТЧ.Цена;
		НоваяСтрока.ДатаПоследнегоИзмененияЦены = СтрокаТЧ.ДатаПоследнегоИзмененияЦены;
		Если ЗначениеЗаполнено(Объект.ВидЦеныДополнительно) Тогда
			НоваяСтрока.ЦенаДополнительно                        = СтрокаТЧ.ЦенаДополнительно;
			НоваяСтрока.ДатаПоследнегоИзмененияЦеныДополнительно = СтрокаТЧ.ДатаПоследнегоИзмененияЦеныДополнительно;
		КонецЕсли;
		
		Если СтрокаТЧ.Весовой Тогда
			НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(СтрокаТЧ.Штрихкод);
		Иначе
			НоваяСтрока.Штрихкод = СтрокаТЧ.Штрихкод;
		КонецЕсли;
		
		ШаблонЦенникаВидаНоменклатуры    = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ВидНоменклатуры.ШаблонЦенника")];
		ШаблонЦенникаНоменклатуры        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ШаблонЦенника")];
		НоваяСтрока.ШаблонЦенника        = ?(ЗначениеЗаполнено(ШаблонЦенникаНоменклатуры), ШаблонЦенникаНоменклатуры, ШаблонЦенникаВидаНоменклатуры);
		
		ШаблонЦенникаВидаНоменклатуры    = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки")];
		ШаблонЦенникаНоменклатуры        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ШаблонЭтикетки")];
		НоваяСтрока.ШаблонЭтикетки       = ?(ЗначениеЗаполнено(ШаблонЦенникаНоменклатуры), ШаблонЦенникаНоменклатуры, ШаблонЦенникаВидаНоменклатуры);
		
		//НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.КоличествоВДокументе = СтрокаТЧ.Количество;
		НоваяСтрока.Весовой              = СтрокаТЧ.Весовой;
		//Если ИспользоватьХарактеристикиНоменклатуры Тогда
		//	НоваяСтрока.ХарактеристикиИспользуются = СтрокаТЧ.ХарактеристикиИспользуются;
		//КонецЕсли;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		НоваяСтрока.Выбран = Ложь;
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.КоличествоЭтикеток = 1;
		НоваяСтрока.Р1_Серия = СтрокаТЧ.Серия;
		НоваяСтрока.Р1_ДатаИзготовления = СтрокаТЧ.ДатаИзготовления;
		НоваяСтрока.Р1_Масса = СтрокаТЧ.Масса;
		НоваяСтрока.Р1_НомерЗамеса = СтрокаТЧ.НомерЗамеса;
		
	КонецЦикла;
	
	ОбновитьВидимостьЗависимыхОтШаблонаПолей();
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Р1_ЗаполнитьПоСменномуЗаданиюПосле(Команда)
	Р1_ЗаполнитьПоСменномуЗаданиюПослеНаСервере(СменноеЗадание);
КонецПроцедуры

&НаКлиенте
Процедура Р1_СменноеЗаданиеПриИзмененииПосле(Элемент)
	
	Р1_ЗаполнитьПоСменномуЗаданиюПослеНаСервере(СменноеЗадание);
	
КонецПроцедуры

//******** вызов функции ПолучитьПараметрыГП() подменил, чтобы передать добавленные колонки табличной части
//******** и в качестве указателя на то, что нужно получать данные по другой СКД передается параметр СменноеЗадание

&НаСервере
&Вместо("ПолучитьПараметры")
Функция Р1_ПолучитьПараметрыГП()
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаДополнительно", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", Новый ОписаниеТипов("Дата"));
	
	//brava
	Товары.Колонки.Добавить("Р1_Серия", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("Р1_ДатаИзготовления", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("Р1_Масса", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("Р1_НомерЗамеса", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ШаблонЭтикетки) Тогда
			НоваяСтрока.КоличествоЭтикеток = 0;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ШаблонЦенника) Тогда
			НоваяСтрока.КоличествоЦенников = 0;
		КонецЕсли;
	КонецЦикла;
	
	МаксимальныйКодВесовогоТовара = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	УстановитьПривилегированныйРежим(Истина);
	ПравилоВыгрузкиВВесы = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПравилоОбмена, "ТипПодключаемогоОборудования") = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация",   Объект.Организация);
	ПараметрыПечати.Вставить("ПравилоОбмена", Объект.ПравилоОбмена);
	ПараметрыПечати.Вставить("МаксимальныйКодВесовогоТовара", МаксимальныйКодВесовогоТовара);
	ПараметрыПечати.Вставить("ПравилоВыгрузкиВВесы",          ПравилоВыгрузкиВВесы);
	ПараметрыПечати.Вставить("ВидЦены",       Объект.ВидЦены);
	ПараметрыПечати.Вставить("Дата",          Объект.Дата);
	ПараметрыПечати.Вставить("Склад",         Объект.Склад);
	ПараметрыПечати.Вставить("ВидЦеныДополнительно", Объект.ВидЦеныДополнительно);
	ПараметрыПечати.Вставить("ДатаДополнительно",    Объект.ДатаДополнительно);
	ПараметрыПечати.Вставить("СменноеЗадание",    Объект.СменноеЗадание);   //brava
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Процедура Р1_УстановитьРежимПечатиЭтикетокГППослеНаСервере()
	
	//****Добавил этот режим для управления видимостью сменного задания
	//****но пока от этого режима пришлось отказаться, потому что при печати в процедурах проверяется режим
	//****а подменять все эти процедуры пока не вижу смысла
	//Режим = "ПечатьЭтикетокГП";
	Режим = "ПечатьЭтикеток";
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Р1_УстановитьРежимПечатиЭтикетокГППосле(Команда)
	Р1_УстановитьРежимПечатиЭтикетокГППослеНаСервере();
КонецПроцедуры

&НаСервере
&После("ОбновитьВидимостьЭлементов")
Процедура Р1_ОбновитьВидимостьЭлементов()
	
	//Если Режим = "ПечатьЭтикетокГП" Тогда
	Если Режим = "ПечатьЭтикеток" Тогда
		Элементы.СменноеЗадание.Видимость = Истина;
	Иначе
		Элементы.СменноеЗадание.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

