&Вместо("ДоступныеТипыОбеспечения")
Функция ПБТ_ДоступныеТипыОбеспечения() Экспорт
	
	//brava 01.04.2021
	//так как у функции нет аннтонации после, то приходится заменять целиком.
	//здесь надо только добавить производство в конце.
	// в модуле подразумевалось, что производство вообще не доступно
	
	Результат = Новый Массив();
	ЕстьОграничения = Ложь;
	ЕстьДоступПокупка = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	Если ЕстьДоступПокупка Тогда
		Результат.Добавить(Перечисления.ТипыОбеспечения.Покупка);
	Иначе
		ЕстьОграничения = Истина;
	КонецЕсли;
	
	ЕстьДоступПеремещение = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение");
	Если ЕстьДоступПеремещение Тогда
		Результат.Добавить(Перечисления.ТипыОбеспечения.Перемещение);
	Иначе
		ЕстьОграничения = Истина;
	КонецЕсли;
	
	ЕстьДоступСборка = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаСборку)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
	Если ЕстьДоступСборка Тогда
		Результат.Добавить(Перечисления.ТипыОбеспечения.СборкаРазборка);
	Иначе
		ЕстьОграничения = Истина;
	КонецЕсли;

	ЕстьОграниченияВременный = Истина;
	ЕстьОграничения = ЕстьОграничения Или ЕстьОграниченияВременный;
	
	ЕстьОграниченияВременный = Истина;
	ЕстьОграничения = ЕстьОграничения Или ЕстьОграниченияВременный;
	
	Результат.Добавить(Перечисления.ТипыОбеспечения.Производство); //brava 
	
	Если ЕстьОграничения Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&После("СформироватьЗаказы")
Процедура ПБТ_СформироватьЗаказы(Параметры, АдресРезультата) Экспорт

	//здесь мы формируем заказы на производство
	ДокументыОбъекты = Новый Массив();
	ТекстКомментарий = НСтр("ru = 'Сформирован автоматически обработкой ""Формирование заказов по потребностям"".'");

	Таблица = Параметры.ТаблицаПотребностей;
	
	// Округление имеет смысл только когда могут использоваться упаковки номенклатуры
	Если Параметры.ИспользоватьУпаковки Тогда
		ОкруглитьПередСозданиемЗаказов(Таблица);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗначений", Таблица);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапроса.Добавить(ВременнаяТаблицаИзТаблицыКЗаказу(), "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаДанныеЗаполнения(), "");
	
	ТекстыЗапроса.Добавить(ТаблицаЗаказыНаПроизводствоКОформлению(), "ТаблицаЗаказыНаПроизводство");
	//Запрос.УстановитьПараметр("УправлениеПроизводством2_2", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2"));
	
	УстановитьПривилегированныйРежим(Истина);
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоляКлючаЗаказа = "Организация, Подразделение, Склад";
	МассивТаблиц = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Таблицы.ТаблицаЗаказыНаПроизводство, ПоляКлючаЗаказа);
	
	Для Каждого Элемент Из МассивТаблиц Цикл
		
		ДанныеЗаполнения = Элемент.Ключ;
		ДанныеЗаполнения.Вставить("Товары", Элемент.Таблица);
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментарий);
		ДанныеЗаполнения.Вставить("Склад", Элемент.Ключ.Склад);
		ДанныеЗаполнения.Вставить("Организация", Элемент.Ключ.Организация);
		Документ = ПолучитьДокумент(Документы.вт_ЗаказВПроизводство, ДанныеЗаполнения, Перечисления.вт_СтатусыПроизводства.Ожидание);
		ДокументыОбъекты.Добавить(Документ);
		
	КонецЦикла;
	
	ИспользованиеСтатусов = Новый Соответствие();
	//ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	ИспользоватьСтатусы = Истина;
	ИспользованиеСтатусов.Вставить(Тип("ДокументСсылка.вт_ЗаказВПроизводство"),     ИспользоватьСтатусы);
	ИспользованиеСтатусовИтог = Ложь;
	
	// Помещаем в хранилище результат формирования после записи каждого документа на случай прерывания задания
	Результат = Новый Структура("ТаблицаДокументов,СписокСообщений", Параметры.ТаблицаДокументов, Новый Массив);
	Для Каждого Документ Из ДокументыОбъекты Цикл
		
		Ошибка = Не Документ.ПроверитьЗаполнение();
		
		Если Не Ошибка Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Документ.Записать(РежимЗаписиДокумента.Проведение);
				ДобавитьДокументВРезультат(Документ, Результат, ИспользованиеСтатусов);
				ПоместитьВоВременноеХранилище(Результат, Параметры.АдресРезультатаФормированияЗаказов);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ИмяСобытияЖурнала = НСтр("ru = 'Формирование заказов: создание документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Ошибка = Истина;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Ошибка Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Документ.Записать(РежимЗаписиДокумента.Запись);
				ДобавитьДокументВРезультат(Документ, Результат, ИспользованиеСтатусов);
				ПоместитьВоВременноеХранилище(Результат, Параметры.АдресРезультатаФормированияЗаказов);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ИмяСобытияЖурнала = НСтр("ru = 'Формирование заказов: создание документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЗаказыНаПроизводствоКОформлению()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ИсточникОбеспечения = НЕОПРЕДЕЛЕНО ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ
		|				Т.ИсточникОбеспечения
		|		КОНЕЦ                                 КАК СкладОтправитель,
		|	Т.Организация                             КАК Организация,
		|	Т.Подразделение                           КАК Подразделение,
		|	Т.Склад                                   КАК Склад,
		|	Т.НаправлениеДеятельности                 КАК НаправлениеДеятельности,
		|
		|	Т.Номенклатура                            КАК Номенклатура,
		|	Т.Характеристика                          КАК Характеристика,
		|	Т.Назначение                              КАК Назначение,
		|
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Т.ДатаПоставки, ДЕНЬ, - Т.ДлительностьВДнях)) КАК НачалоОтгрузки,
		|	Т.ДатаПоставки                            КАК ОкончаниеПоступления,
		|
		|	СУММА(Т.Количество)                       КАК КоличествоУпаковок,
		|	СУММА(Т.Количество)                       КАК Количество
		|ИЗ
		|	ВтДанныеЗаполнения КАК Т
		|ГДЕ
		|	Т.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
		|СГРУППИРОВАТЬ ПО
		|	Т.ИсточникОбеспечения, Т.Организация, Т.Подразделение, Т.Склад, Т.НаправлениеДеятельности,
		|	Т.Номенклатура, Т.Характеристика, Т.Назначение, Т.ДатаПоставки, Т.ДлительностьВДнях
		|УПОРЯДОЧИТЬ ПО
		|	СкладОтправитель, Склад, Организация, Подразделение, НаправлениеДеятельности,                 // порядок обхода заказов
		|	Назначение, НачалоОтгрузки, Номенклатура, Характеристика, ОкончаниеПоступления // порядок строк в заказе
		|;
		|
		|/////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции