
&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Внешние обработки"
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	КонецЕсли;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	Если  НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.СборкаТоваров;
		Объект.ТипОперации =  перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих;
	КонецЕсли;
	
	ЗаполнитьПолеКомплект();
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
		
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"

	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//++
	ЧислоЧас = 0;
	ЧислоМин = 0;
	//ОбновитьДанныеКолонкиПроизводительность(Объект.вт_Товары, ЧислоЧас, ЧислоМин);
	ЭтаФорма.Элементы.ТаблицаКомплектацииПроизводительность.ТекстПодвала = ПодсчетПроизводительности(ЧислоЧас,ЧислоМин);
	//--     

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
//	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
		
	//++
	//ОбновитьДанныеКолонкиПроизводительность(Объект.вт_Товары, 0, 0);
	//--
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

//	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	
	//++
	//В связи с введением нового режима работы документа "Сборка" мы блокируем изменения предыдущих документов, когда заполнялся только один реквизит номенклатура 
	Если НЕ Объект.Ссылка.Пустая() И Объект.Проведен И ЗначениеЗаполнено(Объект.Номенклатура) И ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда
		Элементы.Комплект.Видимость=Истина;
		Элементы.ГруппаКомплектации.Видимость=Ложь;
		//ЭтаФорма.ТолькоПросмотр=Истина;
	Иначе
		Элементы.Комплект.Видимость=Ложь;
		Элементы.ГруппаКомплектации.Видимость=Истина;
		Элементы.Товары1ВидЗапасов.Видимость=Истина;
	КонецЕсли;		
	//--	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	//МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Перем ВыполняемаяОперация;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда

		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборТоваровИзЗаказа") Тогда

			ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресВХранилище);

		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда

		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;	

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	Если ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
		ПерезаполнитьПараметрыПолитикиИОбновитьСтатусыУказанияСерий();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	//СкладПриИзмененииСервер();
	//НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	

КонецПроцедуры

&НаКлиенте
Процедура ТипОперацииПриИзменении(Элемент)

	ТипОперацииПриИзмененииСервер();
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	

КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)

	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, Истина);
	
	ЗначениеВозврата = Неопределено;

	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("СтатусУказанияСерийНажатиеЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	//
	//Если ЗначениеВозврата <> Неопределено Тогда
	//	ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Истина);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",               Объект.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",            Объект.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу", Объект.ВариантКомплектации);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));

	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",               Объект.Номенклатура);
	СтруктураСтроки.Вставить("Характеристика",             Объект.Характеристика);
	СтруктураСтроки.Вставить("ВариантКомплектации",        Объект.ВариантКомплектации);
	СтруктураСтроки.Вставить("Упаковка",                   Объект.Упаковка);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
	СтруктураСтроки.Вставить("Количество",                 Объект.Количество);
	СтруктураСтроки.Вставить("КоличествоУпаковок",         Объект.КоличествоУпаковок);
	СтруктураСтроки.Вставить("ВедетсяУчетПоГТД",           ВедетсяУчетПоГТД);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ( СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки);
	ХарактеристикиИспользуются = СтруктураСтроки.ХарактеристикиИспользуются;
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	ВедетсяУчетПоГТД = СтруктураСтроки.ВедетсяУчетПоГТД;
	Элементы.НомерГТД.Доступность = ВедетсяУчетПоГТД;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу", Объект.ВариантКомплектации);

	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",               Объект.Номенклатура);
	СтруктураСтроки.Вставить("Характеристика",             Объект.Характеристика);
	СтруктураСтроки.Вставить("ВариантКомплектации",        Объект.ВариантКомплектации);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", Истина);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки, "ВариантКомплектации");
 	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура НомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.ТЧ) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, Ложь);
			
			ЗначениеВозврата = Неопределено;

			
			ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	//Если ЗначениеВозврата <> Неопределено Тогда
	//	ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Ложь);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//++
	ТекущаяСтрока.Комплект = НоменклатураЯвляетсяКомплектом(ТекущаяСтрока.Номенклатура);
//--	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ПриИзмененииУпаковки(Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	ПроверитьВозможностьРучногоДобавления(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	//++
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КлючСвязиСтроки) ТОгда
		ТекущиеДанные.КлючСвязиСтроки = Элементы.Товары.ОтборСтрок.КлючСвязиСтроки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.вт_ГотоваяПродукция) Тогда
		ТекущиеДанные.вт_ГотоваяПродукция = Элементы.ТаблицаКомплектации.ТекущиеДанные.Номенклатура;
	КонецЕсли;
	//--
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)

	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

//&НаКлиенте
//Процедура ОткрытьВидыЗапасов(Команда)
//	
//	Перем АдресТоваровВХранилище;
//	Перем АдресВидовЗапасовВХранилище;
//	
//	ПоместитьТоварыИВидыЗапасовВХранилище(
//		АдресТоваровВХранилище,
//		АдресВидовЗапасовВХранилище
//	);
//	ПараметрыФормы = Новый Структура("
//		|АдресТоваровВХранилище,
//		|АдресВидовЗапасовВХранилище,
//		|Организация,
//		|Склад,
//		|РедактироватьВидыЗапасов,
//		|ДокументМодифицирован,
//		|ВидыЗапасовУказаныВручную
//		|",
//		АдресТоваровВХранилище,
//		АдресВидовЗапасовВХранилище,
//		Объект.Организация,
//		Объект.Склад,
//		(Не ЭтаФорма.ТолькоПросмотр), // РедактироватьВидыЗапасов
//		ЭтаФорма.Модифицированность,
//		Объект.ВидыЗапасовУказаныВручную
//		);
//	ОткрытьФорму(
//		"Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов",
//		ПараметрыФормы, 
//		ЭтаФорма
//	);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)

	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда

		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Склад"" не заполнено'"), Объект.Ссылка, "Объект.Склад");
		Возврат;

	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыИзЗаказа(Команда)

	ОткрытьПодборТоваровПоЗаказу();

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуКомплектацииВыполнить(Команда)
	
	ОчиститьСообщения();
	ИмяТЧПодбораШК = "вт_Товары"; 
	ДопПараметры = Новый Структура("ИмяТЧ", ИмяТЧПодбораШК);
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,ДопПараметры);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, ДополнительныеПараметры.ИмяТЧ);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ОчиститьСообщения();
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.СборкаТоваров.ФормаДокумента.Команда.ЗагрузитьДанныеИзТСД");
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьКомплектующими(Команда)

	Если Не ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда

		ОчиститьСообщения();

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано поле ""Комплектация""'"),,
				"ВариантКомплектации",
				"Объект");

		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоВариантуКомплектации();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Не ЗначениеЗаполнено(Объект.ЗаказНаСборку));
	ВозвращаемыеПараметры = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозвращаемыеПараметры = Результат;
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)

	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		Если Не НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ТоварВШапке)
	
	Если ТоварВШапке Тогда
		Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий.Шапка, ТекущиеДанныеИдентификатор, ЭтаФорма);
	Иначе
		Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий.ТЧ, ТекущиеДанныеИдентификатор, ЭтаФорма);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Текст = "";
	ТекущиеДанные = Неопределено;
	
	ТекущиеПараметрыУказанияСерий = ПараметрыУказанияСерий.ТЧ;
	СерияРедактируетсяВШапке      = Ложь;
	ТоварВШапке = ЛОЖЬ;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ТекущиеПараметрыУказанияСерий,Текст)Тогда
		Если ТоварВШапке Тогда                            
			ТекущиеДанныеИдентификатор = Неопределено;
		ИначеЕсли ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ТоварВШапке);
		
		ЗначениеВозврата = Неопределено;
		
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий, ТоварВШапке", ПараметрыФормыУказанияСерий, ТоварВШапке)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

	//Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.ТЧ) Тогда
	//	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	//	ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, Ложь);
	//	
	//	ЗначениеВозврата = Неопределено;

	//	
	//	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("УказатьСерииЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	//Если ЗначениеВозврата <> Неопределено Тогда
	//	ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Ложь);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВШапке(Команда)

	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.Шапка) Тогда
		ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(Неопределено, Истина);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("УказатьСерииВШапкеЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВШапкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	//Если ЗначениеВозврата <> Неопределено Тогда
	//	ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Истина);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТД(Команда)
	
	ФинансыКлиент.ЗаполнитьНомераГТДвТабличнойЧасти(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДвВыделенныхСтроках(Команда)
	
	ФинансыКлиент.ЗаполнитьНомераГТДвТабличнойЧасти(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//При изменении реквизитов

&НаСервере
Процедура ТипОперацииПриИзмененииСервер()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СборкаТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	УстановитьВидимостьЭлементовСерий();
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковки(ТекущаяСтрока)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	ПерезаполнитьПараметрыПолитикиИОбновитьСтатусыУказанияСерий();
	
	Объект.СборкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Дата);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Подборы и обработка проверки количества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресВХранилище)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);

	СтруктураПоиска = Новый Структура("КодСтроки, Номенклатура, Характеристика");
	Для Каждого ЭлементДанных Из СтруктураДанных.Товары Цикл

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
		СтрокиТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧТовары.Количество() = 0 Тогда

			СтрокаТЧ = Объект.Товары.Добавить();

		ИначеЕсли СтрокиТЧТовары.Количество() = 1 Тогда

			СтрокаТЧ = СтрокиТЧТовары[0];

		ИначеЕсли СтрокиТЧТовары.Количество() > 1 Тогда

			Для Каждого СтрокаТоваров Из СтрокиТЧТовары Цикл
				Объект.Товары.Удалить(СтрокаТоваров);
			КонецЦикла;

			СтрокаТЧ = Объект.Товары.Добавить();

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементДанных);

	КонецЦикла;

	// Обновление признака использования характеристик.
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	НоменклатураСервер.ЗаполнитьСерииПоЗаказам(Объект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваровПоЗаказу()

	Если Не ЗначениеЗаполнено(Объект.ЗаказНаСборку) Тогда
		Возврат;
	КонецЕсли;

	МассивКодовСтрок = Новый Массив;

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		МассивКодовСтрок.Добавить(СтрокаТЧ.КодСтроки);
	КонецЦикла;
	
	ОткрытьФорму("Документ.СборкаТоваров.Форма.ФормаПодбораТоваровИзЗаказа",
					Новый Структура("Заказ, Накладная, МассивКодовСтрок",
								Объект.ЗаказНаСборку, Объект.Ссылка, МассивКодовСтрок),
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Штрихкоды и торговое оборудование

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)

	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	МаксНомер = Объект.вт_Товары.Количество()+1;
	
	//Если добавили новые строки, то им нужно присвоить код строки
	Для каждого строкаТЧ из Объект.вт_Товары Цикл
		Если ЗначениеЗаполнено(строкаТЧ.КодСтроки) тогда
			Продолжить;
		КонецЕсли;	
		строкаТЧ.КодСтроки = МаксНомер;
		МаксНомер = МаксНомер + 1;
	КонецЦикла;
	
	//Если шк подбирали в комплектующие
	Если ИмяТЧПодбораШК="Товары" и ЗначениеЗаполнено(ТекущаяГотоваяПродукция) И ТекущийКодСтрокиТовары>0  Тогда
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("КлючСвязиСтроки",0));
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			СтрокаМассива.вт_ГотоваяПродукция = ТекущаяГотоваяПродукция;
			СтрокаМассива.КлючСвязиСтроки     = ТекущийКодСтрокиТовары;   
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТЧ="")
	
	ИзменятьКоличество = Не ЗначениеЗаполнено(Объект.ЗаказНаСборку);
	
	Модифицированность = Истина;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий.ТЧ;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ИмяТЧ									 = ?(ЗначениеЗаполнено(ИмяТЧ),ИмяТЧ, ?(ЗначениеЗаполнено(ИмяТЧПодбораШК),ИмяТЧПодбораШК,"вт_Товары") );
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда

		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		
	КонецЕсли;

КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
//Серии

&НаСервере
Функция ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ТоварВШапке)
	
	Если ТоварВШапке Тогда
		Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий.Шапка, ТекущиеДанныеИдентификатор, ЭтаФорма);
	Иначе
		Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий.ТЧ, ТекущиеДанныеИдентификатор, ЭтаФорма);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения)

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, 
				ПараметрыУказанияСерий.Шапка, КэшированныеЗначения);

КонецПроцедуры

//&НаСервере
//Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ТоварВШапке)
//	СтруктураДействий = Новый Структура;
//	
//	Если Не ТоварВШапке
//		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
//		
//		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
//		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
//	КонецЕсли;

//	Если ТоварВШапке Тогда
//		НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий.Шапка,ПараметрыФормыУказанияСерий,СтруктураДействий);
//	Иначе
//		НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий.ТЧ,ПараметрыФормыУказанияСерий,СтруктураДействий);
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()

	Элементы.ТоварыСтатусУказанияСерий.Видимость   = ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры;
	//Элементы.ТоварыУказатьСерии.Видимость          = ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры;
	
	Элементы.УказатьСерииВШапке.Видимость          = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;
	Элементы.СтатусУказанияСерий.Видимость         = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;

	Элементы.ТоварыЗаполнитьСерииПоFEFO.Видимость  = ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры; 

КонецПроцедуры

//&НаСервере
//Процедура УстановитьДоступностьКомандыЗаполнитьПоFEFO()

//	Элементы.ТоварыЗаполнитьСерииПоFEFO.Доступность = Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих
//													И (ПараметрыУказанияСерий.ТЧ.ПланированиеОтгрузки
//													Или ПараметрыУказанияСерий.ТЧ.ПланированиеОтбора); 
//КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПараметрыПолитикиИОбновитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.вт_КомплектацияРазукомплектация));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);		
	УстановитьВидимостьЭлементовСерий();
	//УстановитьДоступностьКомандыЗаполнитьПоFEFO();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, Ложь);
	
	ЗначениеВозврата = Неопределено;

	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьФормуУказанияСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУказанияСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	//Если ЗначениеВозврата <> Неопределено Тогда
	//	ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Ложь);
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()

	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.Товары) Тогда

		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий.ТЧ);	
		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.Товары);

КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий.ТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Прочее

&НаСервере
Процедура ЗаполнитьТоварыПоВариантуКомплектации()

	Если Не ЗначениеЗаполнено(Объект.ЗаказНаСборку) Тогда

		ОбновитьПризнакИспользованияХарактеристик = Истина;
		Объект.Товары.Загрузить(Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(
								Объект.ВариантКомплектации, , Объект.Количество));
	Иначе
		// Строки добавляться не будут. Только обновление количества.
		ОбновитьПризнакИспользованияХарактеристик = Ложь;

		ТаблицаКомплектцющих = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(
								Объект.ВариантКомплектации, , Объект.Количество);
		ТаблицаКомплектцющих.Индексы.Добавить("Номенклатура, Характеристика, Упаковка");

		// Обновим количество в существующих строках.
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Упаковка");
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл

			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
			СтрокиКомплектующих = ТаблицаКомплектцющих.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКомплектующих.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТЧ.Количество         = СтрокиКомплектующих[0].Количество;
			СтрокаТЧ.КоличествоУпаковок = СтрокиКомплектующих[0].КоличествоУпаковок;

			ТаблицаКомплектцющих.Удалить(СтрокиКомплектующих[0]);
		КонецЦикла;

	КонецЕсли;

	Если ОбновитьПризнакИспользованияХарактеристик Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
			)
		);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьРучногоДобавления(Отказ)

	Отказ = ЗначениеЗаполнено(Объект.ЗаказНаСборку);

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", ЗначениеЗаполнено(Объект.ЗаказНаСборку));

	Оповестить("Запись_СборкаТоваров", ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()

	ЭтоСборка = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров);
	ЭтоРазборка = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров);
	
	Если ЭтоСборка Тогда
		ВедетсяУчетПоГТД = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(Объект.Номенклатура).ВестиУчетПоГТД;
	Иначе
		ВедетсяУчетПоГТД = Ложь;
	КонецЕсли;
	
	Элементы.НомерГТД.Видимость = ЭтоСборка;
	Элементы.НомерГТД.Доступность = ВедетсяУчетПоГТД;
	Элементы.НомерГТДСтранаПроисхождения.Видимость = ЭтоСборка;
	Элементы.НомерГТД.АвтоОтметкаНезаполненного = ВедетсяУчетПоГТД И ЗапретитьПоступлениеТоваровБезНомеровГТД;
	
	Элементы.ТоварыНомерГТД.Видимость = ЭтоРазборка;
	Элементы.ТоварыНомерГТДСтранаПроисхождения.Видимость = ЭтоРазборка;
	Элементы.ТоварыЗаполнитьНомераГТД.Видимость = ЭтоРазборка;
	Элементы.ТоварыЗаполнитьНомераГТДвВыделенныхСтроках.Видимость = ЭтоРазборка;

	// Назначение
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Элементы.Назначение.Видимость = Истина;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		Элементы.Назначение.Видимость = Ложь;
	КонецЕсли;
	Элементы.Назначение.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаСборку);

КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьЭлементовФормыПоЗаказу()

	ЕстьЗаказ = ЗначениеЗаполнено(Объект.ЗаказНаСборку);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ПодобратьТовары", "Видимость", Не ЕстьЗаказ);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ТоварыПодобратьТоварыИзЗаказа", "Видимость", ЕстьЗаказ);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ТоварыЗагрузитьДанныеИзТСД", "Видимость", Не ЕстьЗаказ);

	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//			"ТоварыПоискПоШтрихкоду", "Видимость", Не ЕстьЗаказ);

	Если ЕстьЗаказ Тогда

		МассивЭлементов = Новый Массив;

		МассивЭлементов.Добавить("ТоварыДобавить");
		МассивЭлементов.Добавить("ТоварыСкопировать");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");

		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
				МассивЭлементов, "Доступность", Ложь);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СборкаТоваров));
	
	УстановитьВидимостьЭлементовСерий();
	
	УправлениеЭлементамиФормы();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура);

	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	//МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	МетаданныеФормы = Документы.вт_КомплектацияРазукомплектация.ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	МетаданныеФормы.ВТЧНазначениеОтгрузки = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	УстановитьДоступностьЭлементовФормыПоЗаказу();
	
КонецПроцедуры



//&НаСервере
//Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
//	
//	Если Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаТоваров Тогда 
//		ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
//			Объект.Товары,
//			Объект.ВидыЗапасов,
//			УникальныйИдентификатор,
//			АдресТоваровВХранилище,
//			АдресВидовЗапасовВХранилище
//		);
//	Иначе
//		ТаблицаТоваров = Новый ТаблицаЗначений;
//		ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
//		ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
//		ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
//		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
//		
//		НоваяСтрока = ТаблицаТоваров.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
//		НоваяСтрока.НомерСтроки = 1;
//		
//		АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(
//			ТаблицаТоваров,
//			УникальныйИдентификатор
//		);
//		АдресВидовЗапасовВХранилище = ПоместитьВоВременноеХранилище(
//			Объект.ВидыЗапасов.Выгрузить(,"Номенклатура, Характеристика, ВидЗапасов, НомерГТД, Количество"),
//			УникальныйИдентификатор
//		);
//	КонецЕсли;
//		
//КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		                                                                                                             
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина );//НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой() И НЕ ЗначениеЗаполнено(Объект.ЗаказНаСборку));
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ЗначениеЗаполнено(Объект.ЗаказНаСборку));
	
КонецПроцедуры


&НаКлиенте
Процедура Таблица1НоменклатураПриИзменении(Элемент)
	текДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	втВариантПоУмолчанию = вт_ПолучитьВариантКомплектацииПоУмолчанию(текДанные.Номенклатура);
	текДанные.КоличествоУпаковок = 1;
	текДанные.ВариантКомплектации = втВариантПоУмолчанию;	
	Если текДанные.КодСтроки = 0 Тогда
		текДанные.КодСтроки = 1;
	КонецЕсли;	
	вт_ЗаполнитьКомплектациюСервер(текДанные.КодСтроки, втВариантПоУмолчанию, текДанные.КоличествоУпаковок, Истина);
	вт_УстановитьОтборТаблицаТоварыКлиентПоКомплекту();
	вт_ОбработкаИзмененияКоличестваКомплектовКлиент(ТекДанные);
	
	РасчетПоляПроизводительность();	
КонецПроцедуры


&НаСервере
Функция вт_ПолучитьВариантКомплектацииПоУмолчанию(пНоменклатура) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.Владелец = &Владелец
	|	И ВариантыКомплектацииНоменклатуры.Основной = ИСТИНА");
	
	Запрос.УстановитьПараметр("Владелец",пНоменклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если   Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка();
	
КонецФункции



//для указанной комплектации заполним состав в табличной части товары
&НаСервере
Процедура вт_ЗаполнитьКомплектациюСервер(КодСтроки, втВариантКомплектации, пКоличество, СначалаОчищать) Экспорт
	Отбор = Новый Структура("КлючСвязиСтроки", КодСтроки);
	НайденыСтрокиКомплектации = Объект.Товары.НайтиСтроки(Отбор);
	НайденоСтрок = НайденыСтрокиКомплектации.Количество();
	Если  СначалаОчищать Тогда
		Для Каждого СтрокаУдаления из НайденыСтрокиКомплектации Цикл
		            Объект.Товары.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаКомплектующих = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(
	втВариантКомплектации, , пКоличество);
	ТаблицаКомплектующих.Индексы.Добавить("Номенклатура, Характеристика, Упаковка");
	ТаблицаКомплектующих.Колонки.Добавить("КлючСвязиСтроки");
	ТаблицаКомплектующих.ЗАполнитьЗначения(КодСтроки,"КлючСвязиСтроки");
	
	// Обновим количество в существующих строках.
	СтруктураПоиска = Новый Структура("КлючСвязиСтроки, Номенклатура, Характеристика, Упаковка");
	Для Каждого СтрокаКомпл Из ТаблицаКомплектующих Цикл
		Если СначалаОчищать Тогда
			//Сначала создадим новую строку
			 НоваяСтрока = Объект.Товары.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомпл);
			 НоваяСтрока.вт_ГотоваяПродукция = втВариантКомплектации.Владелец;
			 НоваяСтрока.Комплект = ЗначениеЗаполнено(Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоНаименованию("", Ложь, , СтрокаКомпл.Номенклатура));	
			 
			 СтруктураДействий = Новый Структура;
			 СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрока.Характеристика);
			 СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , НоваяСтрока.Упаковка);
			 СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			 КэшированныеЗначения = Неопределено;
			 ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			 
			 
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКомпл);

		//Теперь можно сделать поиск
		СтрокиКомплектующих = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКомплектующих.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиКомплектующих[0].Количество         = СтрокаКомпл.Количество;
		СтрокиКомплектующих[0].КоличествоУпаковок = СтрокаКомпл.КоличествоУпаковок;
	КонецЦикла;
	

КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаКомплектацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	//МаксКодСтроки = 0;
	//Для каждого Строка_вт_Товары Из Объект.вт_Товары Цикл
	//	Если Строка_вт_Товары.КодСтроки > МаксКодСтроки Тогда 
	//		МаксКодСтроки = Строка_вт_Товары.КодСтроки;
	//	КонецЕсли;
	//КонецЦикла;	
	//Элементы.ТаблицаКомплектации.ТекущиеДанные.КодСтроки = МаксКодСтроки + 1;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаКомплектацииПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииПриАктивизацииСтроки(Элемент)
	 вт_УстановитьОтборТаблицаТоварыКлиентПоКомплекту();
КонецПроцедуры

&НаКлиенте
Процедура вт_УстановитьОтборТаблицаТоварыКлиентПоКомплекту()
	ТекДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		     возврат;
		 КонецЕсли;	
		 
	Отбор  = Новый Структура;
	Отбор.Вставить("КлючСвязиСтроки",текДанные.КодСтроки);
//	Отбор.Вставить("вт_ГотоваяПродукция",текДанные.Номенклатура);
	Элементы.Товары.ОтборСтрок =  новый ФиксированнаяСтруктура(Отбор);
	
	ТекущаяГотоваяПродукция = текДанные.Номенклатура;
	ТекущийКодСтрокиТовары 	= текДанные.КодСтроки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаКомплектацииПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		     возврат;
	КонецЕсли;	
	пКодСтроки = ТекДанные.КодСтроки;
	вт_УдалитьКомплектующиеСервер(пКодСтроки);
	ТоварыПослеУдаления(Элементы.Товары);
	
КонецПроцедуры
	
&НаСервере
Процедура вт_УдалитьКомплектующиеСервер(пКодСтроки)
	отбор = новый Структура("КлючСвязиСтроки", пКодСтроки);
	СтрокиУдаления = Объект.Товары.НайтиСтроки(Отбор);
	Для Каждого СтрокаУдаления из СтрокиУдаления Цикл
		Объект.Товары.Удалить(СтрокаУдаления);
	КонецЦикла;	
	
КонецПроцедуры	


&НаКлиенте
Процедура Таблица1КоличествоУпаковокПриИзменении(Элемент)
	ПоказатьВопрос(Новый ОписаниеОповещения("Таблица1КоличествоУпаковокПриИзмененииЗавершение", ЭтотОбъект), "Пересчитать комплектующие ?", РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1КоличествоУпаковокПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		возврат;
	КонецЕсли;	
	вт_ОбработкаИзмененияКоличестваКомплектовКлиент(ТекДанные);
	//++
	РасчетПоляПроизводительность();
	//--

КонецПроцедуры

&НаКлиенте
Процедура вт_ОбработкаИзмененияКоличестваКомплектовКлиент(ТекДанные)  Экспорт
	ТекДанные.Количество = ТекДанные.КоличествоУпаковок;
		 
	пКодСтроки = ТекДанные.КодСтроки;
	вт_ЗаполнитьКомплектациюСервер(пКодСтроки, ТекДанные.ВариантКомплектации, ТекДанные.КоличествоУпаковок, Ложь);	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаКомплектацииПолеВариантКомплектацииПриИзменении(Элемент)
 	ТекДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		     возврат;
	КонецЕсли;	
	пКодСтроки = ТекДанные.КодСтроки;
	вт_ЗаполнитьКомплектациюСервер(пКодСтроки, ТекДанные.ВариантКомплектации, ТекДанные.КоличествоУпаковок, Истина);	
	
	
	Элементы.Товары.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаКомплектацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		     возврат;
	КонецЕсли;	
	Если НоваяСтрока ИЛИ Копирование ТОгда //  НЕ ЗначениеЗаполнено(ТекДанные.КодСтроки) Тогда
		максКод=0;
		Для Каждого СтрокаТовары из Объект.вт_Товары Цикл 
			Если СтрокаТовары.КодСтроки > максКод Тогда
				 максКод = СтрокаТовары.КодСтроки;
			КонецЕсли;	
		КонецЦикла;
		ТекДанные.КодСтроки = максКод+1;//Объект.вт_Товары.Количество()+1;
	КонецЕсли;

	вт_УстановитьОтборТаблицаТоварыКлиентПоКомплекту();
КонецПроцедуры


// ВсегоЧасов и ВсегоМинут - тип "Число"
//&НаСервереБезконтекста
//Процедура ОбновитьДанныеКолонкиПроизводительность(таблТовары, ВсегоЧасов, ВсегоМинут)
//	Для каждого СтрокаПроизводительность из таблТовары Цикл //Объект.вт_Товары Цикл
//		вт_производительность = СтрокаПроизводительность.Номенклатура.вт_НормаСборкиВЧас;//ЗначениеРеквизита(СтрокаПроизводительность.Номенклатура,"вт_НормаСборкиВЧас");
//		Если вт_производительность<>0 Тогда
//			пПроизв = СтрокаПроизводительность.КоличествоУпаковок / вт_производительность; 
//			пРазница = пПроизв - Цел(пПроизв);
//			пМин = пРазница * 60;
//			СтрокаПроизводительность.Производительность =  Строка(Цел(пПроизв))+"ч."+Формат(пМин,"ЧЦ=2; ЧВН=")+"мин";
//			//+++
//			ВсегоЧасов = ВсегоЧасов + Цел(пПроизв);
//			итМин = Формат(пМин, "ЧЦ=2; ЧВН=");
//			ВсегоМинут = ВсегоМинут + ?(итМин = "", 00,Число(итМин));
//			//---
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры



&НаКлиенте 
Процедура РасчетПоляПроизводительность()
	ТекСтрока = Элементы.ТаблицаКомплектации.ТекущиеДанные;
	
	вт_производительность = ЗначениеДопРеквизита(ТекСтрока.Номенклатура,"вт_НормаСборкиВЧас",0);// ЗначениеРеквизита(ТекСтрока.Номенклатура,"вт_НормаСборкиВЧас");
	Если вт_производительность<>0 Тогда
		
		пПроизв =  ТекСтрока.КоличествоУпаковок / вт_производительность;
		пРазница = пПроизв - Цел(пПроизв);
		пМин = пРазница * 60;
		ТекСтрока.вт_Производительность =  Строка(Цел(пПроизв))+"ч."+Формат(пМин,"ЧЦ=2; ЧВН=")+"мин";
		ТекСтрока.Производительность = Дата(1,1,1) + (пПроизв*60+пМин)*60;	 ;
		ПодсчетПроизводительностьПриИзменении(); 
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ЗначениеРеквизита(Объект,ИмяРеквизита);
 	Возврат Объект[ИмяРеквизита];
КонецФункции


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Удалим строки, которые плохо заполнены и могут вызвать проблемы при сохранении
	СтрокиДляУдаления = Новый Массив;
	ОтборТоваров = Новый Структура("КодСтроки");
	Для каждого СтрокаКомплектующая из ТекущийОбъект.Товары Цикл
		ОтборТоваров.КодСтроки = СтрокаКомплектующая.КлючСвязиСтроки;
		НайденоСтрок = ТекущийОбъект.вт_Товары.НайтиСтроки(ОтборТоваров);
		Если НайденоСтрок.Количество()=0  ИЛИ Не ЗначениеЗаполнено(СтрокаКомплектующая.Номенклатура) ИЛИ СтрокаКомплектующая.КоличествоУпаковок=0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаКомплектующая);
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого СтрокаСырье из СтрокиДляУдаления Цикл
		ТекущийОбъект.Товары.Удалить(СтрокаСырье);
	КонецЦикла;

КонецПроцедуры

//++
#Область __Подсчет_Всей_Производительности__

&НаСервере
Процедура ПодсчетПроизводительностьПриИзменении()
	
	ЧислоЧас = 0; 
	ЧислоМин = 0;
	//ОбновитьДанныеКолонкиПроизводительность(Объект.вт_Товары, ЧислоЧас, ЧислоМин);
	ЭтаФорма.Элементы.ТаблицаКомплектацииПроизводительность.ТекстПодвала = ПодсчетПроизводительности(ЧислоЧас,ЧислоМин);

КонецПроцедуры

Функция ПодсчетПроизводительности(ЧислоЧас,ЧислоМин)
	
// простой вывод итогов
	//СтрокаЧас = ?(ЧислоЧас=0, "00", Строка(ЧислоЧас));
	//СтрокаМин = ?(ЧислоМин=0, "00", Строка(ЧислоМин));
	//СтрокаВывода = СтрокаЧас + "ч." + СтрокаМин + "мин";
	
// С учетом дней в Подвале колонки, но без учета месяца
#Область __С_учетом_количество_дней__	
	чмЧас = ЧислоМин / 60;
	//Если чмЧас > 24 Тогда
		//чмДень 	= чмЧас / 24;
		//чмМин 	= (чмЧас - Цел(чмЧас)) * 60;
		//чмЧас 	= (чмДень - Цел(чмДень)) * 24;
	//Иначе
		Если чмЧас > 0 Тогда		
		чмМин 	= (чмЧас - Цел(чмЧас)) * 60;
		чмЧас 	= Цел(чмЧас);
		//чмДень 	= 0;
	Иначе
		чмМин 	= ЧислоМин;
		чмЧас 	= 0;
		//чмДень 	= 0;		
	КонецЕсли;
	
	//ччДень = ЧислоЧас / 24;
	//Если ччДень > 24 Тогда
	//	ччЧас = (ччДень - Цел(ччДень)) * 24;
	//	ччДень = Цел(ччДень);
	//Иначе
	//	ччЧас = ЧислоЧас;
	//	ччДень = 0;
	//КонецЕсли;
		
	ВсегоЧас = ЧислоЧас + чмЧас;
	//Если ВсегоЧас > 24 Тогда
	//	вчДень = ВсегоЧас / 24;
	//	вчЧас = вчДень - Цел(вчДень);
	//Иначе
	//	вчДень= 0;
	//	вчЧас = ВсегоЧас;
	//КонецЕсли;
	
	//ВсегоДней = вчДень + ччДень + чмДень;
		
	ИтогМин = ?(Формат(чмМин,"ЧЦ=2; ЧВН=") = "", "00", Формат(чмМин,"ЧЦ=2; ЧВН="));
	ИтогЧас = ?(Формат(ВсегоЧас,"ЧЦ=2; ЧВН=") = "", "00", Формат(ВсегоЧас,"ЧЦ=2; ЧВН="));
	
	//Если Цел(ВсегоДней) > 0 Тогда
	//	ИтогДней = ?(Цел(ВсегоДней) < 10, Формат(ВсегоДней,"ЧЦ=1; ЧВН="), Формат(ВсегоДней,"ЧЦ=2; ЧВН="));
	//	СтрокаВывода = ИтогДней + "дн " +ИтогЧас+"ч "+ИтогМин+"мин";
	//Иначе
		СтрокаВывода = ИтогЧас+"ч."+ИтогМин+"мин";
	//КонецЕсли;
#КонецОбласти
	
	Возврат СтрокаВывода;

КонецФункции

&НаКлиенте
Процедура ТаблицаКомплектацииПриИзменении(Элемент)
	ПодсчетПроизводительностьПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииПослеУдаления(Элемент)
	ПодсчетПроизводительностьПриИзменении();
	ЗаполнитьПолеКомплект();	
КонецПроцедуры

#КонецОбласти
//--

&НаСервере
Процедура ЗаполнитьПолеКомплект()
	КоличествоСтрокТовары = Объект.Товары.Количество();
	Если КоличествоСтрокТовары>0 Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаНоменклатуры.НомерСтроки,
			|	ТаблицаНоменклатуры.Номенклатура
			|ПОМЕСТИТЬ Вт_ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВариантыКомплектацииНоменклатуры.Владелец КАК Владелец
			|ПОМЕСТИТЬ Вт_ТаблицаКомплектов
			|ИЗ
			|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Вт_ТаблицаНоменклатуры.НомерСтроки,
			|	Вт_ТаблицаНоменклатуры.Номенклатура,
			|	НЕ Вт_ТаблицаКомплектов.Владелец ЕСТЬ NULL  КАК Комплект
			|ИЗ
			|	Вт_ТаблицаНоменклатуры КАК Вт_ТаблицаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ТаблицаКомплектов КАК Вт_ТаблицаКомплектов
			|		ПО Вт_ТаблицаНоменклатуры.Номенклатура = Вт_ТаблицаКомплектов.Владелец";
			
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура")); 		
		ТаблицаКомплектов = Запрос.Выполнить().Выгрузить();
		ИндексСтроки = 0;
		Пока ИндексСтроки<КоличествоСтрокТовары Цикл
			Объект.Товары[ИндексСтроки].Комплект = ТаблицаКомплектов[ИндексСтроки].Комплект;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция НоменклатураЯвляетсяКомплектом(пНоменклатура)
	Возврат ЗначениеЗаполнено(Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоНаименованию("", Ложь, , пНоменклатура));	
КонецФункции	

&НаКлиенте
Процедура ДобавитьВКомплектацию(Команда)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные.Комплект Тогда
		ДобавитьВКомплектациюНаСервере(ТекДанные.Номенклатура, ТекДанные.Количество);
	Иначе
		Сообщить("В комплектацию можно добавить только номенклатуру, которая является комплектом");
	КонецЕсли;
	вт_УстановитьОтборТаблицаТоварыКлиентПоКомплекту();		
	ЗаполнитьПолеКомплект();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВКомплектациюНаСервере(пНоменклатура,пКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	НовСтрокавт_Товары = ДокОбъект.вт_Товары.Добавить();
	максКод=0;
	Для Каждого СтрокаТовары из Объект.вт_Товары Цикл 
		Если СтрокаТовары.КодСтроки > максКод Тогда
			 максКод = СтрокаТовары.КодСтроки;
		КонецЕсли;	
	КонецЦикла;
	НовСтрокавт_Товары.КодСтроки = максКод+1;
	НовСтрокавт_Товары.Номенклатура = пНоменклатура;
	НовСтрокавт_Товары.КоличествоУпаковок = пКоличество;
	НовСтрокавт_Товары.Количество = пКоличество;
	НовСтрокавт_Товары.ВариантКомплектации = вт_ПолучитьВариантКомплектацииПоУмолчанию(пНоменклатура);
			
	ТаблицаКомплектующих = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(
	НовСтрокавт_Товары.ВариантКомплектации, , НовСтрокавт_Товары.КоличествоУпаковок);
	ТаблицаКомплектующих.Индексы.Добавить("Номенклатура, Характеристика, Упаковка");
	ТаблицаКомплектующих.Колонки.Добавить("КлючСвязиСтроки");
	ТаблицаКомплектующих.ЗАполнитьЗначения(НовСтрокавт_Товары.КодСтроки,"КлючСвязиСтроки");
	
	Для Каждого СтрокаКомпл Из ТаблицаКомплектующих Цикл
		 НоваяСтрока = ДокОбъект.Товары.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомпл);
		 НоваяСтрока.вт_ГотоваяПродукция = НовСтрокавт_Товары.ВариантКомплектации.Владелец;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДокОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные<>Неопределено Тогда
		Элементы.ТоварыДобавитьВКомплектацию.Доступность = НоменклатураЯвляетсяКомплектом(ТекДанные.Номенклатура);
	КонецЕсли;	
	
	ТекДанныеКомплект = Элементы.ТаблицаКомплектации.ТекущиеДанные; 
	Попытка
		Если ТекДанные.КлючСвязиСтроки = 0 Тогда
			 ТекДанные.КлючСвязиСтроки = ТекДанныеКомплект.КодСтроки;
		КонецЕсли;		 
		Если НЕ ЗначениеЗаполнено(ТекДанные.вт_ГотоваяПродукция) Тогда
			ТекДанные.вт_ГотоваяПродукция = ТекДанныеКомплект.Номенклатура;
		КонецЕсли;	
	Исключение
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	Если ИмяЭлемента="ТаблицаКомплектациивт_ФактическоеВремяСборки" ИЛИ ИмяЭлемента="ТаблицаКомплектацииПроизводительность" Тогда
		
		ТекущиеДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
		
		ИмяКлюча =  "структураФактическоеВремяСборки"; // ?(ИмяЭлемента="ТаблицаКомплектациивт_ФактическоеВремяСборки", "структураФактическоеВремяСборки", "структураРасчетноеВремяСборки");
		ЗначениеКлюча = ?(ИмяЭлемента="ТаблицаКомплектациивт_ФактическоеВремяСборки",ТекущиеДанные.ФактическоеВремяСборки, ТекущиеДанные.Производительность);
		
		структураФактическоеВремяСборки = Новый Структура(ИмяКлюча, ЗначениеКлюча);
		
		ФактическоеВремя = Неопределено;

		ДопПараметр = Новый Структура("ПланФакт", ?(ИмяЭлемента="ТаблицаКомплектациивт_ФактическоеВремяСборки", "ФактическоеВремяСборки", "РасчетноеВремяСборки"));
		
		ОткрытьФорму("Документ.вт_КомплектацияРазукомплектация.Форма.ФормаВводаФактическогоВремениСборки",структураФактическоеВремяСборки,,,,, Новый ОписаниеОповещения("ТаблицаКомплектацииВыборЗавершение", ЭтотОбъект, ДопПараметр), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);   
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФактическоеВремя = Результат;
	Если ФактическоеВремя<>Неопределено Тогда
		ТекущиеДанные = Элементы.ТаблицаКомплектации.ТекущиеДанные;
		
		Если ДополнительныеПараметры.ПланФакт = "ФактическоеВремяСборки" Тогда
			ТекущиеДанные.вт_ФактическоеВремяСборки = Строка(ФактическоеВремя.Часов)+"ч. "+Строка(ФактическоеВремя.Минут)+"мин";
			ТекущиеДанные.ФактическоеВремяСборки = Дата(1,1,1) + (ФактическоеВремя.Часов*60+ФактическоеВремя.Минут)*60;			
		Иначе
			ТекущиеДанные.вт_Производительность = Строка(ФактическоеВремя.Часов)+"ч. "+Строка(ФактическоеВремя.Минут)+"мин";
			ТекущиеДанные.Производительность = Дата(1,1,1) + (ФактическоеВремя.Часов*60+ФактическоеВремя.Минут)*60;			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

 &НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

 &НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СборкаТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	НастроитьЭлементыСерий();
КонецПроцедуры


&НаСервере
Процедура НастроитьЭлементыСерий()
	
	
	
	
КонецПроцедуры

	
&НаСервере
Функция ВыводитьСообщениеПоИспользованиюСтатусов()

	ВыводитьСообщениеПоИспользованиюСтатусов = Ложь;
	
	Если (ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры)
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров") Тогда
		
		ПолитикиУчетаСерийСклад = СкладыСервер.ИспользованиеСерийНаСкладеПоПолитикамУчета(Объект.Склад);
		ИспользоватьОрдернуюСхемуПриПриемке = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.Склад, Объект.Дата);
		ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
		
		Если ИспользоватьОрдернуюСхемуПриПриемке Тогда
			
			Если ПолитикиУчетаСерийСклад.УказыватьПриПланированииОтгрузки
				И ПолитикиУчетаСерийСклад.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
			КонецЕсли;
				
		КонецЕсли;
			
		Если Не ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
				И ПолитикиУчетаСерийСклад.УчитыватьСебестоимостьПоСериям Тогда
				
				ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
				
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ВыводитьСообщениеПоИспользованиюСтатусов;
	
КонецФункции

//++
&НаКлиенте
Процедура Печать(Команда)
    
    ТабДок = ПечатьНаСервере();  
    
    ТабДок.ПолеСлева 			   = 5;
	ТабДок.ПолеСправа 			   = 5;
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу  = 0;
	ТабДок.АвтоМасштаб 		   	   = Истина;
    ТабДок.ОтображатьСетку 	   	   = Ложь;
    ТабДок.ОтображатьЗаголовки     = Ложь;
	ТабДок.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;    
    
    ТабДок.Показать("Комплектация товаров", "КомплектацияТоваров.xls");
    
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	Возврат Документы.вт_КомплектацияРазукомплектация.ПечатьСборкаТоваров_new(Объект.Ссылка);	
КонецФункции	


&НаСервере
Процедура ПередЗакрытиемНаСервере()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаТоваров.Ссылка
			|ИЗ
			|	Документ.СборкаТоваров КАК СборкаТоваров
			|ГДЕ
			|	СборкаТоваров.ПометкаУдаления
			|	И СборкаТоваров.Комментарий ПОДОБНО &Комментарий";		
		Запрос.УстановитьПараметр("Комментарий", Строка(Объект.Ссылка)); 		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
					обСборка = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Попытка
						обСборка.Удалить();
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//	ПередЗакрытиемНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеДопРеквизита(СсылкаНаОбъект, ЗаголовокРеквизита, ЗначениеПоУмолчанию=Неопределено)
	 Запрос  = Новый Запрос("ВЫБРАТЬ
	                        |	НоменклатураДополнительныеРеквизиты.Значение
	                        |ИЗ
	                        |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	                        |ГДЕ
	                        |	НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
	                        |	И НоменклатураДополнительныеРеквизиты.Свойство.Заголовок = &Заголовок");
	 
	 Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	 Запрос.УстановитьПараметр("Заголовок",ЗаголовокРеквизита);
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() ТОгда
		 Возврат Выборка.Значение;
	 Иначе
		 Возврат ЗначениеПоУмолчанию;
	 КонецЕсли;	 
	
 КонецФункции	
 
 
 &НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	ИмяТЧПодбораШК = "Товары"; 
	ДопПараметры = Новый Структура("ИмяТЧ", ИмяТЧПодбораШК);
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,ДопПараметры);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

