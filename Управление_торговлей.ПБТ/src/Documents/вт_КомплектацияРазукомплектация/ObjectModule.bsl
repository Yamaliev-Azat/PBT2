#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура формирования движений по регистру "Партии товаров организаций(последовательность)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПартииТоваровОрганизацийПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ) Экспорт
	
	ТаблицаПартий = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТоваровОрганизацийПоследовательность;	
	ПоследовательностьПартий = ПринадлежностьПоследовательностям.ПартииТоваровОрганизаций;
	ПоследовательностьПартий.Очистить();
	
	Если Отказ ИЛИ ТаблицаПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоследовательностьПартий.Отбор.Регистратор.Установить(ДополнительныеСвойства.ДляПроведения.Ссылка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПартий Цикл
		НоваяЗапись = ПоследовательностьПартий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры


// Функция формирует строку наименования ключа аналитики учета партий.
//
// Параметры:
//	СправочникОбъект - Ключ аналитики учета партий, для которой необходимо определить наименовние
//
// Возвращаемое значение:
//	Строка - Наименование ключа аналитики учета номенклатуры
//
Функция ПолучитьНаименованиеКлючаАналитикиУчетаПартий(СправочникОбъект) Экспорт
	
	Наименование = "";
		
	Если ЗначениеЗаполнено(СправочникОбъект.ГруппаФинансовогоУчета) Тогда
		Наименование = Наименование
			+ "Группа: " + СправочникОбъект.ГруппаФинансовогоУчета+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Поставщик) Тогда
		Наименование = Наименование
			+ "Поставщик: " + СправочникОбъект.Поставщик+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Контрагент) Тогда
		Наименование = Наименование
			+ "Контрагент: " + СправочникОбъект.Контрагент+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.НалогообложениеНДС) Тогда
		Наименование = Наименование
			+ "Налогообложение НДС: " + СправочникОбъект.НалогообложениеНДС+"; ";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СправочникОбъект.СтавкаНДС) Тогда
		Наименование = Наименование
			+ "Ставка НДС: " + СправочникОбъект.СтавкаНДС;
	КонецЕсли;  	
   		
	Если Прав(СокрЛП(СправочникОбъект.Наименование), 1) =  ";" Тогда
		Наименование = Сред(СокрЛП(Наименование), 1, СтрДлина(СокрЛП(Наименование)) - 1);
	КонецЕсли;
			
	Возврат Наименование;

КонецФункции

Функция НайтиАналитикуУчетаПартий (СтруктураАналитикУчетаПартий)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ключ.НалогообложениеНДС 	КАК НалогообложениеНДС,
	|	Ключ.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Ключ.Поставщик 				КАК Поставщик,
	|	Ключ.Контрагент				КАК Контрагент,
	|	Ключ.Наименование 			КАК Наименование,
	|	Ключ.Ссылка 				КАК Ссылка,
	|	Ключ.СтавкаНДС 				КАК СтавкаНДС
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПартий 			КАК Ключ
	|ГДЕ
	|	Ключ.НалогообложениеНДС 	  	= &НалогообложениеНДС
	|	И Ключ.Поставщик 			  	= &Поставщик
	|	И Ключ.Поставщик 			  	= &Поставщик
	|	И Ключ.Контрагент 			  	= &Контрагент
	|	И Ключ.СтавкаНДС 			  	= &СтавкаНДС
	|	И Ключ.ГруппаФинансовогоУчета 	= &ГруппаФинансовогоУчета
	|	И НЕ Ключ.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("НалогообложениеНДС"		, СтруктураАналитикУчетаПартий.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Поставщик"				, СтруктураАналитикУчетаПартий.Поставщик);
	Запрос.УстановитьПараметр("Контрагент"				, СтруктураАналитикУчетаПартий.Контрагент);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета"	, СтруктураАналитикУчетаПартий.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("СтавкаНДС"				, СтруктураАналитикУчетаПартий.СтавкаНДС);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		Результат = Справочники.КлючиАналитикиУчетаПартий.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция СоздатьКлючАналитики(ПараметрыАналитики)

	МенеджерЗаписи = РегистрыСведений.АналитикаУчетаПартий.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыАналитики);
		
	Результат = НайтиАналитикуУчетаПартий(ПараметрыАналитики);
	
	// Создание нового ключа аналитики.
	Если Не ЗначениеЗаполнено(Результат) Тогда
		СправочникОбъект = Справочники.КлючиАналитикиУчетаПартий.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики);
		СправочникОбъект.Наименование = ПолучитьНаименованиеКлючаАналитикиУчетаПартий(СправочникОбъект);
		СправочникОбъект.Записать();

		Результат = СправочникОбъект.Ссылка;
	КонецЕсли;

	МенеджерЗаписи.КлючАналитики = Результат;
	МенеджерЗаписи.Записать(Ложь);

	Возврат Результат;

КонецФункции

Функция СтруктураАналитикУчетаПартий(РеквизитыДокумента)
	
	СтруктураАналитикУчетаПартий = Новый Структура("
		|ГруппаФинансовогоУчета,
		|Поставщик,
		|Контрагент,
		|НалогообложениеНДС,
		|СтавкаНДС,
		|");
	СтруктураАналитикУчетаПартий.ГруппаФинансовогоУчета 	= РеквизитыДокумента.ГруппаФинансовогоУчета;
	СтруктураАналитикУчетаПартий.Поставщик 				 	= РеквизитыДокумента.Поставщик;
	СтруктураАналитикУчетаПартий.Контрагент 				= РеквизитыДокумента.Контрагент;
    СтруктураАналитикУчетаПартий.НалогообложениеНДС 		= РеквизитыДокумента.НалогообложениеНДС;
	СтруктураАналитикУчетаПартий.СтавкаНДС 		 		 	= РеквизитыДокумента.СтавкаНДС;
		
	Возврат СтруктураАналитикУчетаПартий;
	
КонецФункции

// Функция получает ключ аналитики учета партий для текущего документа.
//
// Параметры:
//	РеквизитыДокумента - Структура или ВыборкаИзРезультатаЗапроса - Данные документа
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаПартий - Найденный ключ аналитики учета партий
//
Функция КлючиАналитикиУчетаПартийДокумента(РеквизитыДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураКлючейАналитикПартий = СтруктураАналитикУчетаПартий(РеквизитыДокумента);
	
	МенеджерЗаписи = РегистрыСведений.АналитикаУчетаПартий.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКлючейАналитикПартий);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Результат = МенеджерЗаписи.КлючАналитики;
	Иначе
		Результат = СоздатьКлючАналитики(СтруктураКлючейАналитикПартий);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Метод выполняет заполнение реквизита "АналитикаУчетаПартий" в переданной табличной части.
Процедура ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ТабличнаяЧастьТовары = Неопределено, АналитикаУчетаПартийДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки							КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура							КАК Номенклатура,
	|	ТаблицаТоваров.Поставщик							КАК Поставщик,
	|	ТаблицаТоваров.Контрагент							КАК Контрагент,
	|	ТаблицаТоваров.СтавкаНДС							КАК СтавкаНДС,
	|	ТаблицаТоваров.Номенклатура.ГруппаФинансовогоУчета	КАК ГруппаФинансовогоУчета,
	|	АналитикаПартий.КлючАналитики 						КАК АналитикаУчетаПартий,
	|	ТаблицаТоваров.НалогообложениеНДС					КАК НалогообложениеНДС
	|ИЗ
	|	ИсходнаяТаблицаТоваров КАК ТаблицаТоваров
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
	|		ПО 
	|			ТаблицаТоваров.Поставщик 							 = АналитикаПартий.Поставщик
	|			И ТаблицаТоваров.НалогообложениеНДС 				 = АналитикаПартий.НалогообложениеНДС
	|			И ТаблицаТоваров.Контрагент 						 = АналитикаПартий.Контрагент
	|			И ТаблицаТоваров.СтавкаНДС 							 = АналитикаПартий.СтавкаНДС
	|			И ТаблицаТоваров.Номенклатура.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
	|  
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.АналитикаУчетаПартий) Тогда
			АналитикаУчетаПартий = Выборка.АналитикаУчетаПартий;
		Иначе
			АналитикаУчетаПартий = КлючиАналитикиУчетаПартийДокумента(Выборка);
		КонецЕсли;

		Если ТабличнаяЧастьТовары <> Неопределено Тогда
			СтрокаТаблицы = ТабличнаяЧастьТовары.Найти(Выборка.НомерСтроки, "НомерСтроки");
			СтрокаТаблицы.АналитикаУчетаПартий = АналитикаУчетаПартий;
		Иначе
			АналитикаУчетаПартийДокумента = АналитикаУчетаПартий;
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры


// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
	СтрокаТаб.ЗначениеДоступа = Организация;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Склады;
	СтрокаТаб.ЗначениеДоступа = Склад;

КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыСборокТоваров[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ИнициализироватьДокумент();
	Серии.Очистить();
	ВидЗапасов           = Неопределено;
	ЗаказНаСборку        = ПредопределенноеЗначение("Документ.вт_ЗаказВПроизводство.ПустаяСсылка");
	ДокументРезерваСерий = Неопределено;
	ВидыЗапасов.Очистить();
	Серии.Очистить();
	
	Для Каждого СтрокаТЧ Из Товары Цикл

		СтрокаТЧ.КодСтроки = 0;
		СтрокаТЧ.ДокументРезерваСерий = Неопределено;

	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//++ заполнение реквизита СборкаПодДеятельность
	Если ЗначениеЗаполнено(Организация) Тогда
		СборкаПодДеятельность = ?(ИспользуетсяОСН(),Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;	
	//--
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	// Очистка доли стоимости если она не нужна.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			Если СтрокаТЧ.ДоляСтоимости <> 0 Тогда
				СтрокаТЧ.ДоляСтоимости = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров));

	// Заполнение видов запасов.
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	//++
	//	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номенклатура) И (ЭтотОбъект.вт_Товары.Количество()>0) Тогда
	//		вт1_ЗаполнитьВидыЗапасовДокумента();
	//		вт2_ЗаполнитьВидыЗапасовДокумента();
	//	КонецЕсли;
	//	//--
	//	ЗаполнитьВидыЗапасов(Отказ);
	//	ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
	//	
	//ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	//	ВидыЗапасов.Очистить();	
	//КонецЕсли;
	//
	//// Очистим номера ГТД, если они не указываются.
	//Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
	//	Если ЗначениеЗаполнено(НомерГТД) Тогда
	//		НомерГТД = Неопределено;
	//	КонецЕсли;
	//Иначе
	//	Для Каждого СтрокаТаблицы Из Товары Цикл
	//		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
	//			СтрокаТаблицы.НомерГТД = Неопределено;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;

	//Если ЗначениеЗаполнено(Назначение) И ТипОперации <> Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
	//	Назначение = Неопределено;
	//КонецЕсли;
	//ИспользуетсяОбособленноеОбеспечение = ЗначениеЗаполнено(Назначение);

	//
	КонецПроцедуры

//++	
Функция ИспользуетсяОСН()
	ОрганизацияИспользуетОСН = Ложь;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика.СистемаНалогообложения КАК СистемаНалогообложения
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
				ОрганизацияИспользуетОСН = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	Возврат ОрганизацияИспользуетОСН; 	
КонецФункции
//--
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда

		ЗаказНаСборку = ДанныеЗаполнения;
		Дата = ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ЗаказНаСборку);
		ЗаполнитьПоЗаказу();

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование")
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда

		ЗаказНаСборку = ДанныеЗаполнения.ДокументОснование;

		Если ДанныеЗаполнения.Свойство("ДатаОтгрузки") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОтгрузки) Тогда
			Дата = ДанныеЗаполнения.ДатаОтгрузки;
		Иначе
			Дата = ЗаказыСервер.ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(ЗаказНаСборку);
		КонецЕсли;

		ЗаполнитьПоЗаказу();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
		 ЭтотОбъект.ДокументОснования = ДанныеЗаполнения;
		 вт_СкладПроизводства = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СкладПроизводства");
		 Если ЗначениеЗаполнено(вт_СкладПроизводства) Тогда
			 ЭтотОбъект.Склад = вт_СкладПроизводства;
		 Иначе
			 ЭтотОбъект.Склад = ДанныеЗаполнения.Склад;	 
		 КонецЕсли;	 
		 ЭтотОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		 //Заполняем план сборки из заказ производства
		ЭтотОбъект.Организация = ДанныеЗаполнения.Организация;
		НомераСтрок = 1;
		Для Каждого СтрокаЗаказа из ДанныеЗаполнения.ТОвары Цикл
			пВариантКомплектации = ОсновнойВариантКомплектации(СтрокаЗаказа.Номенклатура);
			Если пВариантКомплектации.Пустая()  Тогда
				Продолжить;
			КонецЕсли;
		 НовСтрока = ЭтотОбъект.вт_Товары.Добавить();
		 НовСтрока.Номенклатура = СтрокаЗаказа.Номенклатура;
		 НовСтрока.КоличествоУпаковок = СтрокаЗаказа.Количество;
		 НовСтрока.Количество = СтрокаЗаказа.Количество;
		 НовСтрока.ВариантКомплектации = пВариантКомплектации; 		 
		 НовСтрока.КодСтроки = НомераСтрок;
		 Для Каждого СтрокаВарианта из пВариантКомплектации.Товары Цикл
			  СтрокаТовары = ЭтотОбъект.Товары.Добавить();
			  СтрокаТовары.вт_ГотоваяПродукция = СтрокаЗаказа.Номенклатура;
			  СтрокаТовары.КлючСвязиСтроки = НомераСтрок;
			  СтрокаТовары.Номенклатура =  СтрокаВарианта.Номенклатура;
			  СтрокаТовары.КоличествоУпаковок =  СтрокаЗаказа.Количество * СтрокаВарианта.Количество;			  
			  СтрокаТовары.Количество =  СтрокаЗаказа.Количество * СтрокаВарианта.Количество;
		  КонецЦикла;	 
		 
		 НомераСтрок = НомераСтрок + 1;
	 	КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.вт_ПланСборки") Тогда
		 ЭтотОбъект.ДокументОснования = ДанныеЗаполнения;
		 ЭтотОбъект.Склад = ДанныеЗаполнения.Склад;
		 ЭтотОбъект.Организация = ДанныеЗаполнения.Организация; 
		 ЭтотОбъект.вт_Товары.Загрузить(ДанныеЗаполнения.Товары.Выгрузить());
		 НомераСтрок = 1;
		 Для Каждого СтрокаВтТовары из ЭтотОбъект.вт_Товары Цикл
			 СтрокаВтТовары.КоличествоУпаковок = СтрокаВтТовары.Количество;
			 СтрокавтТовары.КодСтроки = НомераСтрок;
			 Для Каждого СтрокаКомплект из СтрокавтТовары.ВариантКомплектации.Товары Цикл
				 СтрокаТовары = ЭтотОбъект.Товары.Добавить();
				 ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаКомплект);
				 СтрокаТовары.вт_ГотоваяПродукция =  СтрокаВтТовары.Номенклатура;
				 СтрокаТовары.КлючСвязиСтроки = НомераСтрок;
				 СтрокаТовары.КоличествоУпаковок =  СтрокавтТовары.Количество * СтрокаКомплект.Количество;
			 КонецЦикла;
			 НомераСтрок = НомераСтрок + 1;
		 КонецЦикла;
		 
	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	//++ Для сохранения совместимости с предыдущей версией
	//Если ЭтотОбъект.вт_Товары.Количество() > 0 И НЕ ЗначениеЗаполнено(ЭтотОбъект.Номенклатура) Тогда
	//	Документы.вт_КомплектацияРазукомплектация.вт_ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	//Иначе
	//	Документы.вт_КомплектацияРазукомплектация.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	//КонецЕсли;
	
	Если ЭтотОбъект.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано Тогда 
		ЗакрытьПланПроизводства();
		ОтразитьКомплектацию(ДополнительныеСвойства, Движения, Отказ);
		СформироватьДвиженияСебестоимостьИзДругихДвижений(Движения);
	КонецЕсли;
	//--
	
	//СформироватьСписокРегистровДляКонтроля();

КонецПроцедуры

Процедура СформироватьДвиженияСебестоимостьИзДругихДвижений(Движения)
	ТаблГП = ЭтотОбъект.вт_Товары.Выгрузить();
	ТаблГП.Свернуть("Номенклатура,Характеристика","Количество");
	
	
	ТаблСырье = ЭтотОбъект.Товары.Выгрузить(,"вт_ГотоваяПродукция, Номенклатура, Характеристика, Количество");
	ТаблСырье.Свернуть("вт_ГотоваяПродукция, Номенклатура, Характеристика","Количество");
	
	НомерСтрокаГП = 0;
	//Для Каждой ГП создает документ Комплектация, проводим и копируем результаты
	Для Каждого СтрокаГП из ТаблГП Цикл
		НомерСтрокаГП = НомерСтрокаГП + 1;
		пГотПрод 	    = СтрокаГП.Номенклатура;
		пХарактеристика = СтрокаГП.Характеристика;
		пГПКол 			= СтрокаГП.Количество;
		
		ОтборГП = Новый Структура("вт_ГотоваяПродукция",пГотПрод);
		СырьеПоГП = ТаблСырье.НайтиСтроки(ОтборГП);
		
		ДокСборка = Документы.СборкаТоваров.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ДокСборка,ЭтотОбъект,"Организация,Дата,Склад");
		ДокСборка.Номенклатура =пГотПрод; 
		ДокСборка.Характеристика = пХарактеристика;
		ДокСборка.Количество   = пГПКол;
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		ДокСборка.Комментарий = Строка(Ссылка);      
		//ДокСборка.СборкаПодДеятельность = ЭтотОбъект.СборкаПодДеятельность;// перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		ДокСборка.ХозяйственнаяОперация = ЭтотОбъект.ХозяйственнаяОперация;
		
		ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(ДокСборка);
		УчетНДСКэшированныеЗначенияПараметров = Неопределено;	
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			ДокСборка.СборкаПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
		
		для Каждого СтрокаСырья из СырьеПоГП Цикл
			СтрокаТовара = ДокСборка.Товары.Добавить();
			СтрокаТовара.Количество =  СтрокаСырья.Количество;
			СтрокаТовара.Номенклатура =  СтрокаСырья.Номенклатура;
			СтрокаТовара.Характеристика = СтрокаСырья.Характеристика;
		КонецЦикла;	
		
		Попытка
			ДокСборка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Если НЕ ДокСборка.Проведен Тогда
			УдалитьДокументСборка(ДокСборка);
			Продолжить;
		КонецЕсли;
		
		ДвижДокСборка = ДокСборка.Движения;
		ДвижСебестоимость = ДвижДокСборка.СебестоимостьТоваров.Выгрузить();
		ДвижСебестоимость.Колонки.Удалить("Регистратор");
		
		
		МД_ДокСборка = ДокСборка.метаданные().Движения;
		МД_ЭтотОбъект = ЭтотОбъект.метаданные().Движения;
		МД_Массив = Новый Массив;
		Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
			Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
				Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
					 МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		ДвижСебестоимость = новый ТаблицаЗначений;
		Для каждого ЭлементМД_Массив из МД_Массив цикл
			Если Движения.Найти(ЭлементМД_Массив)=Неопределено ТОгда
				Продолжить;
			КонецЕсли;
			
			ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
			ДвижСебестоимость.Колонки.Удалить("Регистратор");
			
			//Если НомерСтрокаГП = 1 Тогда
			//	Движения[ЭлементМД_Массив].Записывать = Истина;
			//	Движения[ЭлементМД_Массив].Загрузить(ДвижСебестоимость);
			//Иначе
			Движения[ЭлементМД_Массив].Записывать = Истина;
			Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
				НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
				
				Если ( ЭлементМД_Массив="СебестоимостьТоваров" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" ) 
					И НоваяСтрокаДвижСебестоимость.Партия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.Партия = ЭтотОбъект.Ссылка;
				ИначеЕсли ( ЭлементМД_Массив="СебестоимостьТоваров"
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" )
					И НоваяСтрокаДвижСебестоимость.КорПартия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.КорПартия = ЭтотОбъект.Ссылка;	
				ИначеЕсли ЭлементМД_Массив="ТоварыКОтгрузке" И НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ЭтотОбъект.Ссылка;	 
				КонецЕсли;	
				
			КонецЦикла;
			//КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение			
		КонецПопытки;
		
		ДокСборка.УстановитьПометкуУдаления(Истина);
		
		УдалитьДокументСборка(ДокСборка);
		
		
	КонецЦикла;
	
КонецПроцедуры	


Процедура УдалитьДокументСборка(ДокОбъект)
	
	 //   ДокОбъект.УстановитьПометкуУдаления(Истина);
		
		УдалитьДанныеДокументов(ДокОбъект.Ссылка);
		
		ДокОбъект.ОбменДанными.Загрузка=истина;	
		
	    ДокОбъект.Удалить();		
	
КонецПроцедуры

Процедура УдалитьДанныеДокументов(ДокСсылка)
	НЗ = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	НЗ.Отбор.Ссылка.Установить(ДокСсылка);
	НЗ.Прочитать();
	НЗ.Очистить();
	НЗ.Записать(Истина);	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	//ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	//ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	//СформироватьСписокРегистровДляКонтроля();

	//ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	//ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	//СкладыСервер.ОтразитьСостоянияОтгрузки(Ссылка, Отказ);

	//ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

&НаСервере
Функция ОсновнойВариантКомплектации(пНоменклатура) Экспорт
	РезультатОтвета = Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка();
	ВыборкаВариантов = Справочники.ВариантыКомплектацииНоменклатуры.Выбрать(,пНоменклатура);
	Пока ВыборкаВариантов.Следующий() Цикл
		Если ВыборкаВариантов.Основной И НЕ ВыборкаВариантов.ПометкаУдаления Тогда
			РезультатОтвета = ВыборкаВариантов.Ссылка;
		КонецЕсли;	
	КонецЦикла;
	 
	Возврат РезультатОтвета;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//Инициализация и заполнение

Процедура ЗаполнитьПоЗаказу()

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказНаСборку,
			Новый Структура("Организация, Склад, ХозяйственнаяОперация, Подразделение, Сделка, Проведен, Статус",
							"Организация", "Склад", "ХозяйственнаяОперация", "Подразделение", "Сделка", "Проведен", "Статус"));

	ПроверитьВозможностьВводаНаОснованииЗаказа(ЗначенияРеквизитов);

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Склад, ХозяйственнаяОперация, Подразделение, Сделка");

	ЗаполнитьТабличнуюЧастьТовары();
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров); 
	НоменклатураСервер.ЗаполнитьСерииПоЗаказам(ЭтотОбъект,ПараметрыУказанияСерий);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий.ТЧ, Ложь);

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТовары() Экспорт

	СтруктураДанных = Документы.СборкаТоваров.ПолучитьРезультатЗапросаПоОстаткамЗаказа(ЗаказНаСборку, Ссылка);
	Если СтруктураДанных.РезультатЗапросаПоКомплекту.Пустой() Или СтруктураДанных.РезультатЗапросаПоКомплектующим.Пустой() Тогда

		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по документу ""%Заказ%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", ЗаказНаСборку);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЗаказНаСборку");
		Возврат;

	КонецЕсли;

	// Заполнение комплекта.
	ВыборкаКомплект = СтруктураДанных.РезультатЗапросаПоКомплекту.Выбрать();
	Если ВыборкаКомплект.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаКомплект, "Номенклатура, Характеристика, ВариантКомплектации, Назначение,
																|ДокументРезерваСерий, Упаковка, Количество");

		// Если упаковка заполнена нужно определить количество упаковок.
		Если ЗначениеЗаполнено(Упаковка) Тогда
			КоличествоУпаковок = Количество / ВыборкаКомплект.Коэффициент;
		Иначе
			КоличествоУпаковок = Количество;
		КонецЕсли;

	КонецЕсли;

	// Заполнение комплектующих.
	ВыборкаКомплектующие = СтруктураДанных.РезультатЗапросаПоКомплектующим.Выбрать();
	Пока ВыборкаКомплектующие.Следующий() Цикл

		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, ВыборкаКомплектующие, "Номенклатура, Характеристика,ДокументРезерваСерий, КодСтроки, Упаковка,
																		|ДоляСтоимости, Количество");

		// Если упаковка заполнена нужно определить количество упаковок.
		Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка) Тогда
			СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество / ВыборкаКомплектующие.Коэффициент;
		Иначе
			СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Ответственный    = Пользователи.ТекущийПользователь();
	ДатаРаспоряжения = ТекущаяДата();
	Подразделение    = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров") Тогда
		Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииЗаказа(ЗначенияРеквизитов)

	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);

	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.Проведен;
	ЕстьОшибкиСтатус   = ЗначенияРеквизитов.Статус = Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;

	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(ЗаказНаСборку,
			ЗначенияРеквизитов.Статус,
			ЕстьОшибкиПроведен,
			ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Виды запасов

Функция СформироватьТаблицуТоваров()
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда

		ТаблицаТоваров = Товары.Выгрузить();

	Иначе

		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("ВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов"));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));

		ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), ЭтотОбъект);

	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции

// Функция формирует временные данных документа.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц
//
//Функция ВременныеТаблицыДанныхДокумента() Экспорт
//	
//	Запрос = Новый Запрос("
//	|ВЫБРАТЬ
//	|	&Организация КАК Организация,
//	|	&Дата КАК Дата,
//	|	&Склад КАК Склад,
//	|	Неопределено КАК Партнер,
//	|	Неопределено КАК Контрагент,
//	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
//	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
//	|	&СборкаПодДеятельность КАК НалогообложениеНДС,
//	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
//	|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
//	|
//	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
//	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
//	|		И Не ЕСТЬNULL(СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке, Ложь)
//	|	ТОГДА
//	|		&Подразделение
//	|	ИНАЧЕ
//	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
//	|	КОНЕЦ КАК Подразделение,
//	|
//	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
//	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
//	|		И Не ЕСТЬNULL(СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке, Ложь)
//	|	ТОГДА
//	|		&Менеджер
//	|	ИНАЧЕ
//	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
//	|	КОНЕЦ КАК Менеджер,
//	|
//	|	ВЫБОР КОГДА ЕСТЬNULL(СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке, Ложь)
//	|		И &ФормироватьВидыЗапасовПоСделкам
//	|	ТОГДА
//	|		&Сделка
//	|	ИНАЧЕ
//	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
//	|	КОНЕЦ КАК Сделка,
//    |
//    |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураОсновногоКомпонента,
//	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаОсновногоКомпонента
//	|    	
//	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|
//	|	ЛЕВОЕ СОЕДИНЕНИЕ
//	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
//	|	ПО
//	|		СтруктураПредприятия.Ссылка = &Подразделение
//	|
//	|	ЛЕВОЕ СОЕДИНЕНИЕ
//	|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
//	|	ПО
//	|		СделкиСКлиентами.Ссылка = &Сделка
//	|ГДЕ
//	|	Организации.Ссылка = &Организация
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
//	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
//	|	ТаблицаТоваров.Характеристика КАК Характеристика,
//    |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
//    |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
//    |	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
//	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
//	|	ТаблицаТоваров.Количество КАК Количество,
//	|	&ЗаказНаСборку КАК Заказ,
//	|	ТаблицаТоваров.КодСтроки КАК КодСтроки
//	|	
//	|ПОМЕСТИТЬ ВтТаблицаТоваров
//	|ИЗ
//	|	&ТаблицаТоваров КАК ТаблицаТоваров
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
//	|	ТоварыЗаказа.Ссылка.НазначениеТовары КАК Назначение
//	|	
//	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
//	|ИЗ
//	|	ВтТаблицаТоваров КАК ТаблицаТоваров
//	|
//	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
//	|		Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
//	|	ПО
//	|		ТаблицаТоваров.Заказ = ТоварыЗаказа.Ссылка
//	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
//	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
//	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
//	|ГДЕ
//	|	ТаблицаТоваров.Заказ <> Неопределено
//	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	НомерСтроки
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
//	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
//	|	ТаблицаТоваров.Характеристика КАК Характеристика,
//	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
//    |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,        
//	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
//	|	ТаблицаТоваров.Количество КАК Количество,
//	|	&Склад КАК Склад,
//	|	&Сделка КАК Сделка,
//	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
//	|	0 КАК СуммаСНДС,
//	|	0 КАК СуммаНДС,
//	|	0 КАК СуммаВознаграждения,
//	|	0 КАК СуммаНДСВознаграждения,
//	|	ЕСТЬNULL(ТоварыПодЗаказ.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
//	|	ИСТИНА КАК ПодбиратьВидыЗапасов
//	|	
//	|ПОМЕСТИТЬ ТаблицаТоваров
//	|ИЗ
//	|	ВтТаблицаТоваров КАК ТаблицаТоваров
//	|
//	|	ЛЕВОЕ СОЕДИНЕНИЕ
//	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
//	|	ПО
//	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
//    |	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
//    |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
//    //|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,      
//	|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
//	|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
//	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
//	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
//	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
//	|	ТаблицаВидыЗапасов.Количество КАК Количество,
//	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
//	|	&Склад КАК Склад,
//	|	&Сделка КАК Сделка,
//	//|	ТаблицаВидыЗапасов.НоменклатураОприходование КАК НоменклатураОприходование,
//	//|	ТаблицаВидыЗапасов.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
//	//|	ТаблицаВидыЗапасов.ВидЗапасовОприходование КАК ВидЗапасовОприходование,
//	//|	ТаблицаВидыЗапасов.КоличествоОприходование КАК КоличествоОприходование,
//	|	ТаблицаВидыЗапасов.ДоляСтоимости КАК ДоляСтоимости,
//	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
//	|	
//	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
//	|ИЗ
//	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Номенклатура,
//	|	Характеристика
//	|;
//	|/////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
//	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
//    |	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
//    |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение 
//	|
//	|ПОМЕСТИТЬ ТаблицаКомплектов
//	|ИЗ
//	|	&ТаблицаКомплектов КАК ТаблицаТоваров
//	|ГДЕ
//	|	&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
//	|	И ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
//	|;
//	|/////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	0 КАК НомерСтроки,
//	|	Комплект.Ссылка КАК Номенклатура,
//	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
//	|	&Сделка КАК Сделка,
//	|	&Подразделение КАК Подразделение,
//	|	&Менеджер КАК Менеджер,
//	|	ЕСТЬNULL(Заказ.Назначение, &Назначение) КАК Назначение,
//	|	&Организация КАК Организация,
//	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
//	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
//	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
//	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
//	|	&СборкаПодДеятельность КАК НалогообложениеНДС,
//	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
//	|	Неопределено КАК Поставщик,
//	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции   
//	|	
//	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
//	|ИЗ
//	|	Справочник.Номенклатура КАК Комплект
//	|
//	|	ЛЕВОЕ СОЕДИНЕНИЕ
//	|		Документ.ЗаказНаСборку КАК Заказ
//	|	ПО
//	|		Заказ.Ссылка = &ЗаказНаСборку
//	|ГДЕ
//	|	Комплект.Ссылка = &Номенклатура
//	|	И &ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
//	|	И &ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
//	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
//	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
//	|	&Сделка КАК Сделка,
//	|	&Подразделение КАК Подразделение,
//	|	&Менеджер КАК Менеджер,
//	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
//	|	&Организация КАК Организация,
//	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
//	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
//	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
//	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
//	|	&СборкаПодДеятельность КАК НалогообложениеНДС,
//	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
//	|	Неопределено КАК Поставщик,
//	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции
//	|
//	|ИЗ
//	|	ТаблицаКомплектов КАК ТаблицаТоваров
//	|ГДЕ
//	|	&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
//	|;
//	|/////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	&Организация КАК Организация,
//	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
//	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
//	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
//	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
//	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
//	|	&СборкаПодДеятельность КАК НалогообложениеНДС,
//	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
//	|	Неопределено КАК Поставщик
//	|
//	|ПОМЕСТИТЬ РеквизитыВидаЗапасов
//	|");
//	
//	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.УстановитьПараметр("Дата", Дата);
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("Склад", Склад);
//	Запрос.УстановитьПараметр("Менеджер", Ответственный);
//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
//	Запрос.УстановитьПараметр("Сделка", Сделка);
//	Запрос.УстановитьПараметр("ТипОперации", ХозяйственнаяОперация);
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	Запрос.УстановитьПараметр("ВидЗапасов", ВидЗапасов);
//	Запрос.УстановитьПараметр("ЗаказНаСборку", ?(ЗаказНаСборку=Неопределено,ПредопределенноеЗначение("Документ.вт_ЗаказВПроизводство.ПустаяСсылка"),ЗаказНаСборку));
//	Запрос.УстановитьПараметр("СборкаПодДеятельность", СборкаПодДеятельность);
//	Запрос.УстановитьПараметр("Назначение",  Назначение);
//	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
//	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
//	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
//	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
//	
//	ТаблицаТоваров = СформироватьТаблицуТоваров();
//	Запрос.УстановитьПараметр("ТаблицаТоваров", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ТаблицаТоваров));
//	Запрос.УстановитьПараметр("ТаблицаКомплектов", Товары.Выгрузить(,"НомерСтроки, Номенклатура, ВидЗапасов"));
//	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
//	
//	Запрос.Выполнить();
//	
//	Если ВидыЗапасовУказаныВручную Тогда
//		ДополнительныеСвойства.Вставить("ИспользоватьОстаткиНаКонецМесяца", Истина);
//	КонецЕсли;
//	
//	Возврат МенеджерВременныхТаблиц;
//	
//КонецФункции

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
    |	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
    |	ТаблицаТоваров.Серия,                           
	|	ТаблицаТоваров.Склад КАК Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер,
	|	ТаблицаДанныхДокумента.Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Ответственный
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке
	|		И &ФормироватьВидыЗапасовПоСделкам
	|	ТОГДА
	|		ДанныеДокумента.Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ КАК Сделка
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.вт_КомплектацияРазукомплектация КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Склад <> СохраненныеДанные.Склад ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Подразделение <> СохраненныеДанные.Подразделение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Сделка <> СохраненныеДанные.Сделка ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика КАК Характеристика,
	//|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	//|		ТаблицаВидыЗапасов.ВидЗапасов.Назначение КАК Назначение,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика
	//|	ТаблицаТоваров.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

// Процедура формирует временную таблицу доступных видов запасов.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
		Организация,
		Сделка,
		Ответственный,
		Подразделение,
		МенеджерВременныхТаблиц
	);
	
КонецПроцедуры

// Процедура формирует сообщения об ошибках заполнения видов запасов документа.
//
// Параметры:
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок заполнения
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сборка превышает остаток товара организации %1 на складе %2 %3 %4'"),
			Организация,
			Склад,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект
		);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения
			);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "Виды запасов документа".
//
// Параметры:
//	Отказ - Булево - Признак отказа от проведения документа
//
//Процедура ЗаполнитьВидыЗапасов(Отказ)
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
//	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
//	Если Не Проведен
//	 ИЛИ ПерезаполнитьВидыЗапасов
//	 ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
//	 ИЛИ ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
//	 ИЛИ ПроверитьИзменениеПриходуемыхТоваров(МенеджерВременныхТаблиц) Тогда
//	 
//		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
//		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
//		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
//		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
//		
//		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
//			МенеджерВременныхТаблиц,
//			ДополнительныеСвойства,
//			ВидыЗапасов,
//			ТаблицаОшибок,
//			Отказ
//		);
//        ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД", "Количество");
//          //ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество"); 
//		ЗаполнитьНоменклатуруОприходованиеВидовЗапасов();
//		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
//		                   
//	КонецЕсли;
//	
//	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
//		Если Не ЗначениеЗаполнено(ВидЗапасов) Тогда
//			ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(
//				МенеджерВременныхТаблиц,
//				Неопределено, // Товары
//				ВидЗапасов
//			);
//		КонецЕсли;
//	Иначе	
//		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
//	КонецЕсли;
//	
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

	//// Контроль при перепроведении и отмене проведения.
	//Если Не ДополнительныеСвойства.ЭтоНовый Тогда
	//	Массив.Добавить(Движения.ТоварыКОтгрузке);
	//КонецЕсли;

	//Массив.Добавить(Движения.ОбеспечениеЗаказов);

	//// При проведении выполняется контроль превышения свободного остатка и заказа.
	//Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

	//	Массив.Добавить(Движения.СвободныеОстатки);
	//	Массив.Добавить(Движения.ДвижениеТоваров);
	//	Массив.Добавить(Движения.ЗаказыНаСборку);

	//	ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	//	Если ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
	//	 Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда

	//		//Массив.Добавить(Движения.РезервыСерийТоваров);
	//		Массив.Добавить(Движения.ТоварыНаСкладах);

	//	КонецЕсли;

	//КонецЕсли;

	//ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличестваВШапке(Объект, ПроверяемыеРеквизиты, Отказ)

	//++
	  Возврат;
	//--
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Количество"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КоличествоУпаковок"));

	Если Объект.Количество = 0 И Объект.КоличествоУпаковок <> 0 Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения'"),
				Объект,
				"КоличествоУпаковок",
				,
				Отказ);

	ИначеЕсли Объект.Количество = 0 Или Объект.КоличествоУпаковок = 0 Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка ""Количество"" '"),
				Объект,
				"КоличествоУпаковок",
				,
				Отказ);

	КонецЕсли;

КонецПроцедуры

Функция СформироватьТаблицуПриходуемыхТоваров()
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда

		ТаблицаПриходуемыхТоваров = Товары.Выгрузить();

	Иначе

		ТаблицаПриходуемыхТоваров = Новый ТаблицаЗначений;
		ТаблицаПриходуемыхТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПриходуемыхТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПриходуемыхТоваров.Колонки.Добавить("ВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов"));
		ТаблицаПриходуемыхТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТаблицаПриходуемыхТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаПриходуемыхТоваров.Колонки.Добавить("ДоляСтоимости", Новый ОписаниеТипов("Число"));

		ЗаполнитьЗначенияСвойств(ТаблицаПриходуемыхТоваров.Добавить(), ЭтотОбъект);

	КонецЕсли;

	Возврат ТаблицаПриходуемыхТоваров;

КонецФункции // СформироватьТаблицуПриходуемыхТоваров()

// Функция проверят изменение табличной части "Товары" относительно табличной части "Виды запасов" документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//	Булево - Истина - товары изменены
//           Ложь - товары не изменены
//
Функция ПроверитьИзменениеПриходуемыхТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаПриходуемыхТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПриходуемыхТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаПриходуемыхТоваров.Характеристика КАК Характеристика,
	|	ТаблицаПриходуемыхТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаПриходуемыхТоваров.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаПриходуемыхТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаПриходуемыхТоваров
	|ИЗ
	|	&ТаблицаПриходуемыхТоваров КАК ТаблицаПриходуемыхТоваров
    |;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаПриходуемыхТоваров.Номенклатура КАК Номенклатура,
	|		ТаблицаПриходуемыхТоваров.Характеристика КАК Характеристика,
	|		ТаблицаПриходуемыхТоваров.ВидЗапасов КАК ВидЗапасов,
	|		ТаблицаПриходуемыхТоваров.ДоляСтоимости КАК ДоляСтоимости,
	|		ТаблицаПриходуемыхТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаПриходуемыхТоваров КАК ТаблицаПриходуемыхТоваров
	|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ТаблицаВидыЗапасов.НоменклатураОприходование КАК Номенклатура,
	//|		ТаблицаВидыЗапасов.ХарактеристикаОприходование КАК Характеристика,
	//|		ТаблицаВидыЗапасов.ВидЗапасовОприходование КАК ВидЗапасов,
	//|		-ТаблицаВидыЗапасов.ДоляСтоимости КАК ДоляСтоимости,
	//|		-ТаблицаВидыЗапасов.КоличествоОприходование КАК Количество  
	//|	ИЗ
	//|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	//|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.ВидЗапасов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.ДоляСтоимости) <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаПриходуемыхТоваров = СформироватьТаблицуПриходуемыхТоваров();
	Запрос.УстановитьПараметр("ТаблицаПриходуемыхТоваров", ТаблицаПриходуемыхТоваров);

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции // ПроверитьИзменениеПриходуемыхТоваров()

// Процедура заполняет номенклатуру и характеристику оприходования видов запасов документа.
//
Процедура ЗаполнитьНоменклатуруОприходованиеВидовЗапасов()
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		
		КоличествоКомплект = Количество;
		КоличествоСтрок = ВидыЗапасов.Количество();
	
		Для Каждого СтрокаЗапасов Из ВидыЗапасов Цикл

			СтрокаЗапасов.НоменклатураОприходование = Номенклатура;
			СтрокаЗапасов.ХарактеристикаОприходование = Характеристика;
			СтрокаЗапасов.КоличествоОприходование = Окр(КоличествоКомплект / КоличествоСтрок, 3, РежимОкругления.Окр15как20);
			СтрокаЗапасов.ВидЗапасовОприходование = ВидЗапасов;
			
			КоличествоКомплект = КоличествоКомплект - СтрокаЗапасов.КоличествоОприходование;
			КоличествоСтрок = КоличествоСтрок - 1;

		КонецЦикла;
		
	Иначе
		
		ТаблицаВидовЗапасов = ВидыЗапасов.Выгрузить(, "Номенклатура, Характеристика, ВидЗапасов, НомерГТД,, Количество");
		КоличествоСтрокВидовЗапасов = ВидыЗапасов.Количество();
		
		ВидыЗапасов.Очистить();
		Для Каждого СтрокаЗапасов Из ТаблицаВидовЗапасов Цикл
			
			ИтогоДоляСтоимости = Товары.Итог("ДоляСтоимости");
			Для Каждого СтрокаТоваров Из Товары Цикл
				
				НоваяСтрока = ВидыЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
				НоваяСтрока.НоменклатураОприходование = СтрокаТоваров.Номенклатура;
				НоваяСтрока.ХарактеристикаОприходование = СтрокаТоваров.Характеристика;
				НоваяСтрока.ВидЗапасовОприходование = СтрокаТоваров.ВидЗапасов;
				НоваяСтрока.ДоляСтоимости = СтрокаТоваров.ДоляСтоимости;

				Если КоличествоСтрокВидовЗапасов = 1 Тогда
					НоваяСтрока.КоличествоОприходование = СтрокаТоваров.Количество;
				КонецЕсли;
				
				Если ИтогоДоляСтоимости <> 0 Тогда
					НоваяСтрока.Количество = Окр(СтрокаТоваров.ДоляСтоимости * СтрокаЗапасов.Количество / ИтогоДоляСтоимости, 3, РежимОкругления.Окр15как20);
				Иначе
					НоваяСтрока.Количество = СтрокаЗапасов.Количество;
				КонецЕсли;
				
				СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
				ИтогоДоляСтоимости = ИтогоДоляСтоимости - СтрокаТоваров.ДоляСтоимости;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если КоличествоСтрокВидовЗапасов > 1 Тогда
		
			Для Каждого СтрокаТоваров Из Товары Цикл
				
				КоличествоТовара = СтрокаТоваров.Количество;
				
				СтруктураПоиска = Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование, ВидЗапасовОприходование",
					СтрокаТоваров.Номенклатура,
					СтрокаТоваров.Характеристика,
					СтрокаТоваров.ВидЗапасов
				);
				МассивСтрок = ВидыЗапасов.НайтиСтроки(СтруктураПоиска);
				ИтогоКоличество = 0 ;
				Для Каждого СтрокаЗапасов Из МассивСтрок Цикл
					ИтогоКоличество = ИтогоКоличество + СтрокаЗапасов.Количество;
				КонецЦикла;
				Для Каждого СтрокаЗапасов Из МассивСтрок Цикл
					Если ИтогоКоличество <> 0 Тогда
						СтрокаЗапасов.КоличествоОприходование = Окр(СтрокаЗапасов.Количество * КоличествоТовара / ИтогоКоличество, 3, РежимОкругления.Окр15как20);
						КоличествоТовара = КоличествоТовара - СтрокаЗапасов.КоличествоОприходование;
						ИтогоКоличество = ИтогоКоличество - СтрокаЗапасов.Количество;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНоменклатуруОприходованиеВидовЗапасов()

Процедура ЗаполнитьАналитикуУчетаПартийВШапкеДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	0 								КАК НомерСтроки,
	|	Документ.Номенклатура 			КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО				 	КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО 					КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО 					КАК Контрагент,
	|	&НалогообложениеНДС 			КАК НалогообложениеНДС
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|
	|ИЗ
	|	Документ.вт_КомплектацияРазукомплектация КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка");

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НалогообложениеНДС"	, СборкаПодДеятельность);
	Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
				
	Запрос.Выполнить();
	
	ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц,, АналитикаУчетаПартий);
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО				 	КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО 					КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО 					КАК Контрагент,
	|	&НалогообложениеНДС 			КАК НалогообложениеНДС,
	|	ТаблицаТоваров.АналитикаУчетаПартий
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
	                	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров"		, Товары.Выгрузить(, 
														"НомерСтроки, Номенклатура, АналитикаУчетаПартий"
														));
	Запрос.УстановитьПараметр("НалогообложениеНДС"	, СборкаПодДеятельность);
				
	Запрос.Выполнить();
	
	ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
		
КонецПроцедуры

//Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
//	
//	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих И АналитикаУчетаПартий.Пустая() Тогда
//		ЗаполнитьАналитикуУчетаПартийВШапкеДокумента();
//	Иначе			
//		ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти();
//	КонецЕсли;
//	
//КонецПроцедуры

//++
Процедура вт1_ЗаполнитьВидыЗапасовДокумента()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	                      |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	                      |	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	                      |	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	                      |	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	                      |	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	                      |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	                      |	&Организация КАК Организация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	                      |	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	                      |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	                      |	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	                      |	&СборкаПодДеятельность КАК НалогообложениеНДС,
	                      |	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
	                      |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ГруппаПродукции
	                      |ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	                      |ИЗ
	                      |	&ТаблицаТоваров КАК ТаблицаТоваров
	                      |ГДЕ
	                      |	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	&Организация КАК Организация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОприходованиеТоваров) КАК ХозяйственнаяОперация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	                      |	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	                      |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	                      |	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеОрганизации,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик
	                      |ПОМЕСТИТЬ РеквизитыВидаЗапасов");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", вт_Товары.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СборкаПодДеятельность", СборкаПодДеятельность);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, вт_Товары);
	
КонецПроцедуры

Процедура вт2_ЗаполнитьВидыЗапасовДокумента()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	                      |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	                      |	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	                      |	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	                      |	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	                      |	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	                      |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	                      |	&Организация КАК Организация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	                      |	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	                      |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	                      |	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	                      |	&СборкаПодДеятельность КАК НалогообложениеНДС,
	                      |	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
	                      |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ГруппаПродукции
	                      |ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	                      |ИЗ
	                      |	&ТаблицаТоваров КАК ТаблицаТоваров
	                      |ГДЕ
	                      |	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	&Организация КАК Организация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОприходованиеТоваров) КАК ХозяйственнаяОперация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	                      |	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	                      |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	                      |	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеОрганизации,
	                      |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик
	                      |ПОМЕСТИТЬ РеквизитыВидаЗапасов");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СборкаПодДеятельность", СборкаПодДеятельность);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

Процедура ОтразитьКомплектацию(ДополнительныеСвойства, Движения, Отказ)

	Таблица= Документы.вт_КомплектацияРазукомплектация.вт_ПолучитьТаблицуВыпускаПоСменам(ЭтотОбъект.Ссылка); ;//ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКомплектацияПоСменам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вт_КомплектацииПоСменам.Записывать = Истина;
	Движения.вт_КомплектацииПоСменам.Загрузить(Таблица);
	
КонецПроцедуры

//Закрыть записи регистра план производства
Процедура ЗакрытьПланПроизводства()
	вЗаказПроизводства = документы.вт_ЗаказВПроизводство.ПустаяСсылка();
	//Определяем есть ли ссылка на заказ в производство
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаказНаСборку) ТОгда
		Если ТипЗнч(ЭтотОбъект.ЗаказНаСборку)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
			вЗаказПроизводства = ЭтотОбъект.ЗаказНаСборку;
		ИНачеЕсли ТипЗнч(ЗаказНаСборку)=Тип("ДокументСсылка.вт_ПланСборки") Тогда 	
			Если ЗначениеЗаполнено(ЗаказНаСборку.ДокументОснования) Тогда
				вЗаказПроизводства =  ЗаказНаСборку.ДокументОснования;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
   Запрос = Новый Запрос("ВЫБРАТЬ
                         |	ВТ_ТОВАРЫ.Номенклатура
                         |ПОМЕСТИТЬ ВТ_ТОВАРЫ
                         |ИЗ
                         |	&ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |	вт_ПланПроизводстваТоваровОстатки.Организация,
                         |	вт_ПланПроизводстваТоваровОстатки.ЗаказПроизводства,
                         |	вт_ПланПроизводстваТоваровОстатки.Номенклатура,
                         |	вт_ПланПроизводстваТоваровОстатки.Характеристика,
                         |	вт_ПланПроизводстваТоваровОстатки.КоличествоОстаток
                         |ИЗ
                         |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ПланСборкиТоваров.Остатки(
                         |				&МоментОстатка,
                         |				ЗаказПроизводства = &ЗаказПроизводства
                         |					И Организация = &Организация) КАК вт_ПланПроизводстваТоваровОстатки
                         |		ПО ВТ_ТОВАРЫ.Номенклатура = вт_ПланПроизводстваТоваровОстатки.Номенклатура");	
						  
						 Запрос.УстановитьПараметр("ВТ_ТОВАРЫ",ЭтотОбъект.Товары);
						 Запрос.УстановитьПараметр("ЗаказПроизводства",вЗаказПроизводства);
						 Запрос.УстановитьПараметр("Организация",ЭтотОбъект.Организация);
						 Запрос.УстановитьПараметр("МоментОстатка",Новый МоментВремени(ЭтотОбъект.Дата-1));
						 ВыборкаОстатки = Запрос.Выполнить().Выбрать();
						 Пока ВыборкаОстатки.Следующий() Цикл
							 Если ВыборкаОстатки.КоличествоОстаток<=0 Тогда
								 Продолжить;
							 КонецЕсли;
							 
							 СтрокаДвижения = Движения.вт_ПланСборкиТоваров.Добавить();
							 СтрокаДвижения.ВидДвижения=ВидДвиженияНакопления.Расход;
							 СтрокаДвижения.ЗаказПроизводства = ВыборкаОстатки.ЗаказПроизводства;
							 СтрокаДвижения.Количество = ВыборкаОстатки.КоличествоОстаток;
							 СтрокаДвижения.Номенклатура =ВыборкаОстатки.номенклатура;
							 СтрокаДвижения.Организация = ЭтотОбъект.Организация;
							 СтрокаДвижения.Период = ЭтотОбъект.Дата;
						 КонецЦикла;
						 Движения.вт_ПланСборкиТоваров.Записывать = Истина;
						 
КонецПроцедуры

#КонецЕсли