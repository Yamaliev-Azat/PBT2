
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	ЗАполнитьТоварыСборки();	
КонецПроцедуры

&НаКлиенте
Процедура ЗАполнитьТоварыСборки()
	ЗаполнитьСервер();
	ЗаполнитьСтруктуруДерево();
КонецПроцедуры


&НаСервере
Процедура	ЗаполнитьСервер()
	
	Запрос = Новый Запрос("
							  |	ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	Т.ГруппаТоваров
		                      |ПОМЕСТИТЬ ВТ_ГРУППЫ
		                      |ИЗ
		                      |	&ТГруппы КАК Т;
							  |////////////////////////////////////////////////////////////////////////////////
	                          |
							  |ВЫБРАТЬ
	                          |	Номенклатура.Ссылка

	                          |ПОМЕСТИТЬ ВТ_ТОВАРЫ
	                          |ИЗ
	                          |	Справочник.Номенклатура КАК Номенклатура
	                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	                          |		ПО Номенклатура.Ссылка = ВариантыКомплектацииНоменклатуры.Владелец
	                          |ГДЕ
	                          |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	                          |	И Номенклатура.вт_МаксимальныйЗапас > 0
							  | И ВЫБОР КОГДА &УчетПоГруппам=ИСТИНА ТОГДА 
							  |     Номенклатура.Родитель В ИЕРАРХИИ (ВЫБРАТЬ Т.ГруппаТоваров из ВТ_ГРУППЫ КАК Т) 
							  |   ИНАЧЕ
							  |      ИСТИНА
							  |   КОНЕЦ
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	ВТ_ТОВАРЫ.Ссылка,
	                          |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК Остаток
	                          |ПОМЕСТИТЬ ВТ_ОСТАТКИ
	                          |ИЗ
	                          |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                          |				&ДатаОстатка,
	                          |				Номенклатура В
	                          |						(ВЫБРАТЬ
	                          |							ВТ.Ссылка
	                          |						ИЗ
	                          |							ВТ_ТОВАРЫ КАК ВТ)
	                          |					И Склад В (&Склады)) КАК ТоварыНаСкладахОстатки
	                          |		ПО ВТ_ТОВАРЫ.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	ВТ_ТОВАРЫ.Ссылка
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	ВТ_ОСТАТКИ.Ссылка КАК ГотоваяПродукция,
							  |	ВТ_ОСТАТКИ.Ссылка.Наименование КАК ГотоваяПродукцияНаименование,
	                          |	ВТ_ОСТАТКИ.Остаток КАК Остаток,
	                          |	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Комплектующее,
	                          |	ВариантыКомплектацииНоменклатурыТовары.Количество * (ВТ_ОСТАТКИ.Ссылка.вт_МаксимальныйЗапас - ВТ_ОСТАТКИ.Остаток) КАК КоличествоКомплектующих,
	                          |	ВариантыКомплектацииНоменклатурыТовары.Ссылка КАК ВариантКомплектации,
	                          |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ОстатокКомплекта
	                          |ИЗ
	                          |	ВТ_ОСТАТКИ КАК ВТ_ОСТАТКИ
	                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	                          |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатка, Склад В (&Склады)) КАК ТоварыНаСкладахОстатки
	                          |			ПО ВариантыКомплектацииНоменклатурыТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                          |		ПО ВТ_ОСТАТКИ.Ссылка = ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец
	                          |ГДЕ
	                          |	ВТ_ОСТАТКИ.Остаток < ВТ_ОСТАТКИ.Ссылка.вт_МаксимальныйЗапас
	                          |	И ВариантыКомплектацииНоменклатурыТовары.Ссылка.Основной = ИСТИНА
	                          |
	                          |УПОРЯДОЧИТЬ ПО
	                          |	ГотоваяПродукцияНаименование
	                          |ИТОГИ
	                          |	МАКСИМУМ(Остаток),
	                          |	СУММА(КоличествоКомплектующих),
	                          |	СУММА(ОстатокКомплекта)
	                          |ПО
	                          |	ГотоваяПродукция,
							  |	//ГотоваяПродукцияНаименование,
	                          |	Комплектующее");
	МассивСклады = Новый Массив;
	МассивСклады.Добавить(РеквизитСкладОсновной);
	МассивСклады.Добавить(РеквизитСкладПроизводства);
	
	Запрос.УстановитьПараметр("ДатаОстатка", КонецДня(Объект.Дата));	
	Запрос.УстановитьПараметр("Склады", МассивСклады);
	Запрос.УстановитьПараметр("УчетПоГруппам", ГруппыТоваров.Количество()>0);
	Запрос.УстановитьПараметр("ТГруппы",ГруппыТоваров.Выгрузить());
	
	Объект.Товары.Очистить();
	Объект.Комплектующие.Очистить();
	
	Результат = Запрос.Выполнить();
	
	СписокКомплектов = Новый ТаблицаЗначений; //Список комплектов, по которым нужно будет разложить информацию
	мТипыНоменкл = Новый Массив;
	мТипыНоменкл.Добавить(Тип("СправочникСсылка.Номенклатура"));
	СписокКомплектов.Колонки.Добавить("Комплект", Новый ОписаниеТипов(мТипыНоменкл));
	мТипыНоменкл[0] = тип("Число");
	СписокКомплектов.Колонки.Добавить("Количество", Новый ОписаниеТипов(мТипыНоменкл));
	
	ВыборкаГП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГП.Следующий() Цикл
		СтрокаТовар = Объект.Товары.Добавить();
		СтрокаТовар.Номенклатура = ВыборкаГП.ГотоваяПродукция;
		СтрокаТовар.ТекущийОстаток = ВыборкаГП.Остаток;
		СтрокаТовар.ВариантКомплектации = ВыборкаГП.ВариантКомплектации;
		СтрокаТовар.МинОстаток  = вт_ОбщийМодульПроизводства.ПолучитьМинМаксОстаток(ВыборкаГП.ГотоваяПродукция,"Минимальный запас"); 
		СтрокаТовар.МаксОстаток = вт_ОбщийМодульПроизводства.ПолучитьМинМаксОстаток(ВыборкаГП.ГотоваяПродукция,"Максимальный запас"); 
		СтрокаТовар.Количество = СтрокаТовар.МаксОстаток - ВыборкаГП.Остаток;
		
		ВыборкаТовары = ВыборкаГП.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			 СтрокаКомплект = Объект.Комплектующие.Добавить();
			 СтрокаКомплект.Номенклатура =  ВыборкаТовары.Комплектующее;
			 СтрокаКомплект.ГотоваяПродукция =  ВыборкаТовары.ГотоваяПродукция;
			 СтрокаКомплект.ВариантКомплектации =  ВыборкаТовары.ВариантКомплектации;
             СтрокаКомплект.ТекущийОстаток =  ВыборкаТовары.ОстатокКомплекта;
             СтрокаКомплект.Количество =  ВыборкаТовары.КоличествоКомплектующих;
			 
			 //Если МассивКомплектов.Найти(ВыборкаТовары.Комплектующее.ВидНоменклатуры) <> Неопределено ТОгда
			 //     СтрокаКомплекта = СписокКомплектов.Добавить();
			 //     СтрокаКомплекта.Комплект = ВыборкаТовары.Комплектующее;
			 //     СтрокаКомплекта.Количество = ВыборкаТовары.КоличествоКомплектующих;
			 //     
			 //КонецЕсли;
 		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьРазложитьКомплекты(СписокКомплектов);
	
КонецПроцедуры


//Заполняем составные части комплектов
&НаСервере
Процедура ЗаполнитьРазложитьКомплекты(СписокКомплектов)
	    Запрос = Новый Запрос("ВЫБРАТЬ
	                          |	Т.Комплект,
	                          |	Т.Количество
	                          |ПОМЕСТИТЬ ВТ_КОМПЛЕКТЫ
	                          |ИЗ
	                          |	&ТНоменклатура КАК Т
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	ВТ_КОМПЛЕКТЫ.Комплект,
	                          |	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	                          |	ВариантыКомплектацииНоменклатурыТовары.Количество * ВТ_КОМПЛЕКТЫ.Количество КАК КоличествоКомплектующих,
	                          |	ВариантыКомплектацииНоменклатурыТовары.Ссылка КАК ВариантКомплектации,
	                          |	ТоварыНаСкладахОстатки.ВНаличииОстаток  КАК ОстатокКомплекта
	                          |ИЗ
	                          |	ВТ_КОМПЛЕКТЫ КАК ВТ_КОМПЛЕКТЫ
	                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	                          |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	                          |			ПО ВариантыКомплектацииНоменклатурыТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                          |		ПО ВТ_КОМПЛЕКТЫ.Комплект = ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец
	                          |ГДЕ
	                          |	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Основной = ИСТИНА");
							  
	Запрос.УстановитьПараметр("ТНоменклатура",СписокКомплектов); 
	ВыборкаПоКомплектам = Запрос.Выполнить().Выбрать();
	СписокКомплектов.Очистить();
	Пока ВыборкаПоКомплектам.Следующий() Цикл
		СтрокаКомплект = Объект.Комплектующие.Добавить();
		СтрокаКомплект.Номенклатура =  ВыборкаПоКомплектам.Номенклатура;
		СтрокаКомплект.ГотоваяПродукция =  ВыборкаПоКомплектам.Комплект;
		СтрокаКомплект.ВариантКомплектации =  ВыборкаПоКомплектам.ВариантКомплектации;
		СтрокаКомплект.ТекущийОстаток =  ВыборкаПоКомплектам.ОстатокКомплекта;
		СтрокаКомплект.Количество =  ВыборкаПоКомплектам.КоличествоКомплектующих;
		
		//Если МассивВидовКомплектов.Найти(ВыборкаПоКомплектам.Номенклатура.ВидНоменклатуры) <> Неопределено ТОгда
		//	СтрокаКомплекта = СписокКомплектов.Добавить();
		//	СтрокаКомплекта.Комплект = ВыборкаПоКомплектам.Номенклатура;
		//	СтрокаКомплекта.Количество = ВыборкаПоКомплектам.КоличествоКомплектующих;
		//КонецЕсли;
		
	КонецЦикла;
	Если СписокКомплектов.Количество()=0 ТОгда
		Возврат;
	КонецЕсли;	
	ЗаполнитьРазложитьКомплекты(СписокКомплектов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДерево()
	РеквизитПоДеталям = Ложь;
	ЗначениеДерево = ДанныеФормыВЗначение(РеквизитДерево,Тип("ДеревоЗначений"));
	ЗначениеДерево.Строки.Очистить();
	Для каждого СтрокаГП из объект.Товары Цикл
		СтрокаПоГП = ЗначениеДерево.Строки.Добавить();
	    СтрокаПоГП.Номенклатура = СтрокаГП.Номенклатура;
		СтрокаПоГП.Количество = СтрокаГП.Количество;
		СтрокаПоГП.ТекущийОстаток = СтрокаГП.ТекущийОстаток;
		СтрокаПоГП.МинОстаток = СтрокаГП.МинОстаток;
		СтрокаПоГП.МаксОстаток = СтрокаГП.МаксОстаток;
		СтрокаПоГП.СтрокаГотовойПРодукции = ИСТИНА;
		
		ОтборКомплектующих = Новый Структура("ГотоваяПродукция, ВариантКомплектации",СтрокаГП.Номенклатура, СтрокаГП.ВариантКомплектации);
		НайденыСтроки = Объект.Комплектующие.НайтиСтроки(ОтборКомплектующих);
		ДельтаПоКомплектующим = 0;
		Для Каждого СтрокаКомпл из НайденыСтроки Цикл
			      НоваяСтрокакомпл = СтрокаПоГП.Строки.Добавить();
				  НоваяСтрокакомпл.Номенклатура = СтрокаКомпл.Номенклатура;
				  НоваяСтрокакомпл.Количество = СтрокаКомпл.Количество;
				  НоваяСтрокакомпл.ТекущийОстаток = СтрокаКомпл.ТекущийОстаток;
				  ДельтаПоКомплектующим = ДельтаПоКомплектующим + ?(СтрокаКомпл.ТекущийОстаток<СтрокаКомпл.Количество,СтрокаКомпл.ТекущийОстаток-СтрокаКомпл.Количество,0);
				  
				  ЗаполнитьСтрокуДереваПоКомплектующим(НоваяСтрокакомпл, СтрокаКомпл.Номенклатура);
		КонецЦикла;
		СтрокаПоГП.ДельтаПоКомплектующим = ДельтаПоКомплектующим;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ЗначениеДерево,РеквизитДерево);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваПоКомплектующим(СтрокаРодитель, ГотоваПРодукция)
	Если ГотоваПРодукция.ВидНоменклатуры <> Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Комплект") тогда
		Возврат;
	КонецЕсли;
		ОтборКомплектующих = Новый Структура("ГотоваяПродукция",ГотоваПРодукция);
		НайденыСтроки = Объект.Комплектующие.НайтиСтроки(ОтборКомплектующих);
		ДельтаПоКомплектующим = 0;
		Для Каждого СтрокаКомпл из НайденыСтроки Цикл
			      НоваяСтрокакомпл = СтрокаРодитель.Строки.Добавить();
				  НоваяСтрокакомпл.Номенклатура = СтрокаКомпл.Номенклатура;
				  НоваяСтрокакомпл.Количество = СтрокаКомпл.Количество;
				  НоваяСтрокакомпл.ТекущийОстаток = СтрокаКомпл.ТекущийОстаток;
				  ДельтаПоКомплектующим = ДельтаПоКомплектующим + ?(СтрокаКомпл.ТекущийОстаток<СтрокаКомпл.Количество,СтрокаКомпл.ТекущийОстаток-СтрокаКомпл.Количество,0);
				  
				  ЗаполнитьСтрокуДереваПоКомплектующим(НоваяСтрокакомпл, НоваяСтрокакомпл.Номенклатура);

		КонецЦикла;
		СтрокаРодитель.ДельтаПоКомплектующим = ДельтаПоКомплектующим;
	
	
КонецПроцедуры	


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РеквизитСкладОсновной     = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ОсновнойСклад");
	РеквизитСкладПроизводства = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СкладПроизводства");
	
	//Получаю из временного хранилища 	
	//Если ЭтоАдресВременногоХранилища(Параметры.АдресДанных) Тогда
	//	Недостача = ПолучитьИзВременногоХранилища(Параметры.АдресДанных).Нехватка;
	//	УдалитьИзВременногоХранилища(Параметры.АдресДанных);  
	//			Запрос = Новый Запрос("
	//						  |	ВЫБРАТЬ
	//	                      |	Нехватка.Номенклатура КАК Номенклатура,
	//						  |	Нехватка.Количество КАК Количество
	//						  |ПОМЕСТИТЬ ВТ_НЕХВАТКА
	//	                      |ИЗ
	//	                      |	&Нехватка КАК Нехватка
	//	                      |;
	//	                      |
	//	                      |////////////////////////////////////////////////////////////////////////////////
	//	                      |ВЫБРАТЬ
	//	                      |	ВТ_НЕХВАТКА.Номенклатура КАК Ссылка,
	//						  |	ВТ_НЕХВАТКА.Количество КАК Количество
	//	                      |ПОМЕСТИТЬ ВТ_ТОВАРЫ
	//	                      |ИЗ
	//	                      |	ВТ_НЕХВАТКА КАК ВТ_НЕХВАТКА
	//	                      |;
	//	                      |
	//                          |////////////////////////////////////////////////////////////////////////////////
	//                          |ВЫБРАТЬ
	//                          |	ВТ_ТОВАРЫ.Ссылка,
	//						  |	ВТ_ТОВАРЫ.Количество, 
	//                          |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК Остаток
	//                          |ПОМЕСТИТЬ ВТ_ОСТАТКИ
	//                          |ИЗ
	//                          |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
	//                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	//                          |				&ДатаОстатка,
	//                          |				Номенклатура В
	//                          |						(ВЫБРАТЬ
	//                          |							ВТ.Ссылка
	//                          |						ИЗ
	//                          |							ВТ_ТОВАРЫ КАК ВТ)
	//                          |					И Склад В (&Склады)) КАК ТоварыНаСкладахОстатки
	//                          |		ПО ВТ_ТОВАРЫ.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
	//                          |
	//                          |СГРУППИРОВАТЬ ПО
	//                          |	ВТ_ТОВАРЫ.Ссылка,
	//						  |	ВТ_ТОВАРЫ.Количество
	//                          |;
	//                          |
	//                          |////////////////////////////////////////////////////////////////////////////////
	//                          |ВЫБРАТЬ
	//                          |	ВТ_ОСТАТКИ.Ссылка КАК ГотоваяПродукция,
	//						  |	ВТ_ОСТАТКИ.Ссылка.Наименование КАК ГотоваяПродукцияНаименование,
	//                          |	ВТ_ОСТАТКИ.Остаток КАК Остаток,
	//						  |	ВТ_ОСТАТКИ.Количество КАК Количество,
	//                          |	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Комплектующее,
	//                          |	ВариантыКомплектацииНоменклатурыТовары.Количество * ВТ_ОСТАТКИ.Количество КАК КоличествоКомплектующих,
	//                          |	ВариантыКомплектацииНоменклатурыТовары.Ссылка КАК ВариантКомплектации,
	//                          |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ОстатокКомплекта
	//                          |ИЗ
	//                          |	ВТ_ОСТАТКИ КАК ВТ_ОСТАТКИ
	//                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	//                          |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатка, Склад В (&Склады)) КАК ТоварыНаСкладахОстатки
	//                          |			ПО ВариантыКомплектацииНоменклатурыТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	//                          |		ПО ВТ_ОСТАТКИ.Ссылка = ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец И ВариантыКомплектацииНоменклатурыТовары.Номенклатура.ВидНоменклатуры В (&ВидыКомплектов)
	//                          |ГДЕ
	//                          |	ВТ_ОСТАТКИ.Остаток < ВТ_ОСТАТКИ.Ссылка.вт_МаксимальныйЗапас
	//                          |	И ВариантыКомплектацииНоменклатурыТовары.Ссылка.Основной = ИСТИНА
	//                          |
	//                          |УПОРЯДОЧИТЬ ПО
	//                          |	ГотоваяПродукцияНаименование
	//                          |ИТОГИ
	//                          |	МАКСИМУМ(Остаток),
	//					      |	МАКСИМУМ(Количество),
	//                          |	СУММА(КоличествоКомплектующих),
	//                          |	СУММА(ОстатокКомплекта)
	//                          |ПО
	//                          |	ГотоваяПродукция,
	//						  |	//ГотоваяПродукцияНаименование,
	//                          |	Комплектующее");
	//	МассивСклады = Новый Массив;
	//	МассивСклады.Добавить(РеквизитСкладОсновной);
	//	МассивСклады.Добавить(РеквизитСкладПроизводства);
	//	
	//	//МассивВидыНоменклатуры = Новый Массив;
	//	////МассивВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Готовая продукция ""Комоды"""));
	//	//МассивВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар (пр. ТМЦ)"));
	//	//МассивВидыНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Готовая продукция"));
	//	//
	//	//МассивВидыКомплектов = Новый Массив;
	//	//МассивВидыКомплектов.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Комплектующие"));
	//	//МассивВидыКомплектов.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар (пр. ТМЦ)"));
	//	//
	//	Запрос.УстановитьПараметр("ДатаОстатка", ТекущаяДата());	
	//	Запрос.УстановитьПараметр("Нехватка", Недостача);	
	//	Запрос.УстановитьПараметр("Склады", МассивСклады);
	//	Запрос.УстановитьПараметр("ВидНоменклатуры", МассивВидыНоменклатуры);
	//	Запрос.УстановитьПараметр("ВидыКомплектов",МассивВидыКомплектов);
	//	Запрос.УстановитьПараметр("УчетПоГруппам", ГруппыТоваров.Количество()>0);
	//	Запрос.УстановитьПараметр("ТГруппы",ГруппыТоваров.Выгрузить());
	//	
	//	Объект.Товары.Очистить();
	//	Объект.Комплектующие.Очистить();
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	ВыборкаГП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаГП.Следующий() Цикл
	//		СтрокаТовар = Объект.Товары.Добавить();
	//		СтрокаТовар.номенклатура = ВыборкаГП.ГотоваяПродукция;
	//		СтрокаТовар.ТекущийОстаток = ВыборкаГП.Остаток;
	//		СтрокаТовар.ВариантКомплектации = ВыборкаГП.ВариантКомплектации;
	//		СтрокаТовар.МинОстаток  = ВыборкаГП.ГотоваяПродукция.вт_МинимальныйЗапас; 
	//		СтрокаТовар.МаксОстаток = ВыборкаГП.ГотоваяПродукция.вт_МаксимальныйЗапас;
	//		СтрокаТовар.Количество = ВыборкаГП.Количество;
	//		//СтрокаТовар.Количество = ВыборкаГП.ГотоваяПродукция.вт_МаксимальныйЗапас - ВыборкаГП.Остаток;
	//		
	//		ВыборкаТовары = ВыборкаГП.Выбрать();
	//		Пока ВыборкаТовары.Следующий() Цикл
	//			 СтрокаКомплект = Объект.Комплектующие.Добавить();
	//			 СтрокаКомплект.Номенклатура =  ВыборкаТовары.Комплектующее;
	//			 СтрокаКомплект.ГотоваяПродукция =  ВыборкаТовары.ГотоваяПродукция;
	//			 СтрокаКомплект.ВариантКомплектации =  ВыборкаТовары.ВариантКомплектации;
	//		    // СтрокаКомплект.ТекущийОстаток =  ВыборкаТовары.ОстатокКомплекта;   
	//             СтрокаКомплект.ТекущийОстаток =  ПолучитьОстатокКомплектующего(СтрокаКомплект.Номенклатура,ТекущаяДата());
	//             СтрокаКомплект.Количество =  ВыборкаТовары.КоличествоКомплектующих;
	// 		КонецЦикла;
	//	КонецЦикла;  
	//КонецЕсли;

    ЗаполнитьСтруктуруДерево();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтДеталей(Команда)
	    ЗаполнитьСтруктуруДеревоПоДеталям();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтруктуруДеревоПоДеталям()
	РеквизитПоДеталям = истина;
	ЗначениеДерево = ДанныеФормыВЗначение(РеквизитДерево,Тип("ДеревоЗначений"));
	ЗначениеДерево.Строки.Очистить();
	ТаблКомплектующие = Объект.Комплектующие.Выгрузить();
	ТаблКомплектующие.Свернуть("Номенклатура,ТекущийОстаток","Количество");
	
	Для каждого СтрокаКомпл из ТаблКомплектующие Цикл
		СтрокаПоКомпл = ЗначениеДерево.Строки.Добавить();
	    СтрокаПоКомпл.Номенклатура = СтрокаКомпл.Номенклатура;
		СтрокаПоКомпл.Количество = СтрокаКомпл.Количество/2;
		СтрокаПоКомпл.ТекущийОстаток = СтрокаКомпл.ТекущийОстаток;
		СтрокаПоКомпл.СтрокаГотовойПРодукции = ЛОЖЬ;
		СтрокаПоКомпл.Выбрано=Ложь;
		
		//По таблице комплектов найдем для какой готовой продукции используется
		ОтборГотовойПрод = Новый  Структура("Номенклатура",СтрокаКомпл.Номенклатура);
		СтрокиГотовойПродукции = Объект.Комплектующие.НайтиСтроки(ОтборГотовойПрод);
		Для Каждого СтрокаГПКомплектов из СтрокиГотовойПродукции Цикл
			//Теперь каждый товары получим из таблицы товаров с его остатками и потребностью изготовления
			ОтборКомплектующих = Новый Структура("Номенклатура, ВариантКомплектации",СтрокаГПКомплектов.ГотоваяПродукция, СтрокаГПКомплектов.ВариантКомплектации);
			НайденыСтроки = Объект.Товары.НайтиСтроки(ОтборКомплектующих);
			ДельтаПоКомплектующим = 0;
			Для Каждого СтрокаКомпл из НайденыСтроки Цикл
				НоваяСтрокаГП = СтрокаПоКомпл.Строки.Добавить();
				НоваяСтрокаГП.Номенклатура = СтрокаКомпл.Номенклатура;
				НоваяСтрокаГП.Количество = СтрокаКомпл.Количество;
				НоваяСтрокаГП.ТекущийОстаток = СтрокаКомпл.ТекущийОстаток;
				НоваяСтрокаГП.МинОстаток = СтрокаКомпл.МинОстаток;
				НоваяСтрокаГП.МаксОстаток = СтрокаКомпл.МаксОстаток;
				НоваяСтрокаГП.СтрокаГотовойПРодукции = ИСТИНА;
				НоваяСтрокаГП.Выбрано=Ложь;
		
			КонецЦикла;
			
		КонецЦикла;	
		
		СтрокаПоКомпл.ДельтаПоКомплектующим = СтрокаКомпл.ТекущийОстаток - СтрокаКомпл.Количество;
	КонецЦикла;
	
	ЗначениеДерево.Строки.Сортировать("Номенклатура");
	ЗначениеВДанныеФормы(ЗначениеДерево,РеквизитДерево);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВидОтГотовойПродукции(Команда)
	ЗаполнитьСтруктуруДерево();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПоГруппам(Команда)
	Фрм =ПолучитьФорму("Документ.вт_ПланСборки.Форма.ФормаПодбораГрупп",,ЭтаФорма);
	Фрм.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы="Документ.вт_ПланСборки.Форма.ФормаПодбораГрупп" Тогда
		 ОбработкаЗаполненияТоваровПоГруппам(ВыбранноеЗначение.АдресТоваровВХранилище);
		  ЗАполнитьТоварыСборки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТоваровПоГруппам(АдресХранилища)
	     ТаблГруппы = ПолучитьИзВременногоХранилища(АдресХранилища);
		 ГруппыТоваров.Загрузить(ТаблГруппы);
		 
		// запрос = новый запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		//                       |	Т.ГруппаТоваров
		//                       |ПОМЕСТИТЬ ВТ_ГРУППЫ
		//                       |ИЗ
		//                       |	&Т КАК Т");
		//					   
		//Запрос.УстановитьПараметр("Т",ТаблГруппы);					   
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	ТабДокумент = ПолучитьТабДокументНаСервере();
	ТабДокумент.Показать();
КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокументНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		  Записать();
	КонецЕсли;	
	ПланСборки  = Объект.Ссылка ;	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПланСборки.ПолучитьОбъект().ПолучитьМакет("Макет");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерПланаСборки = ПланСборки.Номер ;
	ОбластьМакета.Параметры.ДатаПланаСборки = ПланСборки.Дата ;
	ТабДокумент.Вывести(ОбластьМакета);

	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаОборудование  = Макет.ПолучитьОбласть("СтрокаОборудование");
	ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
	
	Товары = ДанныеФормыВЗначение(РеквизитДерево,Тип("ДеревоЗначений")).Строки ;
	Для каждого СтрокаОборудование Из Товары Цикл
		Если СтрокаОборудование.Выбрано Тогда
			ОбластьМакетаОборудование.Параметры.НаименованиеОборудования   = СтрокаОборудование.Номенклатура.Наименование ;
			ОбластьМакетаОборудование.Параметры.КоличествоОборудования     = СтрокаОборудование.Количество ;
			ОбластьМакетаОборудование.Параметры.ТекущийОстатокОборудования = СтрокаОборудование.ТекущийОстаток ; 
			ОбластьМакетаОборудование.Параметры.МинОстатокОборудования     = СтрокаОборудование.МинОстаток ;	
			ОбластьМакетаОборудование.Параметры.МаксОстатокОборудования    = СтрокаОборудование.МаксОстаток ;    
			ТабДокумент.Вывести(ОбластьМакетаОборудование); 
			Комплектующие = СтрокаОборудование.Строки ;
			Для каждого СтрокаКомплектующие Из Комплектующие Цикл	
			    ОбластьМакетаКомплектующие.Параметры.НаименованиеКомплектации   = "    "+СтрокаКомплектующие.Номенклатура.Наименование ;
				ОбластьМакетаКомплектующие.Параметры.КоличествоКомплектации     = СтрокаКомплектующие.Количество ;
				ОбластьМакетаКомплектующие.Параметры.ТекущийОстатокКомплектации = СтрокаКомплектующие.ТекущийОстаток ; 
				ОбластьМакетаКомплектующие.Параметры.МинОстатокКомплектации     = СтрокаКомплектующие.МинОстаток ; 
				ОбластьМакетаКомплектующие.Параметры.МаксОстатокКомплектации    = СтрокаКомплектующие.МаксОстаток ;			
				ТабДокумент.Вывести(ОбластьМакетаКомплектующие);     
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
	//
	//ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	//ТабДокумент.Вывести(ОбластьМакета);
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСлева  = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
КонецФункции	
//++
Функция ПолучитьОстатокКомплектующего(Комплектующее,Дата)
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(РеквизитСкладОсновной);
	МассивСкладов.Добавить(РеквизитСкладПроизводства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Дата,
		|			Номенклатура = &Комплектующее
		|				И Склад В (&Склады)) КАК ТоварыНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Комплектующее", Комплектующее);   
	Запрос.УстановитьПараметр("Склады",МассивСкладов);	
	РезультатЗапроса = Запрос.Выполнить();  	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
Возврат ВыборкаДетальныеЗаписи.ВНаличииОстаток;
КонецФункции


&НаКлиенте
Процедура КомандаПечатьПоДеталям(Команда)
	// Вставить содержимое обработчика.
	ТабДокумент = ПолучитьТабДокументПодеталямНаСервере();
	ТабДокумент.Показать();

КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокументПодеталямНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		  Записать();
	КонецЕсли;	
	ПланСборки  = Объект.Ссылка ;	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПланСборки.ПолучитьОбъект().ПолучитьМакет("Макет");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерПланаСборки = ПланСборки.Номер ;
	ОбластьМакета.Параметры.ДатаПланаСборки = ПланСборки.Дата ;
	ТабДокумент.Вывести(ОбластьМакета);

	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаОборудование  = Макет.ПолучитьОбласть("СтрокаОборудование");
	ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
	
	//Для хранения остатка по номенклатуре
	ТаблОстаткиПоДеталям = Новый ТаблицаЗначений;
	ТаблОстаткиПоДеталям.Колонки.Добавить("Номенклатура");
	ТаблОстаткиПоДеталям.Колонки.Добавить("Остаток");
	ТаблОстаткиПоДеталям.Колонки.Добавить("МинОстаток");
	ТаблОстаткиПоДеталям.Колонки.Добавить("МаксОстаток");
	
	//Для хранения количества по сборке
	ТаблПоДеталям = Новый ТаблицаЗначений;
	ТаблПоДеталям.Колонки.Добавить("Номенклатура");
	ТаблПоДеталям.Колонки.Добавить("КоличествоСборки");

	
	Товары = ДанныеФормыВЗначение(РеквизитДерево,Тип("ДеревоЗначений")).Строки ;
	//Считаем итоги по деталям
	Для каждого СтрокаОборудование Из Товары Цикл
		Если СтрокаОборудование.Выбрано Тогда
			Комплектующие = СтрокаОборудование.Строки ;
			
			Если НЕ РеквизитПоДеталям Тогда //Если не в режиме "По деталям", т.е. на верхнем уровне выводится готовая продукция
				Для каждого СтрокаКомплектующие Из Комплектующие Цикл	
					ОтборПоНоменклатуре = Новый Структура("Номенклатура",СтрокаКомплектующие.Номенклатура);
					НайденыСтроки = ТаблОстаткиПоДеталям.НайтиСтроки(ОтборПоНоменклатуре);
					Если НайденыСтроки.Количество()=0 тогда
						НоваяСтрока = ТаблОстаткиПоДеталям.Добавить();
						НоваяСтрока.Номенклатура = СтрокаКомплектующие.Номенклатура;
						НоваяСтрока.Остаток = СтрокаКомплектующие.ТекущийОстаток;
						НоваяСтрока.МинОстаток = СтрокаКомплектующие.МинОстаток;
						НоваяСтрока.МаксОстаток = СтрокаКомплектующие.МаксОстаток;
					иначе
						НайденыСтроки[0].Остаток = Мин(НайденыСтроки[0].Остаток, СтрокаКомплектующие.ТекущийОстаток);
						НайденыСтроки[0].МинОстаток = Мин(НайденыСтроки[0].МинОстаток, СтрокаКомплектующие.МинОстаток);
						НайденыСтроки[0].МаксОстаток = Мин(НайденыСтроки[0].МаксОстаток, СтрокаКомплектующие.МаксОстаток);
					КонецЕсли;
					
					НовСтрока = ТаблПоДеталям.Добавить();
					НовСтрока.Номенклатура = СтрокаКомплектующие.Номенклатура;
					НовСтрока.КоличествоСборки = СтрокаКомплектующие.Количество;
				КонецЦикла;
				
			Иначе //Если "По деталяем", т.е. выводятся детали
				
				НоваяСтрока = ТаблОстаткиПоДеталям.Добавить();
				НоваяСтрока.Номенклатура = СтрокаОборудование.Номенклатура;
				НоваяСтрока.Остаток = СтрокаОборудование.ТекущийОстаток;
				НоваяСтрока.МинОстаток = СтрокаОборудование.МинОстаток;
				НоваяСтрока.МаксОстаток = СтрокаОборудование.МаксОстаток;
				
				НовСтрока = ТаблПоДеталям.Добавить();
				НовСтрока.Номенклатура = СтрокаОборудование.Номенклатура;
				НовСтрока.КоличествоСборки = СтрокаОборудование.Количество;
				
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
	ТаблПоДеталям.Свернуть("Номенклатура","КоличествоСборки");
	
	//выводим итоги по деталям
	Для Каждого СтрокаКомплектующие из ТаблОстаткиПоДеталям Цикл
		ОбластьМакетаКомплектующие.Параметры.НаименованиеКомплектации   = "    "+СтрокаКомплектующие.Номенклатура.Наименование ;
		ОбластьМакетаКомплектующие.Параметры.ТекущийОстатокКомплектации = СтрокаКомплектующие.Остаток ; 
		ОбластьМакетаКомплектующие.Параметры.МинОстатокКомплектации     = СтрокаКомплектующие.МинОстаток ; 
		ОбластьМакетаКомплектующие.Параметры.МаксОстатокКомплектации    = СтрокаКомплектующие.МаксОстаток ;			
		
		ОтборПоНоменклатуре = Новый Структура("Номенклатура",СтрокаКомплектующие.Номенклатура);
		НайденыСтроки = ТаблПоДеталям.НайтиСтроки(ОтборПоНоменклатуре);
		Если НайденыСтроки.Количество()=0 тогда
			ОбластьМакетаКомплектующие.Параметры.КоличествоКомплектации     = 0 ;
		иначе
			ОбластьМакетаКомплектующие.Параметры.КоличествоКомплектации     = НайденыСтроки[0].КоличествоСборки ;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаКомплектующие);
		
	КонецЦикла;
	
	//
	//ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	//ТабДокумент.Вывести(ОбластьМакета);
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСлева  = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
КонецФункции	

&НаСервере
Процедура ОтметитьВсёНаСервере()
	рДерево = РеквизитФормыВЗначение("РеквизитДерево");
	Для каждого СтрокаДерева из рДерево.Строки Цикл
		СтрокаДерева.Выбрано = НЕ СтрокаДерева.Выбрано;
	КонецЦикла;	
	ЗначениеВРеквизитФормы(рДерево, "РеквизитДерево");
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсё(Команда)
	ОтметитьВсёНаСервере();
КонецПроцедуры


&НаСервере
Функция КомандаПечатьПоДеталямНедостачиНаСервере()
		
	Если Объект.Ссылка.Пустая() Тогда
		  Записать();
	КонецЕсли;	
	ПланСборки  = Объект.Ссылка ;	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПланСборки.ПолучитьОбъект().ПолучитьМакет("Макет");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерПланаСборки = ПланСборки.Номер ;
	ОбластьМакета.Параметры.ДатаПланаСборки = ПланСборки.Дата ;
	ТабДокумент.Вывести(ОбластьМакета);

	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаОборудование  = Макет.ПолучитьОбласть("СтрокаОборудование");
	ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
	
	//Для хранения остатка по номенклатуре
	ТаблОстаткиПоДеталям = Новый ТаблицаЗначений;
	ТаблОстаткиПоДеталям.Колонки.Добавить("Номенклатура");
	ТаблОстаткиПоДеталям.Колонки.Добавить("Остаток");
	ТаблОстаткиПоДеталям.Колонки.Добавить("МинОстаток");
	ТаблОстаткиПоДеталям.Колонки.Добавить("МаксОстаток");
	
	//Для хранения количества по сборке
	ТаблПоДеталям = Новый ТаблицаЗначений;
	ТаблПоДеталям.Колонки.Добавить("Номенклатура");
	ТаблПоДеталям.Колонки.Добавить("КоличествоСборки");

	
	Товары = ДанныеФормыВЗначение(РеквизитДерево,Тип("ДеревоЗначений")).Строки ;
	//Считаем итоги по деталям
	Для каждого СтрокаОборудование Из Товары Цикл
		Если СтрокаОборудование.Выбрано Тогда
			Комплектующие = СтрокаОборудование.Строки ;
			Для каждого СтрокаКомплектующие Из Комплектующие Цикл	
				ОтборПоНоменклатуре = Новый Структура("Номенклатура",СтрокаКомплектующие.Номенклатура);
				НайденыСтроки = ТаблОстаткиПоДеталям.НайтиСтроки(ОтборПоНоменклатуре);
				Если НайденыСтроки.Количество()=0 тогда
					 НоваяСтрока = ТаблОстаткиПоДеталям.Добавить();
					 НоваяСтрока.Номенклатура = СтрокаКомплектующие.Номенклатура;
					 НоваяСтрока.Остаток = СтрокаКомплектующие.ТекущийОстаток;
					 НоваяСтрока.МинОстаток = СтрокаКомплектующие.МинОстаток;
					 НоваяСтрока.МаксОстаток = СтрокаКомплектующие.МаксОстаток;
				иначе
					 НайденыСтроки[0].Остаток = Мин(НайденыСтроки[0].Остаток, СтрокаКомплектующие.ТекущийОстаток);
					 НайденыСтроки[0].МинОстаток = Мин(НайденыСтроки[0].МинОстаток, СтрокаКомплектующие.МинОстаток);
					 НайденыСтроки[0].МаксОстаток = Мин(НайденыСтроки[0].МаксОстаток, СтрокаКомплектующие.МаксОстаток);
				КонецЕсли;
				
				НовСтрока = ТаблПоДеталям.Добавить();
				НовСтрока.Номенклатура = СтрокаКомплектующие.Номенклатура;
				НовСтрока.КоличествоСборки = СтрокаКомплектующие.Количество;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	ТаблПоДеталям.Свернуть("Номенклатура","КоличествоСборки");
	
	//выводим итоги по деталям
	Для Каждого СтрокаКомплектующие из ТаблОстаткиПоДеталям Цикл
		ОбластьМакетаКомплектующие.Параметры.НаименованиеКомплектации   = "    "+СтрокаКомплектующие.Номенклатура.Наименование ;
		ОбластьМакетаКомплектующие.Параметры.ТекущийОстатокКомплектации = СтрокаКомплектующие.Остаток ; 
		ОбластьМакетаКомплектующие.Параметры.МинОстатокКомплектации     = СтрокаКомплектующие.МинОстаток ; 
		ОбластьМакетаКомплектующие.Параметры.МаксОстатокКомплектации    = СтрокаКомплектующие.МаксОстаток ;			
		
		ОтборПоНоменклатуре = Новый Структура("Номенклатура",СтрокаКомплектующие.Номенклатура);
		НайденыСтроки = ТаблПоДеталям.НайтиСтроки(ОтборПоНоменклатуре);
		Если НайденыСтроки.Количество()=0 тогда
			ОбластьМакетаКомплектующие.Параметры.КоличествоКомплектации     = 0 ;
		иначе
			ОбластьМакетаКомплектующие.Параметры.КоличествоКомплектации     = НайденыСтроки[0].КоличествоСборки ;
		КонецЕсли;
		Если ОбластьМакетаКомплектующие.Параметры.ТекущийОстатокКомплектации<ОбластьМакетаКомплектующие.Параметры.КоличествоКомплектации Тогда
			ТабДокумент.Вывести(ОбластьМакетаКомплектующие);
		КонецЕсли;	
		
	КонецЦикла;
	
	//
	//ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	//ТабДокумент.Вывести(ОбластьМакета);
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСлева  = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ПолеСправа = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	 
КонецФункции


&НаКлиенте
Процедура КомандаПечатьПоДеталямНедостачи(Команда)
	ТабДокумент = КомандаПечатьПоДеталямНедостачиНаСервере();
	ТабДокумент.Показать(); 
КонецПроцедуры

//--