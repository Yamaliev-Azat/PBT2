&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
//	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	//МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	ЗаполнитьПоДаннымВХранилище();
	
	ВалютаСтр = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСумма.Заголовок = НСтр("ru = 'Сумма ('") + ВалютаСтр + ")";
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыЦена.Заголовок = НСтр("ru = 'Цена ('") + ВалютаСтр + ")";
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр   = Параметры.ЗапретитьИзменятьТовары;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Параметры.ЗапретитьИзменятьТовары;
	Элементы.ТоварыКоличество.ТолькоПросмотр     = Параметры.ЗапретитьИзменятьТовары;
	Элементы.Склад.ТолькоПросмотр                = Параметры.ЗапретитьИзменятьТовары;
	Элементы.Организация.ТолькоПросмотр          = Параметры.ЗапретитьИзменятьТовары;
	Элементы.Товары.ИзменятьСоставСтрок          = Не Параметры.ЗапретитьИзменятьТовары;
	Элементы.Заполнить.Доступность               = Не Параметры.ЗапретитьИзменятьТовары;
	
    //++ 10.06.2019
	//Элементы.ТоварыУказатьСерии.Видимость = Ложь;
	//--10.06.2019

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗагрузитьДанныеИзТСД", "Видимость",          Не ЗначениеЗаполнено(Объект.ДокументОснование));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоискПоШтрихкоду", "Видимость",              Не ЗначениеЗаполнено(Объект.ДокументОснование));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПолучитьВес", "Видимость",                   Не ЗначениеЗаполнено(Объект.ДокументОснование));
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
			)
		);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.вт_ПроизводствоСырье,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
			)
		);
		//Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	КонецЕсли;
	//
	//ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.вт_ОтчетПроизводства));
	//СтруктураПараметры = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.вт_ОтчетПроизводства);
	//СтруктураПараметры.ИмяТЧТовары = "ТаблицаСырье";
	//ПараметрыУказанияСерийСырья = Новый ФиксированнаяСтруктура(СтруктураПараметры); 
	//
	РеквизитИспользоватьОборудование=КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ВидЦенПлановойСебестоимости");
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ОтветственныйФизЛицо = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
		Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение        = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ПодразделениеПроизводства");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ОрганизацияПроизводства");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СкладПроизводства");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СкладБрак) Тогда
			Объект.СкладБрак = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СкладБрака");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяДоходов) ТОгда
			Объект.СтатьяДоходов = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СтатьяДоходовПроизводство");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперацииПроизводства) Тогда
			Объект.ВидОперацииПроизводства = Перечисления.вт_ВидыОперацийПроизводства.СобственноеПроизводство;
		КонецЕсли;
		
		Объект.ОтразитьВРеглУчете = Истина;
		Объект.ОтразитьВПроизводственномУчете = Истина;
		
		РеквизитПоказатьОборудование =  РеквизитИспользоватьОборудование;
	КонецЕсли;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	Элементы.Партнер.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");

КонецПроцедуры


&НаСервере
Процедура ЗаписатьИзмененияВремениПростояОборудования(СтруктураПараметров)
 		 пАдресХранилища = СтруктураПараметров.АдресХранилища;
		 пОборудование   = СтруктураПараметров.Оборудование;
		 пКлючСвязи      = СтруктураПараметров.КлючСвязи;
		 
		 пНоваяТаблицаПростоев = ПолучитьИзВременногоХранилища(пАдресХранилища);
		 ОтборСтрок = Новый Структура("Оборудование,КлючСвязиОборудования",пОборудование,пКлючСвязи);
		 НайтиСтроки = Объект.вт_ПростоиОборудования.НайтиСтроки(ОтборСтрок);
		 Для Каждого СтрокаУдаления из НайтиСтроки Цикл
			 Объект.вт_ПростоиОборудования.Удалить(СтрокаУдаления);
		 КонецЦикла;
		 
		 Для Каждого пСтрокаПростоя из пНоваяТаблицаПростоев Цикл
			 НоваяСтрокаПростоя = Объект.вт_ПростоиОборудования.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрокаПростоя, пСтрокаПростоя);
		 КонецЦикла;
		 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ОбновленыПериодыПростоев" Тогда
		ЗаписатьИзмененияВремениПростояОборудования(Параметр);
		//ОбновитьДанныеКолонкиВремяПростоя();
		ОбновитьДанныеКолонкиВремяРаботыОборудование();
		ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
		ОбновитьДанныеКолонкиВремяПроизводстваШтФакт(); 
	КонецЕсли;
	// Подсистема "Свойства"
	//Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
	//	ОбновитьЭлементыДополнительныхРеквизитов();
	//КонецЕсли;
	//
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.ЗаполнитьСырье ИЛИ (Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.вт_ПроизводствоСырье.Количество()=0) Тогда
		Для Каждого текДанные из Объект.Товары Цикл
			втЗаполнитьСырьеСервер(текДанные.КодСтроки, текДанные.ВариантПроизводства, текДанные.Количество, текДанные.БракКолВо,ИСТИНА);
			Если Параметры.ОбнулитьКоличествоПродукции Тогда
				текДанные.Количество = 0;
				текДанные.КоличествоПлан = 0;
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;
	
	Если Элементы.Заполнить.Доступность Тогда
		Элементы.Заполнить.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		МассивОтборов = Новый Массив;
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",Ложь);
		МассивОтборов.Добавить(НовыйПараметр);
		
		Элементы.Склад.ПараметрыВыбора = Новый ФиксированныйМассив(МассивОтборов);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.РеквизитДеньНочь=1;
		Объект.ОтразитьВРеглУчете = Истина;
		Объект.ОтразитьВПроизводственномУчете = Истина;
	Иначе
		ЭтаФорма.РеквизитДеньНочь=Объект.ПериодДняПроизводства;
	КонецЕсли;
	
	ОбновитьДанныеКолонкиПроизводительность();
	ОбновитьДанныеКолонкиВремяРаботыОборудование();	
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	//ОбновитьДанныеКолонкиВремяПроизводстваШтФакт(); 
	
	Элементы.вт_ОборудованиеПроизводства.Видимость= РеквизитИспользоватьОборудование;
	Элементы.РеквизитПоказатьОборудование.Видимость = РеквизитИспользоватьОборудование;
	
	Если НЕ Объект.Ссылка.Пустая() И Объект.вт_ОборудованиеПроизводства.Количество()=0 Тогда
		Элементы.вт_ОборудованиеПроизводства.Видимость=Ложь;
	ИначеЕсли 	НЕ Объект.Ссылка.Пустая() И Объект.вт_ОборудованиеПроизводства.Количество()>0 Тогда
		РеквизитПоказатьОборудование=Истина;
	ИначеЕсли Объект.Ссылка.Пустая() И Объект.вт_ОборудованиеПроизводства.Количество()=0 И Объект.Товары.Количество()>0 Тогда
		Элементы.вт_ОборудованиеПроизводства.Видимость=Ложь;
		Элементы.РеквизитПоказатьОборудование.Видимость = Истина;
		РеквизитПоказатьОборудование=Ложь;
	КонецЕсли;
	ЗаполнитьРасхождение_вт_ПроизводствоСырье();
	УстановитьУсловноеОформлениеНаСервере();	
	УстановитьВидимостьГруппыКонтрагента();
	УстановитьВидимостьГруппыОперации();
	
	ПараметрыУказанияСерий = ПолучитьПараметрыУказанияСерий();

	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено,ЭтаФорма, "СканерШтрихкода");

	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	//МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	//++ 03.06.2019
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	//--
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//++
	//Элементы.АналитикаДоходов.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.СтатьяДоходов);
	//--
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	
	//Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ОбновитьДанныеКолонкиПроизводительность();
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
//	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
//	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Объект.ОтразитьВРеглУчете И Не Объект.ОтразитьВПроизводственномУчете тогда
		Сообщ = Новый СообщениеПользователю;
		Сообщ.Текст = "Необходимо указать хотя бы один способ отражения (регламентированный или производственный)";
		Сообщ.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	
	СтрокиДляУдаления = Новый Массив;
	ОтборТоваров = новый Структура("Номенклатура,КодСтроки");
	
	Для Каждого СтрокаТовара из ТекущийОбъект.Товары Цикл
		Если СтрокаТовара.КодСтроки = 0 ИЛИ Не ЗначениеЗаполнено(СтрокаТовара.КодСтроки) ТОгда
			ОтборТоваров = новый Структура("Номенклатура");
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого СтрокаСырье из ТекущийОбъект.вт_ПроизводствоСырье Цикл
		ОтборТоваров.Номенклатура = СтрокаСырье.ГотоваяПродукция;
		Если ОтборТоваров.Свойство("КодСтроки") Тогда
			ОтборТоваров.КодСтроки = СтрокаСырье.КлючСвязиСтроки;
		КонецЕсли;
		
		НайденоСтрок = ТекущийОбъект.Товары.НайтиСтроки(ОтборТоваров);
		Если НайденоСтрок.Количество()=0  ИЛИ Не ЗначениеЗаполнено(СтрокаСырье.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(СтрокаСырье.ГотоваяПродукция) Тогда
			СтрокиДляУдаления.Добавить(СтрокаСырье);
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого СтрокаСырье из СтрокиДляУдаления Цикл
		ТекущийОбъект.вт_ПроизводствоСырье.Удалить(СтрокаСырье);
	КонецЦикла;
	
	СтрокиДляУдаления = Новый Массив;
	Для Каждого СтрокаВариантБрака из ТекущийОбъект.вт_БракДробленка Цикл
		ОтборТоваров.Номенклатура = СтрокаВариантБрака.ГотоваяПродукция;
		Если ОтборТоваров.Свойство("КодСтроки") Тогда
			ОтборТоваров.КодСтроки = СтрокаВариантБрака.КлючСвязиСтроки;
		КонецЕсли;	
		НайденоСтрок = ТекущийОбъект.Товары.НайтиСтроки(ОтборТоваров);
		Если НайденоСтрок.Количество()=0  ИЛИ Не ЗначениеЗаполнено(СтрокаВариантБрака.Дробленка) ИЛИ НЕ ЗначениеЗаполнено(СтрокаВариантБрака.ГотоваяПродукция) Тогда
			СтрокиДляУдаления.Добавить(СтрокаВариантБрака);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВариантБрака из СтрокиДляУдаления Цикл
		ТекущийОбъект.вт_БракДробленка.Удалить(СтрокаВариантБрака);
	КонецЦикла;
	
    ЗаписьДанныхДопРасходов(ТекущийОбъект);

	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	//Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ОбновитьДанныеКолонкиПроизводительность();
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт(); 
	ЗаполнитьРасхождение_вт_ПроизводствоСырье();

//	ЗаписьДанныхДопРасходов(ТекущийОбъект);
КонецПроцедуры

&НасервереБезКонтекста
Функция ВводДокументаПрочиеДоходыРасходы(ЭтотОбъект, СсылкаДокРасход, ИмяТЧ, ИмяПоляСуммаБезНДС)
		ДокРасход = Документы.ПрочиеДоходыРасходы.ПустаяСсылка();
		
		Если СсылкаДокРасход.Пустая() И ЭтотОбъект[ИмяТЧ].Количество() > 0 Тогда
			
			ДокРасход = Документы.ПрочиеДоходыРасходы.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(ДокРасход,ЭтотОбъект,"Организация, Дата");
			ДокРасход.Дата = ЭтотОбъект.Дата + 1;
			ДокРасход.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			ДокРасход.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ДокРасход.ХозяйственнаяОперация =  перечисления.ХозяйственныеОперации.ПрочиеРасходы;
			ДокРасход.Комментарий = "#Служебный документ для производства ";
		ИначеЕсли НЕ СсылкаДокРасход.Пустая() Тогда
			ДокРасход = СсылкаДокРасход.ПолучитьОбъект();
			ДокРасход.Дата = ЭтотОбъект.Дата + 1;
			ДокРасход.ПрочиеРасходы.Очистить();
		КонецЕсли;
		
		Для Каждого СтрокаРасхода из ЭтотОбъект[ИмяТЧ] Цикл
			//Для Каждого СтрокаТовара из ТекущийОбъект.Товары Цикл
			ПрочийРасход 						= ДокРасход.ПрочиеРасходы.Добавить();
			ПрочийРасход.Подразделение 		 	= ЭтотОбъект.Подразделение;
			
			Если ИмяТЧ="Сотрудники" Тогда 
				ПрочийРасход.СтатьяРасходов 		= КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СтатьяРасходовЗарплата");
			ИначеЕсли   ИмяТЧ="Операции" Тогда  
				ПрочийРасход.СтатьяРасходов 		= КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СтатьяРасходовОперации");
			ИначеЕсли   ИмяТЧ="ПрочиеРасходы" Тогда 
				ПрочийРасход.СтатьяРасходов 		= СтрокаРасхода.СтатьяРасходов;
			КонецЕсли;
			ПрочийРасход.АналитикаРасходов 		= ЭтотОбъект.Ссылка;//  СтрокаТовара.Номенклатура;
			ПрочийРасход.СтатьяАктивовПассивов  = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
			ПрочийРасход.Сумма 					= СтрокаРасхода.Сумма;// чСумма;
			ПрочийРасход.СуммаБезНДС 			= СтрокаРасхода[ИмяПоляСуммаБезНДС];// чСуммаБезНДС;
			ПрочийРасход.СуммаРегл 				= СтрокаРасхода.Сумма;//чСумма;
		КонецЦикла;
		
		МетаДокРасход = Метаданные.Документы.ПрочиеДоходыРасходы;
		Если ТипЗнч(ДокРасход)=ТИп("ДокументОбъект.ПрочиеДоходыРасходы") Тогда
			Если ЭтотОбъект[ИмяТЧ].Количество() > 0 Тогда
				ДокРасход.ПометкаУдаления = Ложь;
				ДокРасход.Записать(РежимЗаписиДокумента.Запись);				
			ИначеЕсли ПравоДоступа("Удаление",МетаДокРасход) Тогда				
				ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);				
				ДокРасход.ПометкаУдаления = Истина;
				ДокРасход.Записать(РежимЗаписиДокумента.Запись);
			Иначе 
				ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;
		
		Возврат ДокРасход.Ссылка;
		
Конецфункции

&наСервереБезКонтекста
Процедура ЗаписьДанныхДопРасходов(ТекущийОбъект)
	
	ТекущийОбъект.ДокументПрочихРасходов = ВводДокументаПрочиеДоходыРасходы(ТекущийОбъект,ТекущийОбъект.ДокументПрочихРасходов,"ПрочиеРасходы","СуммаБезНДС");
	
	ТекущийОбъект.ДокументРасходовЗарплата = ВводДокументаПрочиеДоходыРасходы(ТекущийОбъект,ТекущийОбъект.ДокументРасходовЗарплата,"Сотрудники","Сумма");
	
	//ТекущийОбъект.ДокументРасходовОперации = ВводДокументаПрочиеДоходыРасходы(ТекущийОбъект,ТекущийОбъект.ДокументРасходовОперации,"Операции","Сумма");
	
		////////////////////////////////////
		//Прочие расходы
		////////////////////////////////////
		
		//ДокРасход = Неопределено;	
		//Если ТекущийОбъект.ДокументПрочихРасходов.Пустая() И ТекущийОбъект.ПрочиеРасходы.Количество() > 0 
		//	 И НЕ ЗначениеЗаполнено(ТекущийОбъект.Контрагент) И ТекущийОбъект.ВидОперацииПроизводства <> Перечисления.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства Тогда
		//	ДокРасход = Документы.ПрочиеДоходыРасходы.СоздатьДокумент();
		//	
		//	ЗаполнитьЗначенияСвойств(ДокРасход,ТекущийОбъект,"Организация, Дата");
		//	ДокРасход.Дата = ДокРасход.Дата + 1;
		//	ДокРасход.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//	ДокРасход.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//	ДокРасход.ХозяйственнаяОперация =  перечисления.ХозяйственныеОперации.ПрочиеРасходы;
		//	ДокРасход.Комментарий = "#Служебный документ для производства ";
		//ИначеЕсли НЕ ТекущийОбъект.ДокументПрочихРасходов.Пустая() Тогда
		//	ДокРасход = ТекущийОбъект.ДокументПрочихРасходов.ПолучитьОбъект();
		//	ДокРасход.Дата = ТекущийОбъект.Дата + 1;
		//	ДокРасход.ПрочиеРасходы.Очистить();
		//КонецЕсли;
		//
		//ОбщееКоличество = ТекущийОбъект.Товары.Итог("Количество");
		//Если ДокРасход <> Неопределено И НЕ ЗначениеЗаполнено(ТекущийОбъект.Контрагент) И ТекущийОбъект.ВидОперацииПроизводства <> Перечисления.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства  Тогда
		//	//Если ТекущийОбъект.ПрочиеРасходы.Количество() > 0 Тогда			
		//		Для Каждого СтрокаРасхода из ТекущийОбъект.ПрочиеРасходы Цикл
		//			СуммаРасходабезНДС = СтрокаРасхода.СуммаБезНДС;
		//			СуммаРасхода = СтрокаРасхода.Сумма;
		//			//Для Каждого СтрокаТовара из ТекущийОбъект.Товары Цикл
		//			ПрочийРасход = ДокРасход.ПрочиеРасходы.Добавить();
		//			ПрочийРасход.Подразделение = ТекущийОбъект.Подразделение;
		//			ПрочийРасход.СтатьяРасходов = СтрокаРасхода.СтатьяРасходов;
		//			ПрочийРасход.АналитикаРасходов = ТекущийОбъект.Ссылка;//  СтрокаТовара.Номенклатура;
		//			ПрочийРасход.СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
		//			ПрочийРасход.Сумма = СтрокаРасхода.Сумма;// чСумма;
		//			ПрочийРасход.СуммаБезНДС = СтрокаРасхода.СуммаБезНДС;// чСуммаБезНДС;
		//			ПрочийРасход.СуммаРегл = СтрокаРасхода.Сумма;//чСумма;
		//		КонецЦикла;
		//	//ИначеЕсли ДокРасход<> Неопределено Тогда 
		//	//	ДокРасход.ПометкаУдаления = Истина;
		//	//КонецЕсли;	
		//КонецЕсли;
		//
		//МетаДокРасход = Метаданные.Документы.ПрочиеДоходыРасходы;
		//Если ДокРасход <> Неопределено Тогда
		//	Если ТекущийОбъект.ПрочиеРасходы.Количество() > 0 Тогда
		//		ДокРасход.Записать(РежимЗаписиДокумента.Запись);
		//		ТекущийОбъект.ДокументПрочихРасходов = ДокРасход.Ссылка;
		//	ИначеЕсли ПравоДоступа("Удаление",МетаДокРасход) Тогда				
		//		ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);				
		//		ДокРасход.ПометкаУдаления = Истина;
		//		ДокРасход.Записать(РежимЗаписиДокумента.Запись);
		//	Иначе 
		//		ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//	КонецЕсли;
		//КонецЕсли;
		
		////////////////////////////////////
		//Расходы по ЗП
		////////////////////////////////////
		//ДокРасход = Неопределено;	
		//Если ТекущийОбъект.ДокументРасходовЗарплата.Пустая() И ТекущийОбъект.Сотрудники.Количество() > 0 Тогда
		//	ДокРасход = Документы.ПрочиеДоходыРасходы.СоздатьДокумент();
		//	
		//	ЗаполнитьЗначенияСвойств(ДокРасход,ТекущийОбъект,"Организация, Дата");
		//	ДокРасход.Дата = ДокРасход.Дата + 1;
		//	ДокРасход.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//	ДокРасход.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//	ДокРасход.ХозяйственнаяОперация =  перечисления.ХозяйственныеОперации.ПрочиеРасходы;
		//	ДокРасход.Комментарий = "#Служебный документ для производства - расходы по заработку";
		//ИначеЕсли НЕ ТекущийОбъект.ДокументРасходовЗарплата.Пустая() Тогда
		//	ДокРасход = ТекущийОбъект.ДокументРасходовЗарплата.ПолучитьОбъект();
		//	ДокРасход.Дата = ТекущийОбъект.Дата + 1;
		//	ДокРасход.ПрочиеРасходы.Очистить();
		//КонецЕсли;
		//Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		//	Для Каждого СтрокаРасхода из ТекущийОбъект.Сотрудники Цикл
		//		СуммаРасходабезНДС = СтрокаРасхода.Сумма;
		//		СуммаРасхода = СтрокаРасхода.Сумма;
		//		//Для Каждого СтрокаТовара из ТекущийОбъект.Товары Цикл
		//		ПрочийРасход = ДокРасход.ПрочиеРасходы.Добавить();
		//		ПрочийРасход.СтатьяРасходов = Константы.вт_СтатьяРасходовЗарплата.Получить();
		//		ПрочийРасход.АналитикаРасходов = ТекущийОбъект.Ссылка;// СтрокаТовара.Номенклатура;
		//		ПрочийРасход.СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
		//		
		//		//чСумма = СтрокаРасхода.Сумма * (СтрокаТовара.Количество / ОбщееКоличество);
		//		//чСуммаБезНДС = СтрокаРасхода.Сумма * (СтрокаТовара.Количество / ОбщееКоличество);
		//		
		//		ПрочийРасход.Сумма = СтрокаРасхода.Сумма; //чСумма;
		//		ПрочийРасход.СуммаБезНДС = СтрокаРасхода.Сумма; // чСуммаБезНДС;
		//		ПрочийРасход.СуммаРегл = СтрокаРасхода.Сумма; //чСумма;
		//		//КонецЦикла;
		//	КонецЦикла;   		
		//КонецЕсли;                            		
		//
		//МетаДокРасход = Метаданные.Документы.ПрочиеДоходыРасходы;
		//Если ДокРасход <> Неопределено Тогда
		//	Если ТекущийОбъект.Сотрудники.Количество() > 0 Тогда
		//		ДокРасход.Записать(РежимЗаписиДокумента.Запись);
		//		ТекущийОбъект.ДокументРасходовЗарплата = ДокРасход.Ссылка;
		//	ИначеЕсли ПравоДоступа("Удаление",МетаДокРасход) Тогда				
		//		ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);				
		//		ДокРасход.ПометкаУдаления = Истина;
		//		ДокРасход.Записать(РежимЗаписиДокумента.Запись);	
		//	Иначе 
		//		ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//	КонецЕсли;
		//КонецЕсли;
		
		////////////////////////////////////
		//Расходы по операциям
		////////////////////////////////////
		//ДокРасход = Неопределено;	
		//Если ТекущийОбъект.ДокументРасходовОперации.Пустая() И ТекущийОбъект.Операции.Количество() > 0 Тогда
		//	ДокРасход = Документы.ПрочиеДоходыРасходы.СоздатьДокумент();
		//	
		//	ЗаполнитьЗначенияСвойств(ДокРасход,ТекущийОбъект,"Организация, Дата");
		//	
		//	ДокРасход.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//	ДокРасход.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//	ДокРасход.ХозяйственнаяОперация =  перечисления.ХозяйственныеОперации.ПрочиеРасходы;
		//	ДокРасход.Комментарий = "#Служебный документ для производства - себестоимость технологических операций";
		//ИначеЕсли НЕ ТекущийОбъект.ДокументРасходовОперации.Пустая() Тогда
		//	ДокРасход = ТекущийОбъект.ДокументРасходовОперации.ПолучитьОбъект();
		//	ДокРасход.Дата = ТекущийОбъект.Дата;
		//	ДокРасход.ПрочиеРасходы.Очистить();
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		//	Для Каждого СтрокаРасхода из ТекущийОбъект.Операции Цикл
		//		СуммаРасходабезНДС = СтрокаРасхода.Сумма;
		//		СуммаРасхода = СтрокаРасхода.Сумма;
		//		//Для Каждого СтрокаТовара из ТекущийОбъект.Товары Цикл
		//		ПрочийРасход = ДокРасход.ПрочиеРасходы.Добавить();
		//		ПрочийРасход.СтатьяРасходов = Константы.вт_СтатьяРасходовОперации.Получить();
		//		ПрочийРасход.АналитикаРасходов = ТекущийОбъект.Ссылка;// СтрокаТовара.Номенклатура;
		//		ПрочийРасход.СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
		//		
		//		//чСумма = СтрокаРасхода.Сумма * (СтрокаТовара.Количество / ОбщееКоличество);
		//		//чСуммаБезНДС = СтрокаРасхода.Сумма * (СтрокаТовара.Количество / ОбщееКоличество);
		//		
		//		ПрочийРасход.Сумма = СтрокаРасхода.Сумма; // чСумма;
		//		ПрочийРасход.СуммаБезНДС = СтрокаРасхода.Сумма;// чСуммаБезНДС;
		//		ПрочийРасход.СуммаРегл = СтрокаРасхода.Сумма;//чСумма;
		//		//КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
		//
		//Если ДокРасход <> Неопределено Тогда
		//	ДокРасход.Записать(РежимЗаписиДокумента.Запись);
		//	ТекущийОбъект.ДокументРасходовОперации = ДокРасход.Ссылка;
		//КонецЕсли;
		
		
	КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ОприходованиеИзлишковТоваров", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидЦены)
		И Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить цены по виду цен ""%ВидЦены%""?'");	
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%ВидЦены%", Объект.ВидЦены);
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииСервер();	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	ФинансыКлиент.СтатьяДоходовПриИзменении(Объект, Элементы);
	СтатьяДоходовПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаСервере
Функция ПолучитьВариантГотовойПродукции(Номенклатура)
 Возврат вт_ОбщийМодульПроизводства.ПолучитьВариантПроизводстваПродукции(Номенклатура).Ссылка;	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", Новый Структура("Дата, Валюта, ВидЦены", Объект.Дата, ВалютаУправленческогоУчета, Объект.ВидЦены));
	//СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	//СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.ВариантПроизводства = ПолучитьВариантГотовойПродукции(ТекущаяСтрока.Номенклатура); 
	ТекущаяСтрока.МатериалОтхода = ПолучитьЗначениеРеквизитаОбъекта(ТекущаяСтрока.ВариантПроизводства,"МатералЛитника");
	ТекущаяСтрока.Цена  = 1;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	вт_ОбработкаПересчетОбъемаОтходовСтрока(ТекущаяСтрока);
	приИзмененииВариантаПроизводства();
	УстановитьОтборПоГотовойПродукции();
	ОбновитьДанныеКолонкиПроизводительность();
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", Новый Структура("Дата, Валюта, ВидЦены", Объект.Дата, ВалютаУправленческогоУчета, Объект.ВидЦены));
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
 
	ТекущаяСтрока.КоличествоПлан = ТекущаяСтрока.Количество + ТекущаяСтрока.БракКолВо;
	ПриИзмененииКоличестваПланСервер();
	ПересчетКоличестваФакт();
	ПересчитатьВесОбщийКлиент();
	ОбновитьДанныеКолонкиПроизводительность();
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();


	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ТоварыНомерГТДОбработкаВыбора()

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ИмяПоляКоличество = "Количество";
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	
	//НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы,ИмяПоляКоличество);
	//Если НоваяСтрока <> Неопределено Тогда
	//	
	//	СтруктураДействий = Новый Структура;
	//	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
	//	
	//	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	//	
	//КонецЕсли;
	
	//ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы,ИмяПоляКоличество);
КонецПроцедуры // РазбитьСтроку()

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В документе не заполнена таблица ""Товары"". Цены не могут быть заполнены'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары","Объект");		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указан вид цены'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВидЦены","Объект");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСебестоимости(Команда)
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В документе не заполнена таблица ""Товары"". Цены не могут быть заполнены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Товары", "Объект");		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЦеныПоСебестоимостиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.Количество = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗаполнитьНомераГТД(Команда)
	
	ФинансыКлиент.ЗаполнитьНомераГТДвТабличнойЧасти(Объект.Товары);
	
КонецПроцедуры // ЗаполнитьНомераГТД()

&НаКлиенте
Процедура ЗаполнитьНомераГТДвВыделенныхСтроках(Команда)
	
	ФинансыКлиент.ЗаполнитьНомераГТДвТабличнойЧасти(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры // ЗаполнитьНомераГТДвВыделенныхСтроках()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)

	Если Не ЗначениеЗаполнено(Объект.ДокументОснование)Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан документ инвентаризации", ЭтаФорма);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьПоОснованиюНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено, НеИспользоватьУпаковки", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Истина, Истина);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПриИзмененииСервер()
	Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПриИзмененииСервер()
	//++
	//Если Не ЗначениеЗаполнено(Объект.АналитикаДоходов) Тогда
	//	Объект.АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
	//		Объект.СтатьяДоходов,
	//		Объект,
	//		Объект.Подразделение
	//	);
	//КонецЕсли;
	//--
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	Возврат ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		 , // Выделенные строки (заполнять во всех строках)
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, КолонкиПоЗначению",
			Объект.Дата,
			Константы.ВалютаУправленческогоУчета.Получить(),
			Объект.ВидЦены,
			Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка())
		),
		СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоСебестоимостиСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	ЗапросПредварительныхДанных = Новый Запрос;
	ЗапросПредварительныхДанных.Текст =  
	"ВЫБРАТЬ
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|ГДЕ
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен
	|	И РасчетСебестоимостиТоваровОрганизации.Организация = &Организация
	|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)";
	
	ЗапросПредварительныхДанных.УстановитьПараметр("Дата", Объект.Дата);
	ЗапросПредварительныхДанных.УстановитьПараметр("Организация", Объект.Организация);
	ПредварительныеДанные = ЗапросПредварительныхДанных.Выполнить().Выбрать();
	
	Если ПредварительныеДанные.Следующий() Тогда
		ПредварительныйРасчет = ПредварительныеДанные.ПредварительныйРасчет;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить цены по себестоимости в документе %Документ%: на %Период% не произведен расчет себестоимости.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Объект.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Формат(НачалоМесяца(Объект.Дата),"ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат ПродажиСервер.ЗаполнитьЦеныПоСебестоимости(
		Объект.Товары, // Табличная часть
		, // Выделенные строки (заполнять во всех строках)
		Новый Структура( // Параметры заполнения
			"Дата, Организация, Склад, ПредварительныйРасчет, ДругиеИменаКолонок",
			Объект.Дата,
			Объект.Организация,
			Объект.Склад,
			ПредварительныйРасчет,
			Новый Структура("Номенклатура, Характеристика", "Номенклатура", "Характеристика")
		),
		СтруктураДействий

	);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Количество");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются", "Количество");
	ТабличнаяЧастьТовары.Колонки.Добавить("КоличествоУпаковок");
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьТовары Цикл
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЦикла;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.Количество = СтрокаТЧ.Количество + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.Количество;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.Количество       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.Количество               = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.Количество = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			СтрокаТЧ.Количество = СтрокаИсточник.КоличествоУпаковок;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", Новый Структура("Дата, Валюта, ВидЦены", Объект.Дата, ВалютаУправленческогоУчета, Объект.ВидЦены));
			ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаСервере
Функция НайтиНоменклатуруПоШтрихКоду(Штрихкод)
	//= ШтрихКодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, Штрихкоды)	
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	мШтрихКод = Новый Структура("ШтрихКод,Количество",Штрихкод,1);
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();	
	РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(мШтрихКод, ПрефиксыВесовыхШтрихкодов);
	//ШтрихКодВРегистре = Лев(ШтрихКод,1)+"_"+Сред(ШтрихКод,3,10)+"_";	
	//ШтрихКодВРегистре = Штрихкод;
	Запрос.УстановитьПараметр("Штрихкод", мШтрихКод.ШтрихКод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мСтруктура = Новый Структура("Номенклатура,Характеристика,Упаковка", 
		Выборка.Номенклатура,
		Выборка.Характеристика,
		Выборка.упаковка);		
	КонецЦикла;
	Возврат мСтруктура;
КонецФункции

&НаСервере
Функция ПолучитьИмяТЧиВидНоменклатуры(ДанныеШтрихКодов)
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	//               |	ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	//               |	ВЫБОР
	//               |		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыГотовойПродукцииПроизводства.ВидНоменклатуры
	//               |			ТОГДА ""Товары""
	//               |		ИНАЧЕ ВЫБОР
	//               |				КОГДА ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыКомплектующие.ВидыНоменклатурыКомплектующих
	//               |					ТОГДА ""вт_ПроизводствоСырье""
	//               |				ИНАЧЕ ""вт_БракДробленка""
	//               |			КОНЕЦ
	//               |	КОНЕЦ КАК ИмяТабличнойЧасти
	//               |ИЗ
	//               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вт_ВидыНоменклатурыГотовойПродукцииПроизводства КАК вт_ВидыНоменклатурыГотовойПродукцииПроизводства
	//               |		ПО ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыГотовойПродукцииПроизводства.ВидНоменклатуры
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вт_ВидыНоменклатурыКомплектующие КАК вт_ВидыНоменклатурыКомплектующие
	//               |		ПО ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыКомплектующие.ВидыНоменклатурыКомплектующих
	//               |ГДЕ
	//               |	ШтрихкодыНоменклатуры.Штрихкод В(&МассивШтрихКодов)";

	мШтрихкоды = Новый Массив;
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();	
	
	Для Каждого мКодСтруктура из ДанныеШтрихКодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(мКодСтруктура, ПрефиксыВесовыхШтрихкодов);
		мШтрихкоды.Добавить(мКодСтруктура.ШтрихКод);
		//ШтрихКодВрегистре = Лев(мКодСтруктура.ШтрихКод,1)+"_"+Сред(мКодСтруктура.ШтрихКод,3,10)+"_";
		//мШтрихкоды.Добавить(ШтрихКодВрегистре);
	КонецЦикла;	
	
	ВТ_ШК = Новый ТаблицаЗначений;
	ВТ_ШК.Колонки.Добавить("ШтрихКод",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)),,200);
	//ВТ_ШК.ЗагрузитьКолонку(мШтрихКоды,"ШтрихКод");
	Для Каждого мЭлемент из мШтрихКоды Цикл
		аа = ВТ_ШК.Добавить();
		аа.Штрихкод = мЭлемент;
	КонецЦикла;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_ШК.ШтрихКод КАК Штрихкод
	               |ПОМЕСТИТЬ втшк
	               |ИЗ
	               |	&ВТ_ШК КАК ВТ_ШК
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втшк.Штрихкод КАК Штрихкод,
	               |	ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыГотовойПродукцииПроизводства.ВидНоменклатуры
	               |			ТОГДА ""Товары""
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыКомплектующие.ВидыНоменклатурыКомплектующих
	               |					ТОГДА ""вт_ПроизводствоСырье""
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА втшк.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	               |							ТОГДА ""вт_БракДробленка""
	               |						ИНАЧЕ ""НеизвестныйКод""
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ИмяТабличнойЧасти
	               |ИЗ
	               |	втшк КАК втшк
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вт_ВидыНоменклатурыГотовойПродукцииПроизводства КАК вт_ВидыНоменклатурыГотовойПродукцииПроизводства
	               |			ПО ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыГотовойПродукцииПроизводства.ВидНоменклатуры
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вт_ВидыНоменклатурыКомплектующие КАК вт_ВидыНоменклатурыКомплектующие
	               |			ПО ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = вт_ВидыНоменклатурыКомплектующие.ВидыНоменклатурыКомплектующих
	               |		ПО втшк.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод";
	
	
	 Запрос.УстановитьПараметр("ВТ_ШК", ВТ_ШК);
	//Запрос.УстановитьПараметр("МассивШтрихкодов", мШтрихкоды);
	
	ТаблицаСИменамиТЧ = Запрос.Выполнить().Выгрузить();
	
	мТовары = Новый Массив;
	мСырье = Новый Массив;
	мБрак = Новый Массив;
	мНеизвестный = Новый Массив;
	Для Каждого мЭлемент Из ТаблицаСИменамиТЧ Цикл
		Если мЭлемент.ИмяТабличнойЧасти ="вт_БракДробленка" Тогда
			мБрак.Добавить(мЭлемент.ШтрихКод);
		ИначеЕсли мЭлемент.ИмяТабличнойЧасти ="вт_ПроизводствоСырье" Тогда 
			мСырье.Добавить(мЭлемент.ШтрихКод);
		ИначеЕсли мЭлемент.ИмяТабличнойЧасти ="Товары" Тогда
			Для Каждого мКодСтруктура из ДанныеШтрихКодов Цикл
				//ШтрихКодВрегистре = Лев(мКодСтруктура.ШтрихКод,1)+"_"+Сред(мКодСтруктура.ШтрихКод,3,10)+"_";
				РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(мКодСтруктура, ПрефиксыВесовыхШтрихкодов);
				Если мКодСтруктура.ШтрихКод = мЭлемент.ШтрихКод Тогда
				//Если ШтрихКодВрегистре = мЭлемент.ШтрихКод Тогда
					мТовары.Добавить(Новый Структура("Штрихкод, Количество",мКодСтруктура.ШтрихКод,мКодСтруктура.Количество));
				КонецЕсли;	
			КонецЦикла; 	
		Иначе
			мНеизвестный.Добавить(мЭлемент.ШтрихКод);
		КонецЕсли;			
	КонецЦикла;
	
	Результат = Новый Структура("Товары,Сырье,Брак,Неизвестный",мТовары,мСырье,мБрак,мНеизвестный);
	Возврат Результат;	
КонецФункции

&НаСервере
Функция ДобавитьБракНаСервере(ГотоваяПродукция,КодСтроки,мНоменклатура)
	мНоваяСтрока = Объект.вт_БракДробленка.Добавить();
	мНоваяСтрока.ГотоваяПродукция = ГотоваяПродукция;
	мНоваяСтрока.КлючСвязиСтроки = КодСтроки;
	мНоваяСтрока.Дробленка = мНоменклатура.Номенклатура;
	мНоваяСтрока.Характеристика = мНоменклатура.Характеристика; 	
	Возврат мНоваяСтрока.ПолучитьИдентификатор(); 	
КонецФункции

&НаСервере
Функция ДобавитьСырьеНаСервере(ГотоваяПродукция,КодСтроки,мНоменклатура)
	мНоваяСтрока = Объект.вт_ПроизводствоСырье.Добавить();
	мНоваяСтрока.ГотоваяПродукция = ГотоваяПродукция;
	мНоваяСтрока.КлючСвязиСтроки = КодСтроки;
	мНоваяСтрока.Номенклатура = мНоменклатура.Номенклатура;
	мНоваяСтрока.Характеристика = мНоменклатура.Характеристика; 	
	Возврат мНоваяСтрока.ПолучитьИдентификатор(); 	
КонецФункции

&НаСервере
Функция ДобавитьГПНаСервере(Оборудование, КодСтроки, мНоменклатура)
	мНоваяСтрока = Объект.Товары.Добавить();					
	мНоваяСтрока.Номенклатура = мНоменклатура.Номенклатура;
	мНоваяСтрока.Характеристика = мНоменклатура.Характеристика; 	
	мНоваяСтрока.Оборудование = Оборудование;
	мНоваяСтрока.КлючСвязиОборудования = КодСтроки;
	Возврат мНоваяСтрока.ПолучитьИдентификатор();
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	//++
	СтруктураРазделения = ПолучитьИмяТЧиВидНоменклатуры(ДанныеШтрихКодов);
	
	Если СтруктураРазделения.Сырье.Количество()>0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаТовары;
		Элементы.вт_ГруппаСырье.Показать();
		Для Каждого мСырье Из СтруктураРазделения.Сырье Цикл
			мНоменклатура = НайтиНоменклатуруПоШтрихКоду(мСырье);
			текДанные = Элементы.Товары.ТекущиеДанные;
			Если текДанные <> Неопределено Тогда
				ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,ГотоваяПродукция,КлючСвязиСтроки", 
				мНоменклатура.Номенклатура,
				мНоменклатура.Характеристика,
				текДанные.Номенклатура,
				текДанные.КодСтроки);				
				НайденныеСтрокиТЧ = Объект.вт_ПроизводствоСырье.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтрокиТЧ.Количество() = 0 Тогда
					мИдентификаторСтроки = ДобавитьСырьеНаСервере(ТекДанные.Номенклатура,ТекДанные.КодСтроки,мНоменклатура);
				Иначе
					мИдентификаторСтроки = НайденныеСтрокиТЧ[0].ПолучитьИдентификатор();
				КонецЕсли;													
				Если мИдентификаторСтроки <> Неопределено Тогда  
                	Элементы.ТаблицаСырье.ТекущаяСтрока = мИдентификаторСтроки;	
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если СтруктураРазделения.Брак.Количество()>0 Тогда		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаТовары;
		Элементы.ГруппаБракДробленка.Показать();
		Для Каждого мБрак Из СтруктураРазделения.Брак Цикл
			мНоменклатура = НайтиНоменклатуруПоШтрихКоду(мБрак);
			текДанные = Элементы.Товары.ТекущиеДанные;
			Если текДанные <> Неопределено Тогда
				ПараметрыОтбора = Новый Структура("Дробленка, Характеристика,ГотоваяПродукция,КлючСвязиСтроки", 
				мНоменклатура.Номенклатура,
				мНоменклатура.Характеристика,
				текДанные.Номенклатура,
				текДанные.КодСтроки);
				НайденныеСтрокиТЧ = Объект.вт_БракДробленка.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтрокиТЧ.Количество() = 0 Тогда
					мИдентификаторСтроки = 
					ДобавитьБракНаСервере(текДанные.Номенклатура,текДанные.КодСтроки,мНоменклатура);					
				Иначе
					мИдентификаторСтроки = НайденныеСтрокиТЧ[0].ПолучитьИдентификатор();						
				КонецЕсли;							
				Если мИдентификаторСтроки <> Неопределено Тогда  
					Элементы.БракДробленка.ТекущаяСтрока = мИдентификаторСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Если СтруктураРазделения.Товары.Количество()>0 Тогда	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаТовары;
		Для Каждого мТовар Из СтруктураРазделения.Товары Цикл
			мНоменклатура = НайтиНоменклатуруПоШтрихКоду(мТовар.ШтрихКод);
			текДанные = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные;
			Если текДанные <> Неопределено Тогда
				ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Оборудование,КлючСвязиОборудования", 
				мНоменклатура.Номенклатура, 
				мНоменклатура.Характеристика,
				текДанные.Оборудование,
				текДанные.КодСтроки);   				
				НайденныеСтрокиТЧ = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтрокиТЧ.Количество() = 0 Тогда
					мИдентификаторСтроки = 
					ДобавитьГПНаСервере(текДанные.Оборудование, текДанные.КодСтроки, мНоменклатура);
				Иначе	
					мИдентификаторСтроки = НайденныеСтрокиТЧ[0].ПолучитьИдентификатор();					
				КонецЕсли;		
				Если мИдентификаторСтроки <> Неопределено Тогда  
					Элементы.Товары.ТекущаяСтрока = мИдентификаторСтроки;
					УстановитьОтборПоГотовойПродукции();	
				КонецЕсли;					
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Если СтруктураРазделения.Неизвестный.Количество()>0 Тогда
		Для Каждого ШтрихКод из СтруктураРазделения.Неизвестный Цикл
			Сообщить("Штрихкод "+СокрЛП(ШтрихКод)+ " не найден.");
			//Вместо сообщения нужно вызвать мастер назначения штрихкода 
			//и повторно для этого штрихкода вызвать
		КонецЦикла;	
	КонецЕсли;
	
	//// Далее заимствованный откуда-то стандарт
	//ИзменятьКоличество = Не ЗначениеЗаполнено(Объект.ДокументОснование);
	//ИмяПоляКоличество  = "Количество"; 
	//
	//СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	//СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", Новый Структура("Дата, Валюта, ВидЦены", Объект.Дата, ВалютаУправленческогоУчета, Объект.ВидЦены));
	//ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействийСДобавленнымиСтроками);
	//
	//СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	//ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействийСИзмененнымиСтроками);
	//
	//СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	//СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	//СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	//СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	//СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	//СтруктураДействий.ИмяКолонкиКоличество                   = ИмяПоляКоличество;
	//СтруктураДействий.НеИспользоватьУпаковки                 = Истина;
	//СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	//СтруктураДействий.ТолькоТовары                           = Истина;
	//
	//ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	//
	//ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	//
	//Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
	//	
	//	Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
	//	
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий)
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере()

	ВремОбъект = РеквизитФормыВЗначение("Объект");

	ВремОбъект.Товары.Очистить();
	ВремОбъект.ЗаполнитьТабличнуюЧастьТовары();

	ЗначениеВРеквизитФормы(ВремОбъект, "Объект");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	Если Объект.Товары.Количество() > 0
		И ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		ЗаполнитьЦеныПоВидуЦенСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымВХранилище()
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.АдресДанныхВХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресДанныхВХранилище);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Дата = СтруктураДанных.Шапка.Дата;
		
		ВремОбъект = РеквизитФормыВЗначение("Объект");
		ВремОбъект.Заполнить(Неопределено);
		ЗначениеВРеквизитФормы(ВремОбъект, "Объект");
		
		ЗаполнитьЗначенияСвойств(Объект,СтруктураДанных.Шапка);
	КонецЕсли;	
	
	Для Каждого СтрТабл из СтруктураДанных.ТаблицаТовары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
			)
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПолеКоличествоПланПриИзменении(Элемент)
	ПриИзмененииКоличестваПланСервер();
	ПересчетКоличестваФакт();
	ПересчитатьВесОбщийКлиент();
	ОбновитьДанныеКолонкиПроизводительность();
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();
КонецПроцедуры
	
//++
&НаСервере	
Функция ПолучитьВесТовараСервер(Товар)
	ТоварВес = ?(Товар.ВесЗнаменатель=0, 0, Товар.ВесЧислитель/Товар.ВесЗнаменатель);		
    Возврат ТоварВес;	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКоличестваПланСервер()	
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока.ВесДетали = 0 Тогда
			ТекущаяСтрока.ВесДетали = ТекущаяСтрока.КоличествоПлан * ПолучитьВесТовараСервер(ТекущаяСтрока.Номенклатура);
		КонецЕсли;
		вт_ОбработкаПересчетОбъемаОтходовСтрока(ТекущаяСтрока);
		
КонецПроцедуры		
		
&НаКлиенте
Процедура ПересчетКоличестваФакт()
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Если ТекущаяСтрока.БракКолВо = 0 Тогда
		ТекущаяСтрока.НоменклатураБрака = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПлан - ТекущаяСтрока.БракКолВо;
	
	втВариант = ТекущаяСтрока.ВариантПроизводства;
	втКоличество = ТекущаяСтрока.КоличествоПлан;
	втКоличествоБрак = ТекущаяСтрока.БракКолВо;
	втЗаполнитьСырьеСервер(ТекущаяСтрока.КодСтроки, втВариант, втКоличество, втКоличествоБрак,ЛОЖЬ);
	втЗаполнитьБракДробленкаСервер(ТекущаяСтрока.КодСтроки, ТекущаяСтрока.ВариантОбработкиБрака,втКоличествоБрак);
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПолеБракКоличествоПриИзменении(Элемент)
		 ПересчетКоличестваФакт();
		 текДанные = Элементы.Товары.ТекущиеДанные;
		 Если текДанные <> Неопределено Тогда
			  Если НЕ ЗначениеЗаполнено(текДанные.НоменклатураБрака) И текДанные.БракКолВо>0  Тогда
			  	текДанные.НоменклатураБрака = ПолучитьНоменклатуруБракаНаСервере(текДанные.ВариантПроизводства);
			  КонецЕсли;
		 КонецЕсли;
		 
КонецПроцедуры


&НаКлиенте
Процедура втКомандаПодбор(Команда)
	ОткрытьПодбор(Команда);
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	//Если Не ЗначениеЗаполнено(Объект.Соглашение)
	//	Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
	//	ОчиститьСообщения();
	//	//СообщитьОбОшибкахОткрытияПодбора(Отказ);
	//КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "отчет производства");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("Соглашение",               Объект.Соглашение);
//	ПараметрыФормы.Вставить("ЦенаВключаетНДС",          Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	

//Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
//		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
//		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
//	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина);
//	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
//	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  ВалютаУправленческогоУчета);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество",                      Истина);
	
	//Если Не Объект.Соглашение.Пустая() Тогда
	//	СегментНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "СегментНоменклатуры");
	//	ПараметрыФормы.Вставить("СегментНоменклатуры", СегментНоменклатуры);
	//КонецЕсли;
	
	ОткрытьФорму("Обработка.вт_ПодборГотовойПродукции.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	//++ 22.03.2018
	Попытка
		//-- 22.03.2018	
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
		Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Цена, Сумма");
			ТекущаяСтрока.Количество = СтрокаТовара.КоличествоУпаковок;
			ТекущаяСтрока.КоличествоПлан = ТекущаяСтрока.Количество;
			ЗаполнитьРасходСырьяПоРецептуре(ТекущаяСтрока);
		КонецЦикла;	
		//++ 22.03.2018
	Исключение;
	КонецПопытки;
	//-- 22.03.2018
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходСырьяПоРецептуре(СтрокаТовара)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	вт_ВариантыПроизводстваПоТехКартамСостав.Сырье КАК Номенклатура,
	|	вт_ВариантыПроизводстваПоТехКартамСостав.Количество КАК Количество,
	|	вт_ВариантыПроизводстваПоТехКартамСостав.Характеристика КАК Характеристика,
	|	вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка КАК ВариантПроизводства,
	|	ЕСТЬNULL(вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Количество, 0) КАК СоставленоНа
	|ИЗ
	|	Справочник.вт_ВариантыПроизводстваПоТехКартам.Состав КАК вт_ВариантыПроизводстваПоТехКартамСостав
	|ГДЕ
	|	вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Основной
	|	И вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Владелец = &ГП";
	Запрос.УстановитьПараметр("ГП",СтрокаТовара.Номенклатура);
	Результат = Запрос.Выполнить();
	ВариантПроизводства = Справочники.вт_ВариантыПроизводстваПоТехКартам.ПустаяСсылка();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВариантПроизводства = Выборка.ВариантПроизводства;
			НоваяСтрокаСырья = Объект.вт_ПроизводствоСырье.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСырья,Выборка);
			НоваяСтрокаСырья.Количество = Выборка.Количество*СтрокаТовара.Количество/
			?(Выборка.СоставленоНа = 0,1,Выборка.СоставленоНа);
			НоваяСтрокаСырья.КлючСвязиСтроки = СтрокаТовара.КодСтроки;
			НоваяСтрокаСырья.ГотоваяПродукция = СтрокаТовара.Номенклатура;			
		КонецЦикла;	
		СтрокаТовара.ВариантПроизводства = ВариантПроизводства;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
функция ПолучитьМассивНоменклатурыИзПодбора(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	МассивНоменклатуры = Новый массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		МассивНоменклатуры.Добавить(СтрокаТовара.Номенклатура);
	КонецЦикла;
	
	Возврат МассивНоменклатуры;
	
КонецФункции	

	
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		МассивНоменклатуры = ПолучитьМассивНоменклатурыИзПодбора(ВыбранноеЗначение);
		текДанные = Элементы.Товары.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			КомандаЗаполнитьСырьеПоОбъемуГотовойНаСервере(текДанные.КодСтроки,МассивНоменклатуры, текДанные.КоличествоПлан);
		КонецЕсли;
	//ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.вт_ПодборГотовойПродукции.Форма.Форма" Тогда
	//    ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	//	ПриИзмененииКоличестваПланСервер();	
	Иначе
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
		ПриИзмененииКоличестваПланСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоле1ВариантПроизводстваПриИзменении(Элемент)
	приИзмененииВариантаПроизводства();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
КонецПроцедуры

&НаКлиенте
Процедура приИзмененииВариантаПроизводства()
	 текДанные = Элементы.Товары.ТекущиеДанные;
	 Если текДанные <> Неопределено Тогда
		  втВариант = текДанные.ВариантПроизводства;
		  втКоличество = текДанные.КоличествоПлан;
		  втКоличествоБрак = текДанные.БракКолВо;		 
		  		  
		  втЗаполнитьСырьеСервер(текДанные.КодСтроки, втВариант, втКоличество, втКоличествоБрак,ИСТИНА);
		  ЗаполнитьОперацииВариантаПроизводства(текДанные.КодСтроки, втВариант, втКоличество, втКоличествоБрак,ИСТИНА);
		  
		  втМатериалОтхода =  ПолучитьЗначениеРеквизитаОбъекта(втВариант,"МатералЛитника");
		  текДанные.МатериалОтхода = ?(ЗначениеЗаполнено(втМатериалОтхода),втМатериалОтхода,текДанные.МатериалОтхода);
		  текДанные.НоменклатураБрака = ПолучитьНоменклатуруБракаНаСервере(текДанные.ВариантПроизводства);
		  
		  вт_ОбработкаПересчетОбъемаОтходовСтрока(текДанные);
		  
		  ОбновитьДанныеКолонкиПроизводительность();
		  ОбновитьДанныеКолонкиВремяРаботыОборудование();
		  ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
		  ОбновитьДанныеКолонкиВремяПроизводстваШтФакт(); 
		  ЗаполнитьВесьДетали();
		  ПересчитатьВесОбщийКлиент();		 
	 КонецЕсли;	 
 КонецПроцедуры	
 
&НаСервере
Функция ПолучитьНоменклатуруБракаНаСервере(текВариантПроизводства)
	НоменклатураБрака = Справочники.Номенклатура.ПустаяСсылка();
	Если ЗначениеЗаполнено(текВариантПроизводства) Тогда
		НоменклатураБрака = текВариантПроизводства.НоменклатураБрака;
	КонецЕсли;	
	Возврат НоменклатураБрака;
КонецФункции	 
	 
 &НаСервере
 Процедура ЗаполнитьОперацииВариантаПроизводства(КодСтроки, втВариант, втКоличество, втКоличествоБрак, ОчищатьСырье)
	 Запрос = Новый Запрос("ВЫБРАТЬ
	 |	вт_ВариантыПроизводстваПоТехКартамОперации.Операция КАК Номенклатура,
	 |	вт_ВариантыПроизводстваПоТехКартамОперации.НормаВремени КАК Количество,
	 |	вт_ВариантыПроизводстваПоТехКартамОперации.Ссылка.Владелец КАК  ГотоваяПродукция,
	 |	&КодСтроки КАК КлючСтроки
	 |ИЗ
	 |	Справочник.вт_ВариантыПроизводстваПоТехКартам.Операции КАК вт_ВариантыПроизводстваПоТехКартамОперации
	 |ГДЕ
	 |	вт_ВариантыПроизводстваПоТехКартамОперации.Ссылка = &Ссылка");
	 
	 Запрос.УстановитьПараметр("Ссылка", втВариант);
	 Запрос.УстановитьПараметр("Количество", втКоличество);
	 Запрос.УстановитьПараметр("КоличествоБрак", втКоличествоБрак);
	 Запрос.УстановитьПараметр("КодСтроки", КодСтроки);
	 
	 ТаблСырьеПродукта = Запрос.Выполнить().Выгрузить();
	 
	 Если ОчищатьСырье Тогда
		 Отбор = Новый структура;
		 Отбор.Вставить("ГотоваяПродукция",втВариант.Владелец);
		 Отбор.Вставить("КлючСтрокипродукции", КодСтроки);
		 
		 МассивСтрок = Объект.Операции.НайтиСтроки(Отбор);
		 для каждого СтрокаКомплекта из МассивСтрок Цикл
			 Объект.Операции.Удалить(СтрокаКомплекта);
		 КонецЦикла;
	 КонецЕсли;
	 
	 //Загружаем новые данные по этой номенклатура
	 Для Каждого СтрокаСырье из ТаблСырьеПродукта Цикл
		 ОтборПоСырье = Новый Структура("Номенклатура, ГотоваяПродукция, КлючСтроки", СтрокаСырье.Номенклатура, СтрокаСырье.ГотоваяПродукция, КодСтроки);
		 НайденыСтрокиСырье = Объект.Операции.НайтиСтроки(ОтборПоСырье);
		 Если НайденыСтрокиСырье.количество()=0 И ОчищатьСырье Тогда
			 СтрокаНовая = Объект.Операции.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаСырье);
		 Иначе
			 Для каждого ПозицияНайденоСырье из НайденыСтрокиСырье  Цикл
				 ЗаполнитьЗначенияСвойств(ПозицияНайденоСырье, СтрокаСырье);
			 КонецЦикла;	 
		 КонецЕсли;
	 КонецЦикла;
 
 КонецПроцедуры
 
 &НаСервере
 Процедура втЗаполнитьСырьеСервер(КодСтроки, втВариант, втКоличество, втКоличествоБрак, ОчищатьСырье)
	 
	 Запрос = Новый Запрос("ВЫБРАТЬ
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Сырье КАК Номенклатура,
     |	вт_ВариантыПроизводстваПоТехКартамСостав.Характеристика,
	 |	выбор когда вт_ВариантыПроизводстваПоТехКартамСостав.СписыватьПоВсегоИзготовлено тогда
	 |     вт_ВариантыПроизводстваПоТехКартамСостав.Количество * &Количество / вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Количество  
	 |  иначе
	 |     вт_ВариантыПроизводстваПоТехКартамСостав.Количество * (&Количество-&КоличествоБрак) / вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Количество 
	 |  конец КАК Количество,
	 |	выбор когда вт_ВариантыПроизводстваПоТехКартамСостав.СписыватьПоВсегоИзготовлено тогда
	 |     вт_ВариантыПроизводстваПоТехКартамСостав.Количество * &Количество / вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Количество
	 |  иначе
	 |     вт_ВариантыПроизводстваПоТехКартамСостав.Количество * (&Количество-&КоличествоБрак)/ вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Количество 
	 |  конец  КАК КоличествоПлан,
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Владелец КАК  ГотоваяПродукция,
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Количество/ вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Количество КАК НормаКоличество,
	 |	&КодСтроки КАК КлючСвязиСтроки
	 |ИЗ
	 |	Справочник.вт_ВариантыПроизводстваПоТехКартам.Состав КАК вт_ВариантыПроизводстваПоТехКартамСостав
	 |ГДЕ
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка = &Ссылка");
	 
	 Запрос.УстановитьПараметр("Ссылка", втВариант);
	 Запрос.УстановитьПараметр("Количество", втКоличество);
	 Запрос.УстановитьПараметр("КоличествоБрак", втКоличествоБрак);
	 Запрос.УстановитьПараметр("КодСтроки", КодСтроки);

	 ТаблСырьеПродукта = Запрос.Выполнить().Выгрузить();
	 
	 Если ОчищатьСырье Тогда
		 Отбор = Новый структура;
		 Отбор.Вставить("ГотоваяПродукция",втВариант.Владелец);
		 Отбор.Вставить("КлючСвязиСтроки", КодСтроки);
		 
		 МассивСтрок = Объект.вт_ПроизводствоСырье.НайтиСтроки(Отбор);
		 для каждого СтрокаКомплекта из МассивСтрок Цикл
			 Объект.вт_ПроизводствоСырье.Удалить(СтрокаКомплекта);
		 КонецЦикла;
	 КонецЕсли;
	 
	 //Загружаем новые данные по этой номенклатура
	 Для Каждого СтрокаСырье из ТаблСырьеПродукта Цикл
		 ОтборПоСырье = Новый Структура("Номенклатура, ГотоваяПродукция, КлючСвязиСтроки", СтрокаСырье.Номенклатура, СтрокаСырье.ГотоваяПродукция, КодСтроки);
		 НайденыСтрокиСырье = Объект.вт_ПроизводствоСырье.НайтиСтроки(ОтборПоСырье);
		 Если НайденыСтрокиСырье.количество()=0 И ОчищатьСырье Тогда
			 СтрокаНовая = Объект.вт_ПроизводствоСырье.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаСырье);
		 Иначе
			 Для каждого ПозицияНайденоСырье из НайденыСтрокиСырье  Цикл
				 ЗаполнитьЗначенияСвойств(ПозицияНайденоСырье, СтрокаСырье);
			 КонецЦикла;	 
		 КонецЕсли;
	 КонецЦикла;
	 
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	УстановитьОтборПоГотовойПродукции();	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоГотовойПродукции()
	Отбор  = Новый Структура;
	текДанные = Элементы.Товары.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Отбор.Вставить("ГотоваяПродукция",текДанные.Номенклатура);
		Отбор.Вставить("КлючСвязиСтроки",текДанные.КодСтроки);
		
		Элементы.ТаблицаСырье.ОтборСтрок =  новый ФиксированнаяСтруктура(Отбор);
		Элементы.БракДробленка.ОтборСтрок = новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Отбор.Вставить("ГотоваяПродукция",Неопределено);
		Отбор.Вставить("КлючСвязиСтроки",Неопределено);
		
		Элементы.ТаблицаСырье.ОтборСтрок =  новый ФиксированнаяСтруктура(Отбор);
		Элементы.БракДробленка.ОтборСтрок = новый ФиксированнаяСтруктура(Отбор);   
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаСырьеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И Элемент.ТекущиеДанные<>Неопределено ТОгда
		текДанные = Элементы.Товары.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.ГотоваяПродукция = текДанные.Номенклатура;
			Элемент.ТекущиеДанные.КлючСвязиСтроки = текДанные.КодСтроки;
		КонецЕсли;
	КонецЕсли;	
	
	//Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
	//	Элемент,КэшированныеЗначения,ПараметрыУказанияСерийСырья) Тогда
	//	
	//	ТекущиеДанные = Элементы.ТаблицаСырье.ТекущиеДанные;
	//	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	//	
	//	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерийСырья);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока ТОгда
		текДанные = Элементы.Товары.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.ГотоваяПродукция = текДанные.Номенклатура;
			Элемент.ТекущиеДанные.КлючСвязиСтроки = текДанные.КодСтроки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПолеМатериалОтходаПриИзменении(Элемент)
	
	текДанные = Элементы.Товары.ТекущиеДанные;
	вт_ОбработкаПересчетОбъемаОтходовСтрока(текДанные);
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьЗначениеРеквизитаОбъекта(СсылкаОб, ИмяРеквизита)
	Возврат СсылкаОб[ИмяРеквизита];
КонецФункции	

&НаКлиенте                
Процедура вт_ОбработкаПересчетОбъемаОтходовСтрока(текДанные)
	Если текДанные <> Неопределено Тогда
	//++ старый алгоритм	
		//втВесЛитника = ПолучитьЗначениеРеквизитаОбъекта(текДанные.ВариантПроизводства,"ВесЛитника");
		//втНормаОтходов = 0;// ПолучитьЗначениеРеквизитаОбъекта(текДанные.Номенклатура,"вт_НормаОтходов");
		втВесЛитника = ПолучитьЗначениеРеквизитаОбъекта(текДанные.ВариантПроизводства,"ВесЛитника");
		втНормаОтходов = 0;// ПолучитьЗначениеРеквизитаОбъекта(текДанные.Номенклатура,"вт_НормаОтходов");
		текДанные.ОбъемОтхода = текДанные.КоличествоПлан  *  ?(ЗначениеЗаполнено(втВесЛитника),втВесЛитника,втНормаОтходов);//  текДанные.ВесОбщий * ПолучитьЗначениеРеквизитаОбъекта(текДанные.Номенклатура,"вт_НормаОтходов");
		//текДанные.ОбъемОтхода = текДанные.КоличествоПлан  *  ?(ЗначениеЗаполнено(втВесЛитника),втВесЛитника,втНормаОтходов);//  текДанные.ВесОбщий * ПолучитьЗначениеРеквизитаОбъекта(текДанные.Номенклатура,"вт_НормаОтходов");
		
		втЗаполнитьБракДробленкаПоСпецификацииСервер(текДанные.КодСтроки, текДанные.Номенклатура, текДанные.ВариантПроизводства, текДанные.КоличествоПлан);
		Элементы.БракДробленка.Обновить();
	//--	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура втЗаполнитьБракДробленкаПоСпецификацииСервер(КодСтроки, ГотоваяПродукция, ВариантПроизводства, КоличествоПлан)
	 ФрмОб = РеквизитФормыВЗначение("Объект");
	 ФрмОб.втЗаполнитьБракДробленкаПоСпецификацииСервер(КодСтроки, ГотоваяПродукция, ВариантПроизводства, КоличествоПлан);
	 Объект.вт_БракДробленка.Загрузить(ФрмОб.вт_БракДробленка.Выгрузить());
		 	 
	 ////Загружаем новые данные по этой номенклатура
	 // Для Каждого СтрокаОтходы из ВариантПроизводства.Отходы Цикл
	 //    ОтборПоСырье = Новый Структура("Дробленка, ГотоваяПродукция, КлючСвязиСтроки", СтрокаОтходы.Номенклатура, ГотоваяПродукция, КодСтроки);
	 //    НайденыСтрокиСырье = Объект.вт_БракДробленка.НайтиСтроки(ОтборПоСырье);
	 //    Если НайденыСтрокиСырье.количество()=0  Тогда
	 //   	 СтрокаНовая = Объект.вт_БракДробленка.Добавить();
	 //   	 СтрокаНовая.ГотоваяПродукция = ГотоваяПродукция;
	 //   	 СтрокаНовая.Дробленка = СтрокаОтходы.Номенклатура;
	 //   	 СтрокаНовая.Количество = КоличествоПлан *СтрокаОтходы.Количество/100; //Отходы заданы в % от общего числа продукции
	 //   	 СтрокаНовая.КлючСвязиСтроки = КодСтроки;
	 //   Иначе                                      
	 //   	 Для каждого ПозицияНайденоСырье из НайденыСтрокиСырье  Цикл
	 //   		 ПозицияНайденоСырье.ГотоваяПродукция = ГотоваяПродукция;
	 //   		 ПозицияНайденоСырье.Дробленка = СтрокаОтходы.Номенклатура;
	 //   		 ПозицияНайденоСырье.Количество = КоличествоПлан*СтрокаОтходы.Количество/100; //Отходы заданы в % от общего числа продукции
	 //   		 ПозицияНайденоСырье.КлючСвязиСтроки = КодСтроки;
	 //   	 КонецЦикла;	 
	 //    КонецЕсли;		 		 
	 //КонецЦикла;
	 	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыВесОбщийПриИзменении(Элемент)
	текДанные = Элементы.Товары.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		вт_ОбработкаПересчетОбъемаОтходовСтрока(текДанные);
	КонецЕсли;
	
	ТоварыВесОбщийПриИзмененииФрагмент(текДанные.КодСтроки,текДанные.ВариантПроизводства,текДанные.ВесОбщий, текДанные.КоличествоПлан);  
	УстановитьУсловноеОформлениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыВесОбщийПриИзмененииФрагмент(пКодСтроки,пВариантПроизводства,пВесОбщий, пКоличествоПлан)
	
	Перем СтрокаСостав, СтрокаСырье; 
	
	Для Каждого СтрокаСырье Из Объект.вт_ПроизводствоСырье Цикл
		Если пКодСтроки = СтрокаСырье.КлючСвязиСтроки Тогда
			СтрокаСырье.Количество = СтрокаСырье.КоличествоПлан;
			Для Каждого СтрокаСостав Из пВариантПроизводства.Состав Цикл
				
			КонецЦикла;	
			СтрокаСырье.РасхожденияКоличество = СтрокаСырье.Количество - СтрокаСырье.КоличествоПлан;
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры


&НаСервере
Процедура вт_ПересчетСырьеПоВесуСервер(втВариант, втВесОбщий)
	 Запрос = Новый Запрос("ВЫБРАТЬ
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Сырье КАК Номенклатура,
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка.Владелец КАК  ГотоваяПродукция,
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Количество КАК НормаКоличество
	 |ИЗ
	 |	Справочник.вт_ВариантыПроизводстваПоТехКартам.Состав КАК вт_ВариантыПроизводстваПоТехКартамСостав
	 |ГДЕ
	 |	вт_ВариантыПроизводстваПоТехКартамСостав.Ссылка = &Ссылка");
	 
	 Запрос.УстановитьПараметр("Ссылка", втВариант);
	 
	 ВыборкаВарианты = Запрос.Выполнить().Выгрузить();
	 Для Каждого СтрокаВариантПроизводства из ВыборкаВарианты Цикл
		 ИмяЕдИзм = НРег(СтрокаВариантПроизводства.Номенклатура.ЕдиницаИзмерения.Наименование);
		 Если ИмяЕдИзм<>"кг" И ИмяЕдИзм<>"г" И ИмяЕдИзм<>"кг." И ИмяЕдИзм<>"г." Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 //Найдем в табл.сырья эту позицию
		 Отборсырье = Новый Структура("Номенклатура,ГотоваяПродукция",
		 								СтрокаВариантПроизводства.Номенклатура,
										втВариант.Владелец);
										
		 СтрокиСырье = Объект.вт_ПроизводствоСырье.НайтиСтроки(Отборсырье);
		 Для Каждого ПозицияСырье из СтрокиСырье Цикл
//++добавлениеКоличествоПлан				 
//			 ПозицияСырье.Количество = СтрокаВариантПроизводства.НормаКоличество * втВесОбщий;
			 ПозицияСырье.КоличествоПлан = СтрокаВариантПроизводства.НормаКоличество * втВесОбщий;
//--
		 КонецЦикла;	 
		 
	 КонецЦикла;
	 
КонецПроцедуры	

&НаКлиенте
Процедура КомандаПересчетСырьяПоОбъему(Команда)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено ТОгда
		Возврат;
	КонецЕсли;	
	вт_ПересчитатьСырьеПозицииПоВесу(ТекДанные.Номенклатура, ТекДанные.ВесОбщий);
	
КонецПроцедуры

&НаСервере
Процедура вт_ПересчитатьСырьеПозицииПоВесу(втТовар, втВес)
	ВидКраситель = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Краситель");
	ВидПолипропилен = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Полипропилен");
		
	ОтборПоТовару = Новый Структура("ГотоваяПродукция",втТовар);
	СтрокиСырья = Объект.вт_ПроизводствоСырье.НайтиСтроки(ОтборПоТовару);
	Для Каждого СтрокаСырье из СтрокиСырья Цикл
//++добавлениеКоличествоПлан		
		Если СтрокаСырье.Номенклатура.ВидНоменклатуры = ВидКраситель Тогда
//			 СтрокаСырье.Количество = втВес * 0.99; //99%
			 СтрокаСырье.КоличествоПлан = втВес * 0.99; //99% 
		ИНачеЕсли СтрокаСырье.Номенклатура.ВидНоменклатуры = ВидПолипропилен Тогда	
//			 СтрокаСырье.Количество = втВес * 0.01; //1%
			 СтрокаСырье.КоличествоПлан = втВес * 0.01; //1% 
		КонецЕсли;
//--		
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыВариантОбработкиБракаПриИзменении(Элемент)
	приИзмененииВариантаБракаДробленки();
КонецПроцедуры

&НаКлиенте
Процедура приИзмененииВариантаБракаДробленки()
	 текДанные = Элементы.Товары.ТекущиеДанные;
	 Если текДанные <> Неопределено Тогда
		  втВариант = текДанные.ВариантОбработкиБрака;
		  втКоличествоБрак = текДанные.БракКолВо;
		  втЗаполнитьБракДробленкаСервер(текДанные.КодСтроки, втВариант, втКоличествоБрак);
		  Элементы.БракДробленка.Обновить();
	 КонецЕсли;	
	
КонецПроцедуры	


 &наСервере
 Процедура втЗаполнитьБракДробленкаСервер(КодСтроки, втВариант, втКоличествоБрак)
	 ВидПакеты = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пакеты");
	 МассивВидыРасходников = Новый Массив;
	 МассивВидыРасходников.Добавить(ВидПакеты);
	 
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	вт_МатериалыБракаОтПроизвдства.Материал КАК Дробленка,
	                       |	вт_МатериалыБракаОтПроизвдства.Количество * &Количество КАК Количество,
	                       |	вт_МатериалыБракаОтПроизвдства.Ссылка.Владелец КАК ГотоваяПродукция,
	                       |	вт_МатериалыБракаОтПроизвдства.Количество КАК НормаКоличество,
	                       |	&Количество КАК КоличествоБрака
	                       |ПОМЕСТИТЬ ВТ_ДРОБЛЕНКА
	                       |ИЗ
	                       |	Справочник.вт_МатериалыБракаОтПроизводства.Материалы КАК вт_МатериалыБракаОтПроизвдства
	                       |ГДЕ
	                       |	вт_МатериалыБракаОтПроизвдства.Ссылка = &Ссылка
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ВТ_ДРОБЛЕНКА.ГотоваяПродукция,
	                       |	СУММА(1) КАК КоличествоПозицийДробленки
	                       |ПОМЕСТИТЬ ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ
	                       |ИЗ
	                       |	ВТ_ДРОБЛЕНКА КАК ВТ_ДРОБЛЕНКА
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ВТ_ДРОБЛЕНКА.ГотоваяПродукция
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ВТ_ДРОБЛЕНКА.Дробленка,
//++добавлениеКоличествоПлан								   
//	                       |	ВТ_ДРОБЛЕНКА.Количество / ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ.КоличествоПозицийДробленки КАК Количество,
						   |	ВТ_ДРОБЛЕНКА.Количество / ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ.КоличествоПозицийДробленки КАК КоличествоПлан,
//--						   
	                       |	ВТ_ДРОБЛЕНКА.ГотоваяПродукция,
	                       |	ВТ_ДРОБЛЕНКА.НормаКоличество,
	                       |	ВТ_ДРОБЛЕНКА.КоличествоБрака / ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ.КоличествоПозицийДробленки КАК КоличествоБрака,
	                       |	ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ.КоличествоПозицийДробленки,
						   |	&КодСтроки КАК КлючСвязиСтроки
	                       |ИЗ
	                       |	ВТ_ДРОБЛЕНКА КАК ВТ_ДРОБЛЕНКА
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ КАК ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ
	                       |		ПО ВТ_ДРОБЛЕНКА.ГотоваяПродукция = ВТ_КОЛИЧЕСТВО_ДРОБЛЕНКИ.ГотоваяПродукция");
	 
	 Запрос.УстановитьПараметр("Ссылка", втВариант);
	 Запрос.УстановитьПараметр("Количество", втКоличествоБрак);
	 Запрос.УстановитьПараметр("КодСтроки", КодСтроки);
	  
	 //Объект.вт_ПроизводствоСырье.Загрузить(Запрос.Выполнить().Выгрузить());
	 ТаблДробленкаПродукта = Запрос.Выполнить().Выгрузить();
	 
	 //Удаляем существующие строки по выбранной готовой продукции
	 Отбор = Новый структура;
	 Отбор.Вставить("ГотоваяПродукция",втВариант.Владелец);   
	 Отбор.Вставить("КлючСвязиСтроки",КодСтроки);
	 
	 МассивСтрок = Объект.вт_БракДробленка.НайтиСтроки(Отбор);
	 для каждого СтрокаКомплекта из МассивСтрок Цикл
		 Объект.вт_БракДробленка.Удалить(СтрокаКомплекта);
	 КонецЦикла;
	 
	 //Загружаем новые данные по этой номенклатура
	 КлючСвязиСтрокиПредыдущий = 0;
	 Для Каждого СтрокаДробленка из ТаблДробленкаПродукта Цикл
		 ОтборПоСырье = Новый Структура("Дробленка, ГотоваяПродукция, КлючСвязиСтроки", СтрокаДробленка.Дробленка, СтрокаДробленка.ГотоваяПродукция, КодСтроки);
		 НайденыСтрокиСырье = Объект.вт_БракДробленка.НайтиСтроки(ОтборПоСырье);
		 Если НайденыСтрокиСырье.количество()=0  Тогда
			 СтрокаНовая = Объект.вт_БракДробленка.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаДробленка);  
			 СтруктураДробленки = ПолучитьСтруктуруДробленки(СтрокаНовая.КлючСвязиСтроки);
			 СтрокаНовая.Количество = СтрокаНовая.КоличествоБрака * СтрокаДробленка.НормаКоличество;
		 Иначе                                      
			 Для каждого ПозицияНайденоСырье из НайденыСтрокиСырье  Цикл
				 ЗаполнитьЗначенияСвойств(ПозицияНайденоСырье, СтрокаДробленка);
				 ПозицияНайденоСырье.Количество = СтрокаДробленка.НормаКоличество * втКоличествоБрак;
			 КонецЦикла;	 
		 КонецЕсли;		 
		 КлючСвязиСтрокиПредыдущий = СтрокаДробленка.КлючСвязиСтроки;
	 КонецЦикла;
	 
	
 КонецПроцедуры

&НаКлиенте
 Процедура БракДробленкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	 Если НоваяСтрока ТОгда
		 текДанные = Элементы.Товары.ТекущиеДанные;
		 Если текДанные <> Неопределено И Элемент.ТекущиеДанные<>Неопределено Тогда
			 Элемент.ТекущиеДанные.ГотоваяПродукция = текДанные.Номенклатура;
			 Элемент.ТекущиеДанные.КлючСвязиСтроки = текДанные.КодСтроки;
		 КонецЕсли;
	 КонецЕсли;	

 КонецПроцедуры

&НаКлиенте
 Процедура БракДробленкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	 // Вставить содержимое обработчика.
 КонецПроцедуры

&НаКлиенте
Процедура БракДробленкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
//	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "БракДробленка");
	 Если НоваяСтрока ТОгда
		 текДанные = Элементы.Товары.ТекущиеДанные;
		 Если текДанные <> Неопределено И Элемент.ТекущиеДанные<>Неопределено Тогда
			 Элемент.ТекущиеДанные.ГотоваяПродукция = текДанные.Номенклатура;
			 Элемент.ТекущиеДанные.КлючСвязиСтроки = текДанные.КодСтроки;
		 КонецЕсли;
	 КонецЕсли;	
 КонецПроцедуры

&НаКлиенте
Процедура БракДробленкаКоличествоБракаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.БракДробленка.ТекущиеДанные;

	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоБрака * ТекущаяСтрока.НормаКоличество;
	 
КонецПроцедуры

&НаСервере
Функция ЗначениеРеквизита(Объект,ИмяРеквизита);
 Возврат Объект[ИмяРеквизита];
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКолонкиПроизводительность()
	Для каждого СтрокаПроизводительность из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаПроизводительность.ВариантПроизводства.ВремяПроизводстваСек) Тогда
		     ВремяПроизводстваСек = ЗначениеРеквизита(СтрокаПроизводительность.ВариантПроизводства,"ВремяПроизводстваСек");
		Иначе
			 ВремяПроизводстваСек = ЗначениеРеквизита(СтрокаПроизводительность.ВариантПроизводства,"ВремяПроизводстваЧас")/3600; //приводим в секунды
		Конецесли;
	
		//вт_ВремяОтливкиДеталиСек = СтрокаПроизводительность.ВариантПроизводства.ВремяПроизводстваСек;// ЗначениеРеквизита(СтрокаПроизводительность.Номенклатура,"вт_ВремяОтливкиДеталиСек");
		вт_производительность = ВремяПроизводстваСек;// ?(ВремяПроизводстваСек>0,ВремяПроизводстваСек,вт_ВремяОтливкиДеталиСек);
		
		пВесДетали = СтрокаПроизводительность.ВариантПроизводства.ВесДетали-СтрокаПроизводительность.ВариантПроизводства.ВесЛитника;
		//Если НЕ (пВесДетали>0) тогда
		//	пВесДетали = ЗначениеРеквизита(СтрокаПроизводительность.Номенклатура,"вт_ВесНетто");
		//КонецЕсли;
		
		
		СтрокаПроизводительность.ПродукцияЗатратыВремени =  СтрокаПроизводительность.КоличествоПлан * вт_производительность /3600; //приводим в часы
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте 
Процедура РасчетПоляПроизводительность()
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ВариантПроизводства.ВремяПроизводстваСек) Тогда
		ВремяПроизводстваСек = ЗначениеРеквизита(ТекСтрока.ВариантПроизводства,"ВремяПроизводстваСек");
	Иначе
		ВремяПроизводстваСек = ЗначениеРеквизита(ТекСтрока.ВариантПроизводства,"ВремяПроизводстваЧас")/3600; //приводим в секунды
	Конецесли;
	
	вт_производительность = ВремяПроизводстваСек; //ЗначениеРеквизита(ТекСтрока.ВариантПроизводства,"ВремяПроизводстваСек"); //  ЗначениеРеквизита(ТекСтрока.Номенклатура,"вт_ВремяОтливкиДеталиСек");
	ТекСтрока.ПродукцияЗатратыВремени =  ТекСтрока.КоличествоПлан * вт_производительность / 3600; //приводим к часам
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	
	//НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	//		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	//
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		     возврат;
	КонецЕсли;	
	Если НоваяСтрока ИЛИ Копирование ТОгда //  НЕ ЗначениеЗаполнено(ТекДанные.КодСтроки) Тогда
		ТекДанные.КодСтроки = Объект.Товары.Количество()+1;
		Если Элементы.вт_ОборудованиеПроизводства.Видимость И Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные<>Неопределено ТОгда
			ТекДанные.Оборудование = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные.Оборудование;
			ТекДанные.КлючСвязиОборудования = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные.КодСтроки;
		КонецЕсли;
	КонецЕсли;
    УстановитьОтборПоГотовойПродукции();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитДеньНочьПриИзменении(Элемент)
	Объект.ПериодДняПроизводства=ЭтаФорма.РеквизитДеньНочь;
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();
КонецПроцедуры

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваПриАктивизацииСтроки(Элемент)
	    УстановитьОтборПродукцииПоОборудованию();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПродукцииПоОборудованию()
	Отбор  = Новый Структура;
	текДанные = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(текДанные.Оборудование) тогда
			Отбор.Вставить("Оборудование",текДанные.Оборудование);
			Отбор.Вставить("КлючСвязиОборудования",текДанные.КодСтроки);
			
			Элементы.Товары.ОтборСтрок =  новый ФиксированнаяСтруктура(Отбор);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные;
	если ТекДанные=Неопределено тогда
		     возврат;
	КонецЕсли;	
	Если НоваяСтрока ИЛИ Копирование ТОгда //  НЕ ЗначениеЗаполнено(ТекДанные.КодСтроки) Тогда
		ТекДанные.КодСтроки = Объект.вт_ОборудованиеПроизводства.Количество()+1;
	КонецЕсли;
	УстановитьОтборПродукцииПоОборудованию();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И Элементы.вт_ОборудованиеПроизводства.Видимость ТОгда
		текДанные = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные;
		Если текДанные <> Неопределено И Элемент.ТекущиеДанные<> Неопределено Тогда
			Элемент.ТекущиеДанные.Оборудование = текДанные.Оборудование;
			Элемент.ТекущиеДанные.КлючСвязиОборудования = текДанные.КодСтроки;
		КонецЕсли;
	КонецЕсли;	

	//Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
	//	Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
	//	
	//	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	//	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	//	
	//	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		возврат;
	КонецЕсли;
	
	пОборудование = Элемент.ТекущиеДанные.Оборудование;
	пКодСтроки = Элемент.ТекущиеДанные.КодСтроки;
	
	УдалитьСтрокиТоварыПоОтбору(пОборудование,пКодСтроки);
	
	Элементы.Товары.Обновить();
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиСырьяБракаПоТовару(ГотоваяПродукция, КлючСвязиСтроки)
		ОтборСырья = Новый Структура("ГотоваяПродукция,КлючСвязиСтроки", ГотоваяПродукция, КлючСвязиСтроки);
		НайденыСтрокиСырье = Объект.вт_ПроизводствоСырье.НайтиСтроки(ОтборСырья);
		Для Каждого СтрокаСырье из НайденыСтрокиСырье Цикл
			Объект.вт_ПроизводствоСырье.Удалить(СтрокаСырье);
		КонецЦикла;
		
		
		ОтборБрак = Новый Структура("ГотоваяПродукция,КлючСвязиСтроки", ГотоваяПродукция, КлючСвязиСтроки);
		НайденыСтрокиБрак = Объект.вт_БракДробленка.НайтиСтроки(ОтборСырья);
		Для Каждого СтрокаБрак из НайденыСтрокиБрак Цикл
			Объект.вт_БракДробленка.Удалить(СтрокаБрак);
		КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТоварыПоОтбору(пОборудование,пКодСтроки)
	ОтборТоваров = Новый Структура("Оборудование, КлючСвязиОборудования",пОборудование, пКодСтроки);
	НайденыТовары = Объект.Товары.НайтиСтроки(ОтборТоваров);
	
	
	Для Каждого СтрокаТовара из НайденыТовары Цикл
		УдалитьСтрокиСырьяБракаПоТовару(СтрокаТовара.Номенклатура, СтрокаТовара.КодСтроки);
		Объект.Товары.Удалить(СтрокаТовара);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		возврат;
	КонецЕсли;
	пНоменклатура = Элемент.ТекущиеДанные.Оборудование;
	пКодСтроки = Элемент.ТекущиеДанные.КодСтроки;
	
	УдалитьСтрокиСырьяБракаПоТовару(пНоменклатура, пКодСтроки)
КонецПроцедуры

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И Элементы.вт_ОборудованиеПроизводства.Видимость ТОгда
		текДанные = Элементы.вт_ОборудованиеПроизводства.ТекущиеДанные;
		Если текДанные <> Неопределено ТОгда
			Если ЗначениеЗаполнено(текДанные.Оборудование) Тогда
				УстановитьОтборПродукцииПоОборудованию();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные=Неопределено ТОгда
		возврат;
	КонецЕсли;
	
	Если поле = ЭтаФорма.Элементы.вт_ОборудованиеПроизводстваПростоиОборудования Тогда
		СтандартнаяОбработка = Ложь;
		ОтборСтрок = Новый Структура("Оборудование,КлючСвязиОборудования", Элемент.ТекущиеДанные.Оборудование, Элемент.ТекущиеДанные.КодСтроки);
		АдресХранилища = ПоместитьСтрокиПростояВХранилище(ОтборСтрок);
		ПараметрыФормы = Новый Структура("Оборудование, КлючСвязиСтроки, АдресВХранилище",Элемент.ТекущиеДанные.Оборудование,Элемент.ТекущиеДанные.КодСтроки, АдресХранилища);
		ОткрытьФорму("Документ.вт_ОтчетПроизводства.Форма.ФормаПростоиОборудования",ПараметрыФормы,ЭтаФорма);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСтрокиПростояВХранилище(ОтборСтрок)
		СтрокиДляВыгрузки = Объект.вт_ПростоиОборудования.НайтиСтроки(ОтборСтрок);
		Возврат ПоместитьВоВременноеХранилище(Объект.вт_ПростоиОборудования.Выгрузить(СтрокиДляВыгрузки));
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКолонкиВремяПростоя()
	Для каждого СтрокаОборудования из Объект.вт_ОборудованиеПроизводства Цикл
		ОтборСтрокПростоя = Новый Структура("Оборудование,КлючСвязиОборудования",СтрокаОборудования.Оборудование, СтрокаОборудования.КодСтроки);
		НайденыСтроки = Объект.вт_ПростоиОборудования.НайтиСтроки(ОтборСтрокПростоя);
		ВремяПростоя = 0;
		Для Каждого СтрокаПРостоя из НайденыСтроки Цикл
			ВремяПростоя = ВремяПростоя + (СтрокаПРостоя.ВремяОкончания - СтрокаПРостоя.ВремяНачала);
		КонецЦикла;                      
		ВремяПростояЧас = ВремяПростоя/3600;
		пРазница = ВремяПростояЧас - Цел(ВремяПростояЧас);
		пМин = пРазница * 60;
		СтрокаОборудования.ПростоиОборудования =  Строка(Цел(ВремяПростояЧас))+"ч."+Формат(пМин,"ЧЦ=2; ЧВН=")+"мин";
		//СтрокаОборудования.ПростоиОборудования = Строка(ВремяПростоя)+" сек";

	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКолонкиВремяРаботыОборудование()
	Для Каждого СтрокаОборудование из объект.вт_ОборудованиеПроизводства Цикл
		   //Расчетное время
		   ОтборТоваров = Новый Структура("Оборудование,КлючСвязиОборудования",СтрокаОборудование.Оборудование,СтрокаОборудование.КодСтроки);
		   МассивСтрокТовары = Объект.Товары.НайтиСтроки(ОтборТоваров);
		   РасчетноеВремяРаботы = 0;
		   Для каждого СтрокаПроизводительность из МассивСтрокТовары Цикл
			   
			   Если ЗначениеЗаполнено(СтрокаПроизводительность.ВариантПроизводства.ВремяПроизводстваСек) Тогда
				   ВремяПроизводстваСек = ЗначениеРеквизита(СтрокаПроизводительность.ВариантПроизводства,"ВремяПроизводстваСек");
			   Иначе
				   ВремяПроизводстваСек = ЗначениеРеквизита(СтрокаПроизводительность.ВариантПроизводства,"ВремяПроизводстваЧас")/3600;
			   КонецЕсли;
			   вт_ВремяОтливкиДеталиСек = ВремяПроизводстваСек;// СтрокаПроизводительность.ВариантПроизводства.ВремяПроизводстваСек;// ЗначениеРеквизита(СтрокаПроизводительность.Номенклатура,"вт_ВремяОтливкиДеталиСек");
			   вт_производительность = ?(ЗначениеЗаполнено(ВремяПроизводстваСек),ВремяПроизводстваСек,вт_ВремяОтливкиДеталиСек);
			   
			   РасчетноеВремяРаботы =  РасчетноеВремяРаботы + СтрокаПроизводительность.КоличествоПлан * вт_производительность ; //приводим к минутам
		   КонецЦикла;
		   //РасчВремяРаботыЧас = РасчетноеВремяРаботы/3600;
		   //пРазница = РасчВремяРаботыЧас - Цел(РасчВремяРаботыЧас);
		   //пМин = пРазница * 60;
		   //СтрокаОборудование.РасчетноеВремяРаботы =  Строка(Цел(РасчВремяРаботыЧас))+"ч."+Формат(пМин,"ЧЦ=2; ЧВН=")+"мин";
		   СтрокаОборудование.РасчетноеВремяРаботы = Строка(РасчетноеВремяРаботы)+" сек";  
		   
		   //Фактическое время с учетом простоев
		   //Если РеквизитДеньНочь = 2 Тогда
		   Если СтрокаОборудование.ВремяОкончанияРаботы < СтрокаОборудование.ВремяНачалаРаботы Тогда
		   		ПериодРаботы = СтрокаОборудование.ВремяОкончанияРаботы - СтрокаОборудование.ВремяНачалаРаботы + 24*3600;
		   Иначе
				ПериодРаботы = СтрокаОборудование.ВремяОкончанияРаботы - СтрокаОборудование.ВремяНачалаРаботы; 
		   КонецЕсли;	
		   
		   ОтборСтрокПростоя = Новый Структура("Оборудование,КлючСвязиОборудования",СтрокаОборудование.Оборудование, СтрокаОборудование.КодСтроки);
		   НайденыСтроки = Объект.вт_ПростоиОборудования.НайтиСтроки(ОтборСтрокПростоя);
		   ВремяПростоя = 0;
		   Для Каждого СтрокаПРостоя из НайденыСтроки Цикл			   
			   Если СтрокаПРостоя.ВремяОкончания < СтрокаПРостоя.ВремяНачала Тогда
		   			ВремяПростояПоСтроке = СтрокаПРостоя.ВремяОкончания - СтрокаПРостоя.ВремяНачала + 24*3600;
		  		Иначе
					ВремяПростояПоСтроке = СтрокаПРостоя.ВремяОкончания - СтрокаПРостоя.ВремяНачала; 
				КонецЕсли;   				
			   ВремяПростоя = ВремяПростоя + ВремяПростояПоСтроке; 
		   КонецЦикла;                      
		   ВремяПростояЧас = ВремяПростоя/3600;
		   пРазница = ВремяПростояЧас - Цел(ВремяПростояЧас);
		   пМин = пРазница * 60;
		   СтрокаОборудование.ПростоиОборудования =  Строка(Цел(ВремяПростояЧас))+"ч."+Формат(пМин,"ЧЦ=2; ЧВН=")+"мин";
		   //СтрокаОборудование.ПростоиОборудования = Строка(ВремяПростоя)+" сек";
		   
		   ФактическийПериодРаботы = ПериодРаботы - ВремяПростоя;
		   //ФактПериодРаботыЧас = ФактическийПериодРаботы/3600;
		   //пРазница = ФактПериодРаботыЧас - Цел(ФактПериодРаботыЧас);
		   //пМин = пРазница * 60;
		   //СтрокаОборудование.ФактическоеВремяРаботы =  Строка(Цел(ФактПериодРаботыЧас))+"ч."+Формат(пМин,"ЧЦ=2; ЧВН=")+"мин";
		   СтрокаОборудование.ФактическоеВремяРаботы = Строка(ФактическийПериодРаботы)+" сек";
		   
		   ОтклонениеОтНормы = РасчетноеВремяРаботы - ФактическийПериодРаботы;
		   СтрокаОборудование.ОтклонениеОтНормы = Строка(ОтклонениеОтНормы)+" сек";
		   СтрокаОборудование.ОтклонениеОтНормыСекЧисло = ОтклонениеОтНормы;
		   
	   КонецЦикла;  
	  		
КонецПроцедуры

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваВремяНачалаРаботыПриИзменении(Элемент)
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();
КонецПроцедуры

&НаКлиенте
Процедура вт_ОборудованиеПроизводстваВремяОкончанияРаботыПриИзменении(Элемент)
	ОбновитьДанныеКолонкиВремяРаботыОборудование();
	ОбновитьДанныеКолонкиВремяПроизводстваШтПлан();
	ОбновитьДанныеКолонкиВремяПроизводстваШтФакт();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитПоказатьОборудованиеПриИзменении(Элемент)
	Элементы.вт_ОборудованиеПроизводства.Видимость=РеквизитПоказатьОборудование;
	Если не РеквизитПоказатьОборудование Тогда
		 Элементы.Товары.ОтборСтрок=неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНаСервере()
	Если УсловноеОформление.Элементы.Количество()>0 Тогда 
	    //Возврат;
		УсловноеОформление.Элементы.Очистить();
   КонецЕсли;
   
   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.вт_ОборудованиеПроизводства.ОтклонениеОтНормыСекЧисло");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
   ЭлементУсловия.ПравоеЗначение = 0;
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("вт_ОборудованиеПроизводстваОтклонениеОтНормы");

   
   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Зеленый);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.вт_ОборудованиеПроизводства.ОтклонениеОтНормыСекЧисло");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
   ЭлементУсловия.ПравоеЗначение = 0;
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("вт_ОборудованиеПроизводстваОтклонениеОтНормы");
   
   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВремяПроизводстваШтФакт");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
   ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВремяПроизводстваШтПлан");
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыВремяПроизводстваШтФакт");

   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Зеленый);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВремяПроизводстваШтФакт");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
   ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВремяПроизводстваШтПлан");  
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыВремяПроизводстваШтФакт");
   
   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесОбщий");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
   ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесДетали");
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыВесОбщий");

   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Зеленый);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесОбщий");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
   ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВесДетали");  
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТоварыВесОбщий");
   
   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.вт_ПроизводствоСырье.РасхожденияКоличество");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
   ЭлементУсловия.ПравоеЗначение = 0;
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Таблица1РасхожденияКоличество");

   ЭлементУО = УсловноеОформление.Элементы.Добавить();
   ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Зеленый);
   ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.вт_ПроизводствоСырье.РасхожденияКоличество");
   ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
   ЭлементУсловия.ПравоеЗначение = 0;  
   ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
   ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Таблица1РасхожденияКоличество");
   
   
   //

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь);

	//
     
КонецПроцедуры	

&НаСервере
Процедура  ОбновитьДанныеКолонкиВремяПроизводстваШтПлан()
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		ВремяПроизводства = 0;
		Если ЗначениеЗаполнено(СтрокаТовары.ВариантПроизводства.ВремяПроизводстваСек) Тогда
			ВремяПроизводства = СтрокаТовары.ВариантПроизводства.ВремяПроизводстваСек; 
		Иначе
			ВремяПроизводства = СтрокаТовары.ВариантПроизводства.ВремяПроизводстваЧас*3600;//Приводим часы в  секунды 
		КонецЕсли;
		ВремяПроизводства1Шт = ВремяПроизводства / ?(СтрокаТовары.ВариантПроизводства.Количество=0,1, СтрокаТовары.ВариантПроизводства.Количество);
		
		СтрокаТовары.ВремяПроизводстваШтПлан  = СтрокаТовары.КоличествоПлан * ВремяПроизводства1Шт;
		Если СтрокаТовары.ВремяПроизводстваШтФакт = 0 ТОгда 
		 СтрокаТовары.ВремяПроизводстваШтФакт = СтрокаТовары.ВремяПроизводстваШтПлан;
	 	КонецЕсли;
	 
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура  ОбновитьДанныеКолонкиВремяПроизводстваШтФакт()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.КоличествоПлан,
	               |	Товары.КлючСвязиОборудования
	               |ПОМЕСТИТЬ ВТ_Товары1
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВТ_Товары.КоличествоПлан) КАК КоличествоПлан,
	               |	ВТ_Товары.КлючСвязиОборудования
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	ВТ_Товары1 КАК ВТ_Товары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Товары.КлючСвязиОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_ОборудованиеПроизводства.ФактическоеВремяРаботы,
	               |	вт_ОборудованиеПроизводства.КодСтроки
	               |ПОМЕСТИТЬ ВТ_ОборудованиеПроизводства
	               |ИЗ
	               |	&вт_ОборудованиеПроизводства КАК вт_ОборудованиеПроизводства
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.КлючСвязиОборудования,
	               |	ВТ_ОборудованиеПроизводства.ФактическоеВремяРаботы,
	               |	ВТ_Товары.КоличествоПлан
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОборудованиеПроизводства КАК ВТ_ОборудованиеПроизводства
	               |		ПО ВТ_Товары.КлючСвязиОборудования = ВТ_ОборудованиеПроизводства.КодСтроки";
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("вт_ОборудованиеПроизводства",Объект.вт_ОборудованиеПроизводства.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаВремяПроизводстваШтФакт = РезультатЗапроса.Выгрузить();
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Для Каждого СтрокаТаб Из ТаблицаВремяПроизводстваШтФакт Цикл
				Если СтрокаТовары.КлючСвязиОборудования = СтрокаТаб.КлючСвязиОборудования И СтрокаТаб.КоличествоПлан<>0 И СтрокаТаб.ФактическоеВремяРаботы<>"" Тогда
					СтрокаТовары.ВремяПроизводстваШтФакт = Число(Лев(СтрокаТаб.ФактическоеВремяРаботы,СтрДлина(СтрокаТаб.ФактическоеВремяРаботы)-4))/СтрокаТаб.КоличествоПлан;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция ПолучитьСтруктуруДробленки(ДробленкаКлючСвязиСтроки)
	СтруктураДробленка = Новый Структура;
	Для каждого	СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.КодСтроки = ДробленкаКлючСвязиСтроки Тогда
			СтруктураДробленка.Вставить("ВесДеталиФактическийГ",СтрокаТовары.ВесОбщий);
			СтруктураДробленка.Вставить("ВсегоИзготовлено",СтрокаТовары.КоличествоПлан);
			СтруктураДробленка.Вставить("ВесЛитник1ДеталиКг",СтрокаТовары.ВариантПроизводства.ВесЛитника);
			Возврат СтруктураДробленка;
		КонецЕсли;	
	КонецЦикла;	
КонецФункции	

&НаСервере
Процедура ЗаполнитьРасхождение_вт_ПроизводствоСырье()
	Для Каждого СтрокаСырье Из Объект.вт_ПроизводствоСырье Цикл
		СтрокаСырье.РасхожденияКоличество = СтрокаСырье.Количество - СтрокаСырье.КоличествоПлан; 	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_ОтчетПроизводства");
	
	ОбластьШапка 		   			   = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаНачало    			   = Макет.ПолучитьОбласть("СтрокаНачало");
	ОбластьСтрокаСерединка 			   = Макет.ПолучитьОбласть("СтрокаСерединка");
	ОбластьСтрокаСерединкаОборудования = Макет.ПолучитьОбласть("СтрокаСерединкаОборудование");
	ОбластьСтрокаКонец     			   = Макет.ПолучитьОбласть("СтрокаКонец");

		
	ТабДок.Очистить();
	ОбластьШапка.Параметры.ДатаДокумента = Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"г.";
	Если РеквизитДеньНочь = 1 Тогда
		пДеньНочь = "(День)";	
	ИначеЕсли РеквизитДеньНочь = 2 Тогда
		пДеньНочь = "(Ночь)";
	КонецЕсли;	
	ОбластьШапка.Параметры.СменаДокумента = "смена №" + Строка(РеквизитДеньНочь) + пДеньНочь;
	ТабДок.Вывести(ОбластьШапка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество,
		|	вт_ОтчетПроизводстваТовары.Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оборудование,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяНачалаРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяОкончанияРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.КодСтроки,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оператор
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	&вт_ОборудованиеПроизводства КАК вт_ОтчетПроизводствавт_ОборудованиеПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Оборудование.Оборудование, ЗНАЧЕНИЕ(Справочник.вт_ОборудованиеПроизводства.ПустаяСсылка)) КАК Оборудование,
		|	ЕСТЬNULL(ВТ_Оборудование.ВремяНачалаРаботы, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяНачалаРаботы,
		|	ЕСТЬNULL(ВТ_Оборудование.ВремяОкончанияРаботы, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяОкончанияРаботы,
		|	ЕСТЬNULL(ВТ_Оборудование.Оператор, "" "") КАК Оператор,
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.Характеристика,
		|	ВТ_Товары.Количество,
		|	ВТ_Товары.Цена,
		|	ВТ_Товары.Сумма,
		|	ВТ_Товары.БракКолВо,
		|	ВТ_Товары.КоличествоПлан,
		|	ВТ_Товары.ВесОбщий,
		|	ВТ_Товары.ВариантПроизводства,
		|	ВТ_Товары.МатериалОтхода,
		|	ВТ_Товары.ОбъемОтхода,
		|	ВТ_Товары.ВариантОбработкиБрака,
		|	ВТ_Товары.КлючСвязиОборудования,
		|	ВТ_Товары.ВесДетали,
		|	ВТ_Товары.ВремяПроизводстваШтПлан,
		|	ВТ_Товары.ВремяПроизводстваШтФакт,
		|	ВТ_Товары.КодСтроки Как КодСтрокиТовары
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
		|		ПО ВТ_Товары.КлючСвязиОборудования = ВТ_Оборудование.КодСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Оборудование";
		
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("вт_ОборудованиеПроизводства",Объект.вт_ОборудованиеПроизводства.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
		ПредыдущаяСтрокаОборудования = Неопределено;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Если ПредыдущаяСтрокаОборудования <> Неопределено Тогда
				Если ПредыдущаяСтрокаОборудования <> ВыборкаДетальныеЗаписи.Оборудование Тогда			
					ОбластьСтрокаНачало.Параметры.НомерТПА = Строка(ВыборкаДетальныеЗаписи.Оборудование);
					ОбластьСтрокаНачало.Параметры.АРТНаименованиеИзделия = Строка(ВыборкаДетальныеЗаписи.Номенклатура);
					ОбластьСтрокаНачало.Параметры.ФИООператора = Строка(ВыборкаДетальныеЗаписи.Оператор); 
					ОбластьСтрокаНачало.Параметры.НачалоРаботы = Формат(ВыборкаДетальныеЗаписи.ВремяНачалаРаботы,"ДЛФ=T"); 
					ОбластьСтрокаНачало.Параметры.ОкончаниеРаботы = Формат(ВыборкаДетальныеЗаписи.ВремяОкончанияРаботы,"ДЛФ=T");
					ПВремяРаботы = ВычестьВремя(ВыборкаДетальныеЗаписи.ВремяНачалаРаботы, ВыборкаДетальныеЗаписи.ВремяОкончанияРаботы);
					ОбластьСтрокаНачало.Параметры.ВремяРаботыТПАвМинутах = Цел(ПВремяРаботы/60);		
					ОбластьСтрокаНачало.Параметры.ВремяРаботыТПАвСекундах = ПВремяРаботы;  			         
					ОбластьСтрокаНачало.Параметры.КолвоЗалитых = ВыборкаДетальныеЗаписи.КоличествоПлан;           
					ОбластьСтрокаНачало.Параметры.ОбщееКолвоБрака = ВыборкаДетальныеЗаписи.БракКолВо;        
					ОбластьСтрокаНачало.Параметры.КолвоБезБрака = ВыборкаДетальныеЗаписи.Количество;           
					ОбластьСтрокаНачало.Параметры.ВесПоТехКарте = ВыборкаДетальныеЗаписи.ВесДетали;   		
					ОбластьСтрокаНачало.Параметры.ВесПоФакту = ВыборкаДетальныеЗаписи.ВесОбщий;             
					ОбластьСтрокаНачало.Параметры.ОтклонениеВВесе = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;        
					ОбластьСтрокаНачало.Параметры.ЦиклПоТехКарте = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан;         
					ОбластьСтрокаНачало.Параметры.ЦиклПоФакту = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт;            
					ОбластьСтрокаНачало.Параметры.ОтклонениеВЦикле = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан;        
					ОбластьСтрокаНачало.Параметры.МаркаСырья = ПолучитьМатериалСырья(ВыборкаДетальныеЗаписи.КодСтрокиТовары);  								
					Если Объект.вт_ПростоиОборудования.Количество()>0 Тогда
					ФлагНачало = Истина;
					ФлагОтсутствияПростояОборудования = Истина;
					Для Каждого СтрокаПростойОборудования из Объект.вт_ПростоиОборудования Цикл
						Если ВыборкаДетальныеЗаписи.КлючСвязиОборудования = СтрокаПростойОборудования.КлючСвязиОборудования Тогда
							Если ФлагНачало Тогда
								ОбластьСтрокаНачало.Параметры.ВремяОстановкиТПА = ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания);		    
								ОбластьСтрокаНачало.Параметры.ПричинаБракаИОстановкиТПА = СтрокаПростойОборудования.Комментарий;
								ОбластьСтрокаНачало.Параметры.КолвоБрака = ""; 
								ТабДок.Вывести(ОбластьСтрокаНачало);
								ФлагНачало = Ложь;
								ФлагОтсутствияПростояОборудования = Ложь;
							Иначе 							
								ОбластьСтрокаСерединка.Параметры.ВремяОстановкиТПА = ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания);		    
								ОбластьСтрокаСерединка.Параметры.ПричинаБракаИОстановкиТПА = СтрокаПростойОборудования.Комментарий;
								ОбластьСтрокаСерединка.Параметры.КолвоБрака = ""; 
								ТабДок.Вывести(ОбластьСтрокаСерединка);	
								ФлагОтсутствияПростояОборудования = Ложь; 
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла; 
					Если ФлагОтсутствияПростояОборудования Тогда
						ТабДок.Вывести(ОбластьСтрокаНачало);	
					КонецЕсли;	  
					Иначе
						ТабДок.Вывести(ОбластьСтрокаНачало);	
					КонецЕсли;	
				Иначе										
					ОбластьСтрокаСерединкаОборудования.Параметры.АРТНаименованиеИзделия = Строка(ВыборкаДетальныеЗаписи.Номенклатура);
					ОбластьСтрокаСерединкаОборудования.Параметры.КолвоЗалитых = ВыборкаДетальныеЗаписи.КоличествоПлан;           
					ОбластьСтрокаСерединкаОборудования.Параметры.ОбщееКолвоБрака = ВыборкаДетальныеЗаписи.БракКолВо;        
					ОбластьСтрокаСерединкаОборудования.Параметры.КолвоБезБрака = ВыборкаДетальныеЗаписи.Количество;           
					ОбластьСтрокаСерединкаОборудования.Параметры.ВесПоТехКарте = ВыборкаДетальныеЗаписи.ВесДетали;   		
					ОбластьСтрокаСерединкаОборудования.Параметры.ВесПоФакту = ВыборкаДетальныеЗаписи.ВесОбщий;             
					ОбластьСтрокаСерединкаОборудования.Параметры.ОтклонениеВВесе = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;        
					ОбластьСтрокаСерединкаОборудования.Параметры.ЦиклПоТехКарте = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан;         
					ОбластьСтрокаСерединкаОборудования.Параметры.ЦиклПоФакту = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт;            
					ОбластьСтрокаСерединкаОборудования.Параметры.ОтклонениеВЦикле = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан;        
					ОбластьСтрокаСерединкаОборудования.Параметры.МаркаСырья = ПолучитьМатериалСырья(ВыборкаДетальныеЗаписи.КодСтрокиТовары);  	
					ТабДок.Вывести(ОбластьСтрокаСерединкаОборудования);	
				КонецЕсли;
			Иначе
				ОбластьСтрокаНачало.Параметры.НомерТПА = Строка(ВыборкаДетальныеЗаписи.Оборудование);
				ОбластьСтрокаНачало.Параметры.АРТНаименованиеИзделия = Строка(ВыборкаДетальныеЗаписи.Номенклатура);
				ОбластьСтрокаНачало.Параметры.ФИООператора = Строка(ВыборкаДетальныеЗаписи.Оператор); 
				ОбластьСтрокаНачало.Параметры.НачалоРаботы = Формат(ВыборкаДетальныеЗаписи.ВремяНачалаРаботы,"ДЛФ=T"); 
				ОбластьСтрокаНачало.Параметры.ОкончаниеРаботы = Формат(ВыборкаДетальныеЗаписи.ВремяОкончанияРаботы,"ДЛФ=T");
				ПВремяРаботы = ВычестьВремя(ВыборкаДетальныеЗаписи.ВремяНачалаРаботы, ВыборкаДетальныеЗаписи.ВремяОкончанияРаботы);
				ОбластьСтрокаНачало.Параметры.ВремяРаботыТПАвМинутах = Цел(ПВремяРаботы/60);		
				ОбластьСтрокаНачало.Параметры.ВремяРаботыТПАвСекундах = ПВремяРаботы;  			         
				ОбластьСтрокаНачало.Параметры.КолвоЗалитых = ВыборкаДетальныеЗаписи.КоличествоПлан;           
				ОбластьСтрокаНачало.Параметры.ОбщееКолвоБрака = ВыборкаДетальныеЗаписи.БракКолВо;        
				ОбластьСтрокаНачало.Параметры.КолвоБезБрака = ВыборкаДетальныеЗаписи.Количество;           
				ОбластьСтрокаНачало.Параметры.ВесПоТехКарте = ВыборкаДетальныеЗаписи.ВесДетали;   		
				ОбластьСтрокаНачало.Параметры.ВесПоФакту = ВыборкаДетальныеЗаписи.ВесОбщий;             
				ОбластьСтрокаНачало.Параметры.ОтклонениеВВесе = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;        
				ОбластьСтрокаНачало.Параметры.ЦиклПоТехКарте = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан;         
				ОбластьСтрокаНачало.Параметры.ЦиклПоФакту = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт;            
				ОбластьСтрокаНачало.Параметры.ОтклонениеВЦикле = ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан;        
				ОбластьСтрокаНачало.Параметры.МаркаСырья = ПолучитьМатериалСырья(ВыборкаДетальныеЗаписи.КодСтрокиТовары);  	
							
				Если Объект.вт_ПростоиОборудования.Количество()>0 Тогда
					ФлагНачало = Истина;
					ФлагОтсутствияПростояОборудования = Истина;
					Для Каждого СтрокаПростойОборудования из Объект.вт_ПростоиОборудования Цикл
						Если ВыборкаДетальныеЗаписи.КлючСвязиОборудования = СтрокаПростойОборудования.КлючСвязиОборудования Тогда
							Если ФлагНачало Тогда
								ОбластьСтрокаНачало.Параметры.ВремяОстановкиТПА = ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания);		    
								ОбластьСтрокаНачало.Параметры.ПричинаБракаИОстановкиТПА = СтрокаПростойОборудования.Комментарий;
								ОбластьСтрокаНачало.Параметры.КолвоБрака = ""; 
								ТабДок.Вывести(ОбластьСтрокаНачало);
								ФлагНачало = Ложь;
								ФлагОтсутствияПростояОборудования = Ложь;
							Иначе 							
								ОбластьСтрокаСерединка.Параметры.ВремяОстановкиТПА = ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания);		    
								ОбластьСтрокаСерединка.Параметры.ПричинаБракаИОстановкиТПА = СтрокаПростойОборудования.Комментарий;
								ОбластьСтрокаСерединка.Параметры.КолвоБрака = ""; 
								ТабДок.Вывести(ОбластьСтрокаСерединка);	
								ФлагОтсутствияПростояОборудования = Ложь; 
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла; 
					Если ФлагОтсутствияПростояОборудования Тогда
						ТабДок.Вывести(ОбластьСтрокаНачало);	
					КонецЕсли;	
				Иначе
					ТабДок.Вывести(ОбластьСтрокаНачало);	
				КонецЕсли;	
			КонецЕсли;	
			ПредыдущаяСтрокаОборудования = ВыборкаДетальныеЗаписи.Оборудование;
		КонецЦикла;	
		
	КонецЕсли;	
	
	ТабДок.Вывести(ОбластьСтрокаКонец);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу  = 5;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ВычестьВремя(пВремяНачалаРаботы, пВремяОкончанияРаботы)
			
	Если пВремяОкончанияРаботы > пВремяНачалаРаботы Тогда
		ПВремяРаботы = пВремяОкончанияРаботы - пВремяНачалаРаботы;
	Иначе
		ПВремяРаботы = пВремяОкончанияРаботы - пВремяНачалаРаботы + 24*3600 ;
	КонецЕсли;
	Возврат ПВремяРаботы;
	
КонецФункции

&НаСервере
Функция ПолучитьМатериалСырья(пКодСтрокиТовары)
Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.КоличествоПлан,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.КлючСвязиСтроки
		|ПОМЕСТИТЬ ВТ_Сырье
		|ИЗ
		|	&вт_ПроизводствоСырье КАК вт_ОтчетПроизводствавт_ПроизводствоСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сырье.Номенклатура
		|ИЗ
		|	ВТ_Сырье КАК ВТ_Сырье
		|ГДЕ
		|	ВТ_Сырье.КлючСвязиСтроки = &КлючСвязиСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Сырье.КоличествоПлан УБЫВ";
		
	Запрос.УстановитьПараметр("вт_ПроизводствоСырье",Объект.вт_ПроизводствоСырье.Выгрузить());
	Запрос.УстановитьПараметр("КлючСвязиСтроки",пКодСтрокиТовары);

	РезультатЗапроса = Запрос.Выполнить(); 
	пСтрока = "";
	пЭтикетки = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Этикетки");
	пПакеты =   Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Пакеты");
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Номенклатура.ВидНоменклатуры <> пЭтикетки И ВыборкаДетальныеЗаписи.Номенклатура.ВидНоменклатуры <> пПакеты Тогда 
				Если пСтрока = "" Тогда
					пСтрока = пСтрока + ВыборкаДетальныеЗаписи.Номенклатура;
				Иначе	
					пСтрока = пСтрока + ";" + Символы.ПС + ВыборкаДетальныеЗаписи.Номенклатура;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	Возврат пСтрока;
КонецФункции


&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница=элементы.ГруппаСырье Тогда
		ЗаполнитьТаблицуСырье();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаБрак Тогда
		ЗаполнитьТаблицуБрак();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуБрак()
	      ТаблицаБрак.Очистить();
		  ТаблГотоваяПродукция = Объект.Товары.Выгрузить(,"Номенклатура,КоличествоПлан,БракКолВо");
		  ТаблГотоваяПродукция.Свернуть("Номенклатура","КоличествоПлан,БракКолВо");
		  ВремТаблБрака = ТаблГотоваяПродукция.СкопироватьКолонки();
		  ВремТаблБрака.Колонки.Получить(0).Имя="ГотоваяПродукция";
		  ВремТаблБрака.Колонки.Получить(1).Имя="ВсегоИзготовлено";
		  ВремТаблБрака.Колонки.Получить(2).Имя="КоличествоБрака";
		  ВремТаблБрака.Колонки.Добавить("НоменклатураБрака");
		  //++14.06.2019
		  ВремТаблБрака.Колонки.Добавить("ХарактеристикаБрака");
		  //--14.06.2019
		  ВремТаблБрака.Колонки.Добавить("ВесБрака");
		  
		  Для Каждого СтрокаГотоваяПродукция из ТаблГотоваяПродукция Цикл
			  ОтборСтрок = Новый Структура("ГотоваяПродукция",СтрокаГотоваяПродукция.Номенклатура);
			  НайденыСтрокиБрака = Объект.вт_БракДробленка.НайтиСтроки(ОтборСтрок);
			  Для Каждого СтрокаБракДробленка из НайденыСтрокиБрака Цикл
				  НоваяСтрокаБрак = ВремТаблБрака.Добавить();
				  НоваяСтрокаБрак.ГотоваяПродукция = СтрокаГотоваяПродукция.Номенклатура;
				  НоваяСтрокаБрак.ВсегоИзготовлено = СтрокаГотоваяПродукция.КоличествоПлан;
				  НоваяСтрокаБрак.КоличествоБрака = СтрокаГотоваяПродукция.БракКолВо;
				  
				  НоваяСтрокаБрак.НоменклатураБрака = СтрокаБракДробленка.Дробленка;
				  НоваяСтрокаБрак.ХарактеристикаБрака = СтрокаБракДробленка.Характеристика;
				  НоваяСтрокаБрак.ВесБрака = СтрокаБракДробленка.Количество;
				  
			  КонецЦикла;
		  КонецЦикла;
		  
		  ВремТаблБрака.Свернуть("ГотоваяПродукция,ВсегоИзготовлено,КоличествоБрака,НоменклатураБрака,ХарактеристикаБрака","ВесБрака");
		  ТаблицаБрак.Загрузить(ВремТаблБрака);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСырье()
  ТаблицаСырьеИтог.Очистить();
  ТаблСырьеКоличество = Объект.вт_ПроизводствоСырье.Выгрузить(,"Номенклатура,Количество");
  ТаблСырьеКоличество.Свернуть("Номенклатура","Количество");
  ТаблицаСырьеИтог.Загрузить(ТаблСырьеКоличество);
  ТаблицаСырьеИтог.Сортировать("Номенклатура");
 
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНовая(Команда)
	ТабДок = ПечатьНоваяНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьНоваяНаСервере()
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_ОтчетПроизводства_новый");
	
	ОбластьШапка 		   			   = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаСерединка 			   = Макет.ПолучитьОбласть("СтрокаСерединка");
	ОбластьСтрокаНачалоПростоя		   = Макет.ПолучитьОбласть("СтрокаНачалоПростоя");
	ОбластьСтрокаСерединкаПростоя	   = Макет.ПолучитьОбласть("СтрокаСерединкаПростоя");
	ОбластьСтрокаНачалоПростоя2 	   = Макет.ПолучитьОбласть("СтрокаНачалоПростоя2");
	ОбластьПодвал        			   = Макет.ПолучитьОбласть("Подвал");

		
	ТабДок.Очистить();
	ОбластьШапка.Параметры.ДатаДокумента = Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"г.";
	Если РеквизитДеньНочь = 1 Тогда
		пДеньНочь = "(День)";	
	ИначеЕсли РеквизитДеньНочь = 2 Тогда
		пДеньНочь = "(Ночь)";
	КонецЕсли;	
	ОбластьШапка.Параметры.СменаДокумента = "смена №" + Строка(РеквизитДеньНочь) + пДеньНочь;
	ТабДок.Вывести(ОбластьШапка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество,
		|	вт_ОтчетПроизводстваТовары.Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оборудование,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяНачалаРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяОкончанияРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.КодСтроки,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оператор
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	&вт_ОборудованиеПроизводства КАК вт_ОтчетПроизводствавт_ОборудованиеПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Оборудование.Оборудование, ЗНАЧЕНИЕ(Справочник.вт_ОборудованиеПроизводства.ПустаяСсылка)) КАК Оборудование,
		|	ЕСТЬNULL(ВТ_Оборудование.ВремяНачалаРаботы, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяНачалаРаботы,
		|	ЕСТЬNULL(ВТ_Оборудование.ВремяОкончанияРаботы, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяОкончанияРаботы,
		|	ЕСТЬNULL(ВТ_Оборудование.Оператор, "" "") КАК Оператор,
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.Характеристика,
		|	ВТ_Товары.Количество,
		|	ВТ_Товары.Цена,
		|	ВТ_Товары.Сумма,
		|	ВТ_Товары.БракКолВо,
		|	ВТ_Товары.КоличествоПлан,
		|	ВТ_Товары.ВесОбщий,
		|	ВТ_Товары.ВариантПроизводства,
		|	ВТ_Товары.МатериалОтхода,
		|	ВТ_Товары.ОбъемОтхода,
		|	ВТ_Товары.ВариантОбработкиБрака,
		|	ВТ_Товары.КлючСвязиОборудования,
		|	ВТ_Товары.ВесДетали,
		|	ВТ_Товары.ВремяПроизводстваШтПлан,
		|	ВТ_Товары.ВремяПроизводстваШтФакт,
		|	ВТ_Товары.КодСтроки КАК КодСтрокиТовары
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
		|		ПО ВТ_Товары.КлючСвязиОборудования = ВТ_Оборудование.КодСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Оборудование";
		
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("вт_ОборудованиеПроизводства",Объект.вт_ОборудованиеПроизводства.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
		ПредыдущаяСтрокаОборудования = Неопределено;		 
		СтрокаДок = 4;
		НачалоСтрокиНоменклатура = 4;
		НачалоСтрокиОборудование = 4;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Если ПредыдущаяСтрокаОборудования = Неопределено Тогда
				ОбластьСтрокаНачало    			   = Макет.ПолучитьОбласть("СтрокаНачало");   
				ОбластьСтрокаНачало.Параметры.Оборудование = Строка(ВыборкаДетальныеЗаписи.Оборудование);
			ИначеЕсли ПредыдущаяСтрокаОборудования <> ВыборкаДетальныеЗаписи.Оборудование Тогда
				Область = ТабДок.Область(НачалоСтрокиОборудование+1,2,СтрокаДок,2);
				Область.Объединить();
				НачалоСтрокиОборудование = СтрокаДок;
				ОбластьСтрокаНачало    			   = Макет.ПолучитьОбласть("СтрокаНачало"); 
				ОбластьСтрокаНачало.Параметры.Оборудование = Строка(ВыборкаДетальныеЗаписи.Оборудование);
			Иначе
				ОбластьСтрокаНачало    			   = Макет.ПолучитьОбласть("СтрокаНачало2");
			КонецЕсли;	
			 			
			ОбластьСтрокаНачало.Параметры.Номенклатура = Строка(ВыборкаДетальныеЗаписи.Номенклатура) + Строка(ВыборкаДетальныеЗаписи.Характеристика);
			ОбластьСтрокаНачало.Параметры.ФИОператора = Строка(ВыборкаДетальныеЗаписи.Оператор); 
			ОбластьСтрокаНачало.Параметры.НачалоРаботы = Формат(ВыборкаДетальныеЗаписи.ВремяНачалаРаботы,"ДЛФ=T"); 
			ОбластьСтрокаНачало.Параметры.ОкончаниеРаботы = Формат(ВыборкаДетальныеЗаписи.ВремяОкончанияРаботы,"ДЛФ=T");								         
			ОбластьСтрокаНачало.Параметры.Всего = ВыборкаДетальныеЗаписи.КоличествоПлан;           
			пБрак = НахождениеБракСБезДекора(ВыборкаДетальныеЗаписи.КодСтрокиТовары);					
			ОбластьСтрокаНачало.Параметры.БракСДекоромШт = пБрак.СДекоромШт; 
			ОбластьСтрокаНачало.Параметры.БракБезДекораШт = пБрак.БезДекораШт;   
			ОбластьСтрокаНачало.Параметры.Ликвидные = ВыборкаДетальныеЗаписи.Количество;           
			ОбластьСтрокаНачало.Параметры.ВесГр = ВыборкаДетальныеЗаписи.ВесДетали;//вес_норма   							          
			ОбластьСтрокаНачало.Параметры.Циклсек = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан) + " сек";//цикл_план        					
			ОбластьСтрокаНачало.Параметры.МаркаСырья = ПолучитьМатериалСырья(ВыборкаДетальныеЗаписи.КодСтрокиТовары);  								
			Если Объект.вт_ПростоиОборудования.Количество()>0 Тогда
				нСтрока = 0;
				ФлагОтсутствияПростояОборудования = Истина;
				Для Каждого СтрокаПростойОборудования из Объект.вт_ПростоиОборудования Цикл
					Если ВыборкаДетальныеЗаписи.КлючСвязиОборудования = СтрокаПростойОборудования.КлючСвязиОборудования Тогда
						нСтрока = нСтрока + 1;   
						Если нСтрока = 1 Тогда
							ОбластьСтрокаНачало.Параметры.НачалоПростоя    = Формат(СтрокаПростойОборудования.ВремяНачала,"ДЛФ=T");
							ОбластьСтрокаНачало.Параметры.ОкончаниеПростоя = Формат(СтрокаПростойОборудования.ВремяОкончания,"ДЛФ=T");
							ОбластьСтрокаНачало.Параметры.ПричинаПростоя   = СтрокаПростойОборудования.Комментарий;
							ТабДок.Вывести(ОбластьСтрокаНачало); 
							СтрокаДок = СтрокаДок + 1; 
							ОбластьСтрокаСерединка.Параметры.Брак         = ВыборкаДетальныеЗаписи.БракКолВо; 
							ОбластьСтрокаСерединка.Параметры.ВремяПростоя = Строка(ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания)) + " сек";		    
							ОбластьСтрокаСерединка.Параметры.ВесГр   	  = ВыборкаДетальныеЗаписи.ВесОбщий;//вес_факт
							ОбластьСтрокаСерединка.Параметры.Циклсек 	  = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт) + " сек";//цикл_факт 
							ТабДок.Вывести(ОбластьСтрокаСерединка);
							СтрокаДок = СтрокаДок + 1;
							ФлагОтсутствияПростояОборудования = Ложь;  									
						ИначеЕсли нСтрока = 2 Тогда
							ОбластьСтрокаНачалоПростоя.Параметры.НачалоПростоя    = Формат(СтрокаПростойОборудования.ВремяНачала,"ДЛФ=T");
							ОбластьСтрокаНачалоПростоя.Параметры.ОкончаниеПростоя = Формат(СтрокаПростойОборудования.ВремяОкончания,"ДЛФ=T");
							ОбластьСтрокаНачалоПростоя.Параметры.ПричинаПростоя   = СтрокаПростойОборудования.Комментарий;
							ОбластьСтрокаНачалоПростоя.Параметры.ВесГр   		  = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;//вес_отклонение      
							ОбластьСтрокаНачалоПростоя.Параметры.Циклсек 		  = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан) + " сек";//цикл_отклонение        									
							ТабДок.Вывести(ОбластьСтрокаНачалоПростоя); 
							СтрокаДок = СтрокаДок + 1; 
							ОбластьСтрокаСерединкаПростоя.Параметры.ВремяПростоя = Строка(ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания)) + " сек";		    
							ТабДок.Вывести(ОбластьСтрокаСерединкаПростоя);	
							СтрокаДок = СтрокаДок + 1;
						ИначеЕсли нСтрока > 2 Тогда									
							ОбластьСтрокаНачалоПростоя2.Параметры.НачалоПростоя    = Формат(СтрокаПростойОборудования.ВремяНачала,"ДЛФ=T");
							ОбластьСтрокаНачалоПростоя2.Параметры.ОкончаниеПростоя = Формат(СтрокаПростойОборудования.ВремяОкончания,"ДЛФ=T");	
							ОбластьСтрокаНачалоПростоя2.Параметры.ПричинаПростоя   = СтрокаПростойОборудования.Комментарий;
							ТабДок.Вывести(ОбластьСтрокаНачалоПростоя2);
							СтрокаДок = СтрокаДок + 1;
							ОбластьСтрокаСерединкаПростоя.Параметры.ВремяПростоя  = Строка(ВычестьВремя(СтрокаПростойОборудования.ВремяНачала, СтрокаПростойОборудования.ВремяОкончания)) + " сек";		    
							ТабДок.Вывести(ОбластьСтрокаСерединкаПростоя);
							СтрокаДок = СтрокаДок + 1;
						КонецЕсли;									 								
					КонецЕсли;							
				КонецЦикла; 
				Если ФлагОтсутствияПростояОборудования Тогда
					ТабДок.Вывести(ОбластьСтрокаНачало);
					СтрокаДок = СтрокаДок + 1;
					ОбластьСтрокаСерединка.Параметры.ВремяПростоя = 0;  
					ОбластьСтрокаСерединка.Параметры.Брак       = ВыборкаДетальныеЗаписи.БракКолВо; 
					ОбластьСтрокаСерединка.Параметры.ВесГр   = ВыборкаДетальныеЗаписи.ВесОбщий;//вес_факт
					ОбластьСтрокаСерединка.Параметры.Циклсек = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт) + " сек";//цикл_факт
					ТабДок.Вывести(ОбластьСтрокаСерединка);
					СтрокаДок = СтрокаДок + 1;
					ОбластьСтрокаСерединка.Параметры.ВремяПростоя = 0;  
					ОбластьСтрокаСерединка.Параметры.Брак = 0;
					ОбластьСтрокаСерединка.Параметры.ВесГр   = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;//вес_отклонение      
					ОбластьСтрокаСерединка.Параметры.Циклсек = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан) + " сек";//цикл_отклонение        
					ТабДок.Вывести(ОбластьСтрокаСерединка);
					СтрокаДок = СтрокаДок + 1;
				ИначеЕсли нСтрока = 1 Тогда	
					ОбластьСтрокаСерединка.Параметры.Брак = 0;
					ОбластьСтрокаСерединка.Параметры.ВесГр   = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;//вес_отклонение      
					ОбластьСтрокаСерединка.Параметры.Циклсек = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан) + " сек";//цикл_отклонение        
					ТабДок.Вывести(ОбластьСтрокаСерединка);
					СтрокаДок = СтрокаДок + 1;
				КонецЕсли;	  
			Иначе
				ТабДок.Вывести(ОбластьСтрокаНачало);
				СтрокаДок = СтрокаДок + 1;
				ОбластьСтрокаСерединка.Параметры.ВремяПростоя = 0;
				ОбластьСтрокаСерединка.Параметры.Брак    = ВыборкаДетальныеЗаписи.БракКолВо; 
				ОбластьСтрокаСерединка.Параметры.ВесГр   = ВыборкаДетальныеЗаписи.ВесОбщий;//вес_факт
				ОбластьСтрокаСерединка.Параметры.Циклсек = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт) + " сек";//цикл_факт
				ТабДок.Вывести(ОбластьСтрокаСерединка);	
				СтрокаДок = СтрокаДок + 1;
				ОбластьСтрокаСерединка.Параметры.Брак = 0;
				ОбластьСтрокаСерединка.Параметры.ВремяПростоя = 0;   
				ОбластьСтрокаСерединка.Параметры.ВесГр   = ВыборкаДетальныеЗаписи.ВесОбщий - ВыборкаДетальныеЗаписи.ВесДетали;//вес_отклонение      
				ОбластьСтрокаСерединка.Параметры.Циклсек = Строка(ВыборкаДетальныеЗаписи.ВремяПроизводстваШтФакт - ВыборкаДетальныеЗаписи.ВремяПроизводстваШтПлан) + " сек";//цикл_отклонение        
				ТабДок.Вывести(ОбластьСтрокаСерединка);	
				СтрокаДок = СтрокаДок + 1;
			КонецЕсли;	
			ПредыдущаяСтрокаОборудования = ВыборкаДетальныеЗаписи.Оборудование;
			Область = ТабДок.Область(НачалоСтрокиНоменклатура+1,3,СтрокаДок,3);
			Область.Объединить();
			Область = ТабДок.Область(НачалоСтрокиНоменклатура+1,4,СтрокаДок,4);
			Область.Объединить();
			Область = ТабДок.Область(НачалоСтрокиНоменклатура+1,17,СтрокаДок,17);
			Область.Объединить(); 
			НачалоСтрокиНоменклатура = СтрокаДок;
		КонецЦикла;	
		Область = ТабДок.Область(НачалоСтрокиОборудование+1,2,СтрокаДок,2);
		Область.Объединить();
	КонецЕсли;	
	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу  = 5;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	
	Возврат ТабДок;
	

КонецФункции

&НаКлиенте
Процедура ПечатьОтчетПоБраку(Команда)
	ТабДок = ПечатьОтчетПоБракуНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьОтчетПоБракуНаСервере()
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_ОтчетПоБраку");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
		
	ТабДок.Очистить();
	ОбластьШапка.Параметры.ДатаДокумента = Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"г.";
	Если РеквизитДеньНочь = 1 Тогда
		пДеньНочь = "(День)";	
	ИначеЕсли РеквизитДеньНочь = 2 Тогда
		пДеньНочь = "(Ночь)";
	КонецЕсли;	
	ОбластьШапка.Параметры.СменаДокумента = "смена №" + Строка(РеквизитДеньНочь) + пДеньНочь;
	ТабДок.Вывести(ОбластьШапка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество,
		|	вт_ОтчетПроизводстваТовары.Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оборудование,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяНачалаРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяОкончанияРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.КодСтроки,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оператор
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	&вт_ОборудованиеПроизводства КАК вт_ОтчетПроизводствавт_ОборудованиеПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.Характеристика,
		|	ВТ_Товары.Количество,
		|	ВТ_Товары.БракКолВо,
		|	ВЫБОР
		|		КОГДА ВТ_Товары.Количество <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВТ_Товары.БракКолВо / ВТ_Товары.Количество КАК ЧИСЛО(5, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентБрака,
		|	ЕСТЬNULL(ВТ_Оборудование.Оператор, "" "") КАК Оператор,
		|	ВТ_Товары.ВариантПроизводства,
		|	ВТ_Товары.КодСтроки КАК КодСтрокиТовары
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
		|		ПО ВТ_Товары.КлючСвязиОборудования = ВТ_Оборудование.КодСтроки";
		
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("вт_ОборудованиеПроизводства",Объект.вт_ОборудованиеПроизводства.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		Нпп = 0;
		ИтогоБракСДекором = 0;
		ИтогоБракБезДекора = 0;
		ИтогоВесЛитника = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Нпп = Нпп + 1;		
			ОбластьСтрока.Параметры.Нпп = Нпп;
			ОбластьСтрока.Параметры.Номенклатура = Строка(ВыборкаДетальныеЗаписи.Номенклатура) + Строка(ВыборкаДетальныеЗаписи.Характеристика);
			ОбластьСтрока.Параметры.РасшифровкаНоменклатуры = ВыборкаДетальныеЗаписи.Номенклатура.Ссылка;
			ОбластьСтрока.Параметры.Всего = ВыборкаДетальныеЗаписи.Количество;
			ОбластьСтрока.Параметры.Брак         = ВыборкаДетальныеЗаписи.БракКолВо; 
			ОбластьСтрока.Параметры.ПроцентБрака = ВыборкаДетальныеЗаписи.ПроцентБрака;
			пБрак = НахождениеБракСБезДекора(ВыборкаДетальныеЗаписи.КодСтрокиТовары);				
			ОбластьСтрока.Параметры.БракСДекоромШт = пБрак.СДекоромШт; 
			ОбластьСтрока.Параметры.БракСДекоромКг = пБрак.СДекоромКг;
			ОбластьСтрока.Параметры.БракБезДекораШт = пБрак.БезДекораШт;
			ОбластьСтрока.Параметры.БракБезДекораКг = пБрак.БезДекораКг;
			ОбластьСтрока.Параметры.ВесЛитника = ВыборкаДетальныеЗаписи.ВариантПроизводства.ВесЛитника * ВыборкаДетальныеЗаписи.Количество;			
			ОбластьСтрока.Параметры.ФИОператора = Строка(ВыборкаДетальныеЗаписи.Оператор);		
			
			ТабДок.Вывести(ОбластьСтрока);	
						
			ИтогоБракСДекором = ИтогоБракСДекором + пБрак.СДекоромКг;
			ИтогоБракБезДекора = ИтогоБракБезДекора + пБрак.БезДекораКг;
			ИтогоВесЛитника = ИтогоВесЛитника + ВыборкаДетальныеЗаписи.ВариантПроизводства.ВесЛитника * ВыборкаДетальныеЗаписи.Количество; 				
		КонецЦикла;		
	КонецЕсли;
	ОбластьПодвал.Параметры.ИтогоБракСДекором = ИтогоБракСДекором;
	ОбластьПодвал.Параметры.ИтогоБракБезДекора =ИтогоБракБезДекора;
	ОбластьПодвал.Параметры.ОбщийВесОтхода = ИтогоВесЛитника + ИтогоБракСДекором + ИтогоБракБезДекора;
	ОбластьПодвал.Параметры.ИтогоВесЛитника = ИтогоВесЛитника;	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу  = 5;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	
	Возврат ТабДок;
	

КонецФункции

&НаКлиенте
Процедура ПечатьНакладнаяДляСклада(Команда)
	ТабДок = ПечатьНакладнаяДляСкладаНаСервере();
	ТабДок.Показать(); 
КонецПроцедуры

&НаСервере
Функция ПечатьНакладнаяДляСкладаНаСервере()
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_НакладнаяДляСклада");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
		
	ТабДок.Очистить();
	ОбластьШапка.Параметры.ДатаДокумента = Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"г.";
	Если РеквизитДеньНочь = 1 Тогда
		пДеньНочь = "(День)";	
	ИначеЕсли РеквизитДеньНочь = 2 Тогда
		пДеньНочь = "(Ночь)";
	КонецЕсли;	
	ОбластьШапка.Параметры.СменаДокумента = "смена №" + Строка(РеквизитДеньНочь) + пДеньНочь;
	ТабДок.Вывести(ОбластьШапка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество,
		|	вт_ОтчетПроизводстваТовары.Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оборудование,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяНачалаРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.ВремяОкончанияРаботы,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.КодСтроки,
		|	вт_ОтчетПроизводствавт_ОборудованиеПроизводства.Оператор
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	&вт_ОборудованиеПроизводства КАК вт_ОтчетПроизводствавт_ОборудованиеПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.Характеристика,
		|	ВТ_Товары.Количество,
		|	ВТ_Товары.БракКолВо,
		|	ВЫБОР
		|		КОГДА ВТ_Товары.Количество <> 0
		|			ТОГДА ВЫРАЗИТЬ(ВТ_Товары.БракКолВо / ВТ_Товары.Количество КАК ЧИСЛО(5, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентБрака,
		|	ЕСТЬNULL(ВТ_Оборудование.Оператор, "" "") КАК Оператор,
		|	ВТ_Товары.ВариантПроизводства,
		|	ВТ_Товары.КодСтроки КАК КодСтрокиТовары
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оборудование КАК ВТ_Оборудование
		|		ПО ВТ_Товары.КлючСвязиОборудования = ВТ_Оборудование.КодСтроки";
		
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("вт_ОборудованиеПроизводства",Объект.вт_ОборудованиеПроизводства.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		Нпп = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Нпп = Нпп + 1;		
			ОбластьСтрока.Параметры.Нпп = Нпп;
			ОбластьСтрока.Параметры.Номенклатура = Строка(ВыборкаДетальныеЗаписи.Номенклатура) + Строка(ВыборкаДетальныеЗаписи.Характеристика);
			ОбластьСтрока.Параметры.РасшифровкаНоменклатуры = ВыборкаДетальныеЗаписи.Номенклатура.Ссылка;
			ОбластьСтрока.Параметры.Всего = ВыборкаДетальныеЗаписи.Количество;
			ОбластьСтрока.Параметры.Брак         = ВыборкаДетальныеЗаписи.БракКолВо; 
			ОбластьСтрока.Параметры.Ликвидные = ВыборкаДетальныеЗаписи.Количество - ВыборкаДетальныеЗаписи.БракКолВо;
			пБрак = НахождениеБракСБезДекора(ВыборкаДетальныеЗаписи.КодСтрокиТовары);					
			ОбластьСтрока.Параметры.БракСДекоромШт = пБрак.СДекоромШт; 
			ОбластьСтрока.Параметры.БракБезДекораШт = пБрак.БезДекораШт;
								
			ТабДок.Вывести(ОбластьСтрока);	
							
		КонецЦикла;	
	КонецЕсли;	    		
	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу  = 5;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	
	Возврат ТабДок;
	

КонецФункции

&НаКлиенте
Процедура ПечатьРасходМатериалов(Команда)
	ТабДок = ПечатьРасходМатериаловНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьРасходМатериаловНаСервере()
ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_РасходМатериалов");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
		
	ТабДок.Очистить();
	ОбластьШапка.Параметры.ДатаДокумента = Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"г.";
	Если РеквизитДеньНочь = 1 Тогда
		пДеньНочь = "(День)";	
	ИначеЕсли РеквизитДеньНочь = 2 Тогда
		пДеньНочь = "(Ночь)";
	КонецЕсли;	
	ОбластьШапка.Параметры.СменаДокумента = "смена №" + Строка(РеквизитДеньНочь) + пДеньНочь;
	ТабДок.Вывести(ОбластьШапка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Количество
		|ПОМЕСТИТЬ вт_ПроизводствоСырье
		|ИЗ
		|	&вт_ПроизводствоСырье КАК вт_ОтчетПроизводствавт_ПроизводствоСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ПроизводствоСырье.Номенклатура,
		|	СУММА(вт_ПроизводствоСырье.Количество) КАК Количество
		|ИЗ
		|	вт_ПроизводствоСырье КАК вт_ПроизводствоСырье
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ПроизводствоСырье.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	Запрос.УстановитьПараметр("вт_ПроизводствоСырье",Объект.вт_ПроизводствоСырье.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		Нпп = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Нпп = Нпп + 1;		
			ОбластьСтрока.Параметры.Нпп = Нпп;
			ОбластьСтрока.Параметры.Номенклатура = Строка(ВыборкаДетальныеЗаписи.Номенклатура);
			ОбластьСтрока.Параметры.РасшифровкаНоменклатуры = ВыборкаДетальныеЗаписи.Номенклатура.Ссылка;
			ОбластьСтрока.Параметры.Количество = ВыборкаДетальныеЗаписи.Количество;
								
			ТабДок.Вывести(ОбластьСтрока);	
							
		КонецЦикла;	
	КонецЕсли;	    		
	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу  = 5;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	
	Возврат ТабДок;    	

КонецФункции

&НаСервере
Функция НахождениеБракСБезДекора(КлючСвязиСтроки)
	пБрак = Новый Структура("СДекоромШт,СДекоромКг,БезДекораШт,БезДекораКг",0,0,0,0);
	Для Каждого СтрокаБракДробленка Из Объект.вт_БракДробленка Цикл
		Если СтрокаБракДробленка.КлючСвязиСтроки = КлючСвязиСтроки И Найти(СтрокаБракДробленка.Дробленка.Наименование,"с декором")>0 Тогда
	        пБрак.СДекоромШт = пБрак.СДекоромШт + СтрокаБракДробленка.КоличествоБрака;
			пБрак.СДекоромКг = пБрак.СДекоромКг + СтрокаБракДробленка.Количество; 
		ИначеЕсли СтрокаБракДробленка.КлючСвязиСтроки = КлючСвязиСтроки Тогда	
			пБрак.БезДекораШт = пБрак.БезДекораШт + СтрокаБракДробленка.КоличествоБрака;
			пБрак.БезДекораКг = пБрак.БезДекораКг + СтрокаБракДробленка.Количество;
		КонецЕсли;	
	КонецЦикла;	
	Возврат пБрак;
КонецФункции

&НаКлиенте
Процедура ПечатьМ11(Команда)
	ТабДок = ПечатьМ11НаСервере();
	//ТабДок.Показать();
	
	ОбластиОбъектов = Неопределено;
    
    ИдентификаторПечатнойФормы = "ПФ_М11_ПередачаСырья";
    
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
    ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
    ПечатнаяФорма.СинонимМакета = НСтр("ru = 'ОтчетПроизводстваПроизводства_ПередачаСырья'");
    ПечатнаяФорма.ТабличныйДокумент = ТабДок;
    ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'ОтчетПроизводстваПроизводства_ПередачаСырья'");
    
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);	   
		
КонецПроцедуры

&НаСервере
Функция ПечатьМ11НаСервере()

	ТабДок = Новый ТабличныйДокумент;
		
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_М11");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрок  = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал"); 
		
	ТабДок.Очистить();
	
	СведенияОПроизводителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата,, Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация));           
	
	ОбластьШапка.Параметры.Заголовок 				= "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Объект.Номер) + " от " + Формат(Объект.Дата,"ДЛФ=DD");
	ОбластьШапка.Параметры.КодОКПО 	 			    = Объект.Организация.КодПоОКПО;  	
	ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПроизводителе);           
	ОбластьШапка.Параметры.ДатаСоставления 			= Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
	//ОбластьШапка.Параметры.Отправитель 				= 
	//ОбластьШапка.Параметры.Получатель  				= 
	//ОбластьШапка.Параметры.КоррСчет	   				= 
	ТабДок.Вывести(ОбластьШапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ПроизводствоСырье.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(вт_ПроизводствоСырье.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	вт_ПроизводствоСырье.КоличествоПлан КАК КоличествоПлан,
		|	вт_ПроизводствоСырье.Количество КАК Количество,
		|	вт_ПроизводствоСырье.БракКолВо КАК БракКолВо,
		|	вт_ПроизводствоСырье.НоменклатураБрака КАК НоменклатураБрака,
		|	вт_ПроизводствоСырье.ГотоваяПродукция КАК ГотоваяПродукция,
		|	вт_ПроизводствоСырье.ВариантПроизводства КАК ВариантПроизводства,
		|	вт_ПроизводствоСырье.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	вт_ПроизводствоСырье.КлючСвязиСтроки КАК КлючСвязиСтроки
		|ПОМЕСТИТЬ вт_Сырье
		|ИЗ
		|	&вт_ПроизводствоСырье КАК вт_ПроизводствоСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ПОТИПУЦЕН
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ.Номенклатура
		|					ИЗ
		|						вт_Сырье КАК ВТ)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Закупки.АналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	МАКСИМУМ(Закупки.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МАКС_ДАТА
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Закупки.Период, ДЕНЬ) <= &НаДату
		|	И Закупки.АналитикаУчетаНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ.Номенклатура
		|			ИЗ
		|				вт_Сырье КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ЕСТЬNULL(Закупки.АналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Закупки.Количество <> 0
		|				ТОГДА Закупки.Стоимость / Закупки.Количество
		|			ИНАЧЕ Закупки.Стоимость
		|		КОНЕЦ, 0) КАК Цена,
		|	ВТ_МАКС_ДАТА.Номенклатура КАК Номенклатура,
		|	ВТ_МАКС_ДАТА.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ЗАКУПКИ
		|ИЗ
		|	ВТ_МАКС_ДАТА КАК ВТ_МАКС_ДАТА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
		|		ПО (ВТ_МАКС_ДАТА.Номенклатура = Закупки.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ВТ_МАКС_ДАТА.Характеристика = ЕСТЬNULL(Закупки.АналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|			И ВТ_МАКС_ДАТА.МаксПериод = Закупки.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(СебестоимостьТоваровОстатки.СтоимостьОстаток) КАК СтоимостьОстаток,
		|	СУММА(СебестоимостьТоваровОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ПОМЕСТИТЬ ПРЕД_ВТ_СЕБЕСТОИМОСТЬ
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки(
		|			&НаДату,
		|			АналитикаУчетаНоменклатуры.Номенклатура В
		|				(ВЫБРАТЬ
		|					ВТ.Номенклатура
		|				ИЗ
		|					ВТ_СЫРЬЕ КАК ВТ)) КАК СебестоимостьТоваровОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ЕСТЬNULL(СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПРЕД_ВТ_СЕБЕСТОИМОСТЬ.КоличествоОстаток > 0
		|			ТОГДА ПРЕД_ВТ_СЕБЕСТОИМОСТЬ.СтоимостьОстаток / ПРЕД_ВТ_СЕБЕСТОИМОСТЬ.КоличествоОстаток
		|		ИНАЧЕ ПРЕД_ВТ_СЕБЕСТОИМОСТЬ.СтоимостьОстаток
		|	КОНЕЦ КАК Цена,
		|	ПРЕД_ВТ_СЕБЕСТОИМОСТЬ.Номенклатура КАК Номенклатура,
		|	ПРЕД_ВТ_СЕБЕСТОИМОСТЬ.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_СЕБЕСТОИМОСТЬ
		|ИЗ
		|	ПРЕД_ВТ_СЕБЕСТОИМОСТЬ КАК ПРЕД_ВТ_СЕБЕСТОИМОСТЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика) КАК Характеристика,
		|	СРЕДНЕЕ(ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Цена, ЦЕНЫ_ЗАКУПКИ.Цена)) КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_1
		|ИЗ
		|	ВТ_ЦЕНЫ_ПОТИПУЦЕН КАК ЦЕНЫ_ПОТИПУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ_ЗАКУПКИ КАК ЦЕНЫ_ЗАКУПКИ
		|		ПО (ЦЕНЫ_ПОТИПУ.Номенклатура = ЦЕНЫ_ЗАКУПКИ.Номенклатура
		|				И ЦЕНЫ_ПОТИПУ.Характеристика = ЦЕНЫ_ЗАКУПКИ.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура),
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_СЕБЕСТОИМОСТЬ.Номенклатура, ЦЕНЫ_1.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_СЕБЕСТОИМОСТЬ.Характеристика, ЦЕНЫ_1.Характеристика) КАК Характеристика,
		|	СРЕДНЕЕ(ЕСТЬNULL(ЕСТЬNULL(ВТ_СЕБЕСТОИМОСТЬ.Цена, ЦЕНЫ_1.Цена), 0)) КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ
		|ИЗ
		|	ВТ_СЕБЕСТОИМОСТЬ КАК ВТ_СЕБЕСТОИМОСТЬ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ_1 КАК ЦЕНЫ_1
		|		ПО (ВТ_СЕБЕСТОИМОСТЬ.Номенклатура = ЦЕНЫ_1.Номенклатура
		|				И ВТ_СЕБЕСТОИМОСТЬ.Характеристика = ЦЕНЫ_1.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ВТ_СЕБЕСТОИМОСТЬ.Номенклатура, ЦЕНЫ_1.Номенклатура),
		|	ЕСТЬNULL(ВТ_СЕБЕСТОИМОСТЬ.Характеристика, ЦЕНЫ_1.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ПроизводствоСырье.Номенклатура КАК Запас,
		|	СпрНоменкл.Код КАК НоменклатурныйНомер,
		|	СпрНоменкл.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	СпрНоменкл.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ЕСТЬNULL(ВТ_ЦЕНЫ.Цена, 0) КАК Цена,
		|	СУММА(вт_ПроизводствоСырье.Количество) КАК Количество,
		|	вт_ПроизводствоСырье.Характеристика КАК Характеристика
		|ИЗ
		|	вт_Сырье КАК вт_ПроизводствоСырье
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменкл
		|		ПО (СпрНоменкл.Ссылка = вт_ПроизводствоСырье.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ КАК ВТ_ЦЕНЫ
		|		ПО (вт_ПроизводствоСырье.Номенклатура = ВТ_ЦЕНЫ.Номенклатура
		|				И вт_ПроизводствоСырье.Характеристика = ВТ_ЦЕНЫ.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ПроизводствоСырье.Номенклатура,
		|	СпрНоменкл.Код,
		|	СпрНоменкл.ЕдиницаИзмерения.Код,
		|	СпрНоменкл.ЕдиницаИзмерения.Наименование,
		|	ЕСТЬNULL(ВТ_ЦЕНЫ.Цена, 0),
		|	вт_ПроизводствоСырье.Характеристика";
		
	Запрос.УстановитьПараметр("вт_ПроизводствоСырье",Объект.вт_ПроизводствоСырье.Выгрузить());
	Запрос.УстановитьПараметр("НаДату", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ВидЦены", ?(ЗначениеЗаполнено(Объект.ВидЦены),Объект.ВидЦены,КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ВидЦенПлановойСебестоимости")));
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			ОбластьСтрок.Параметры.Запас 						= СокрЛП(ВыборкаДетальныеЗаписи.Запас) + " "+СокрЛП(ВыборкаДетальныеЗаписи.Характеристика);
			ОбластьСтрок.Параметры.НоменклатурныйНомер 			= ВыборкаДетальныеЗаписи.НоменклатурныйНомер;
			ОбластьСтрок.Параметры.ЕдиницаИзмеренияКод 			= ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияКод;
			ОбластьСтрок.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияНаименование;
			ОбластьСтрок.Параметры.Количество 					= ВыборкаДетальныеЗаписи.Количество;
			//ОбластьСтрок.Параметры.Счет  						= 
			ОбластьСтрок.Параметры.Цена						    = ВыборкаДетальныеЗаписи.Цена; 
			ОбластьСтрок.Параметры.Сумма 						= ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.Количество;
			ТабДок.Вывести(ОбластьСтрок); 
		КонецЦикла;
	КонецЕсли;	
	
	ТабДок.Вывести(ОбластьПодвал);   		
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу  = 0;
	ТабДок.ПолеСлева  = 0;
	ТабДок.ПолеСправа = 0;
	
	Возврат ТабДок; 	

КонецФункции

&НаКлиенте
Процедура ПечатьМХ18(Команда)
	ТабДок = ПечатьМХ18НаСервере();
	//ТабДок.Показать();
	
	ОбластиОбъектов = Неопределено;
    
    ИдентификаторПечатнойФормы = "ПФ_МХ18_ПередачаГотовойПродукции";
    
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
    ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
    ПечатнаяФорма.СинонимМакета = НСтр("ru = 'ОтчетПроизводстваПроизводства_ПередачаГотовойПродукции'");
    ПечатнаяФорма.ТабличныйДокумент = ТабДок;
    ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'ОтчетПроизводстваПроизводства_ПередачаГотовойПродукции'");
    
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);	   
		
КонецПроцедуры

&НаСервере
Функция ПечатьМХ18НаСервере()
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 10;
	ТабДок.ПолеСнизу  = 10;
	ТабДок.ПолеСлева  = 10;
	ТабДок.ПолеСправа = 10;

	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_МХ18");
	
	ОбластьШапка  			 = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы  = Макет.ПолучитьОбласть("ЗаголовокТаблицы");   
	ОбластьСтрок  			 = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогиПоСтранице	 = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьВсего  			 = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал 			 = Макет.ПолучитьОбласть("Подвал"); 
		
	ТабДок.Очистить();
	
	СведенияОПроизводителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата,, Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация));           
	
	ОбластьШапка.Параметры.НомерДокумента 			= Строка(Объект.Номер);
	ОбластьШапка.Параметры.ДатаДокумента 			=  Формат(Объект.Дата,"ДФ=dd.MM.yyyy");    
	ОбластьШапка.Параметры.ОрганизацияПоОКПО 	 	= Объект.Организация.КодПоОКПО;  	
	ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПроизводителе);           
	//ОбластьШапка.Параметры.Отправитель 				= 
	//ОбластьШапка.Параметры.Получатель  				= 
	//ОбластьШапка.Параметры.КоррСчет	   				= 
	ТабДок.Вывести(ОбластьШапка);
	
	НомерСтраницы = 1;
	ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
	
	МассивПроверкиВывода = Новый Массив;
	//ТабДок.Вывести(ОбластьЗаголовокТаблицы);
	МассивПроверкиВывода.Добавить(ОбластьПодвал);
	МассивПроверкиВыводаСодержитОбластьПодвала = Истина;
	//МассивПроверкиВывода.Добавить(ОбластьШапка);
	//МассивПроверкиВыводаСодержитОбластьШапки = Истина;
	//МассивПроверкиВывода.Добавить(ОбластьЗаголовокТаблицы);
	//МассивПроверкиВывода.Добавить(ОбластьВсего);
	
	
	Запрос = Новый Запрос;
#Область СтарыйТекстЗапроса	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество КАК Количество,
		|	вт_ОтчетПроизводстваТовары.Цена КАК Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма КАК Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов КАК ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ КАК вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо КАК БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий КАК ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали КАК ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства КАК ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода КАК МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода КАК ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака КАК ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки КАК КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование КАК Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан КАК ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт КАК ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования КАК КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК СтоимостьРегл,
		|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Продукт,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура КАК КорНоменклатура
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ПРЕД
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Регистратор = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЕБЕСТ_ПРЕД.Номенклатура КАК Номенклатура,
		|	ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл КАК СебестФакт,
		|	ВЫБОР
		|		КОГДА ВТ_СЕБЕСТ_ПРЕД.Количество <> 0
		|			ТОГДА ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл / ВТ_СЕБЕСТ_ПРЕД.Количество
		|		ИНАЧЕ ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл
		|	КОНЕЦ КАК СебестЗаЕд,
		|	ВТ_СЕБЕСТ_ПРЕД.Продукт КАК Продукт,
		|	ВТ_СЕБЕСТ_ПРЕД.КорНоменклатура КАК КорНоменклатура
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ФАКТ
		|ИЗ
		|	ВТ_СЕБЕСТ_ПРЕД КАК ВТ_СЕБЕСТ_ПРЕД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ПОТИПУЦЕН
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ.Номенклатура,
		|						ВТ.Характеристика
		|					ИЗ
		|						ВТ_Товары КАК ВТ)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	МАКСИМУМ(Закупки.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МАКС_ДАТА
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Закупки.Период, ДЕНЬ) <= &НаДату
		|	И (Закупки.АналитикаУчетаНоменклатуры.Номенклатура, Закупки.АналитикаУчетаНоменклатуры.Характеристика) В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ.Номенклатура,
		|				ВТ.Характеристика
		|			ИЗ
		|				ВТ_Товары КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Закупки.Количество <> 0
		|				ТОГДА Закупки.Стоимость / Закупки.Количество
		|			ИНАЧЕ Закупки.Стоимость
		|		КОНЕЦ, 0) КАК Цена,
		|	ВТ_МАКС_ДАТА.Номенклатура КАК Номенклатура,
		|	ВТ_МАКС_ДАТА.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ЗАКУПКИ
		|ИЗ
		|	ВТ_МАКС_ДАТА КАК ВТ_МАКС_ДАТА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
		|		ПО ВТ_МАКС_ДАТА.Номенклатура = Закупки.АналитикаУчетаНоменклатуры.Номенклатура
		|			И ВТ_МАКС_ДАТА.Характеристика = Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|			И ВТ_МАКС_ДАТА.МаксПериод = Закупки.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СРЕДНЕЕ(ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Цена, ЦЕНЫ_ЗАКУПКИ.Цена)) КАК ЦЕНА,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика) КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ
		|ИЗ
		|	ВТ_ЦЕНЫ_ПОТИПУЦЕН КАК ЦЕНЫ_ПОТИПУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ_ЗАКУПКИ КАК ЦЕНЫ_ЗАКУПКИ
		|		ПО ЦЕНЫ_ПОТИПУ.Номенклатура = ЦЕНЫ_ЗАКУПКИ.Номенклатура
		|			И ЦЕНЫ_ПОТИПУ.Характеристика = ЦЕНЫ_ЗАКУПКИ.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура),
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	Спр.Код КАК НоменклатурныйНомер,
		|	Спр.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	Спр.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	СУММА(ВТ_Товары.Количество) КАК Количество,
		|	СУММА(ЕСТЬNULL(ВТ_СЕБЕСТ.СебестЗаЕд, ЕСТЬNULL(ВТ_ЦЕНЫ.ЦЕНА, ВТ_Товары.Цена))) КАК Цена,
		|	СУММА(ВТ_Товары.Сумма) КАК Сумма
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр
		|		ПО (Спр.Ссылка = ВТ_Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ КАК ВТ_ЦЕНЫ
		|		ПО (ВТ_ЦЕНЫ.Номенклатура = ВТ_Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СЕБЕСТ_ФАКТ КАК ВТ_СЕБЕСТ
		|		ПО (ВТ_СЕБЕСТ.Продукт = ВТ_ЦЕНЫ.Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура,
		|	Спр.Код,
		|	Спр.ЕдиницаИзмерения.Код,
		|	Спр.ЕдиницаИзмерения.Наименование";
#КонецОбласти	
#Область НовыйТекстЗапроса
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество КАК Количество,
		|	вт_ОтчетПроизводстваТовары.Цена КАК Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма КАК Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов КАК ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ КАК вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо КАК БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий КАК ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали КАК ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства КАК ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода КАК МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода КАК ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака КАК ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки КАК КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование КАК Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан КАК ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт КАК ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования КАК КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК СтоимостьРегл,
		|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Продукт,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура КАК КорНоменклатура,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Характеристика КАК КорХарактеристика
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ПРЕД
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Регистратор = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Характеристика,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЕБЕСТ_ПРЕД.Номенклатура КАК Номенклатура,
		|	ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл КАК СебестФакт,
		|	ВЫБОР
		|		КОГДА ВТ_СЕБЕСТ_ПРЕД.Количество <> 0
		|			ТОГДА ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл / ВТ_СЕБЕСТ_ПРЕД.Количество
		|		ИНАЧЕ ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл
		|	КОНЕЦ КАК СебестЗаЕд,
		|	ВТ_СЕБЕСТ_ПРЕД.Продукт КАК Продукт,
		|	ВТ_СЕБЕСТ_ПРЕД.КорНоменклатура КАК КорНоменклатура,
		|	ВТ_СЕБЕСТ_ПРЕД.КорХарактеристика КАК КорХарактеристика,
		|	ВТ_СЕБЕСТ_ПРЕД.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ФАКТ
		|ИЗ
		|	ВТ_СЕБЕСТ_ПРЕД КАК ВТ_СЕБЕСТ_ПРЕД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ПОТИПУЦЕН
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ.Номенклатура,
		|						ВТ.Характеристика
		|					ИЗ
		|						ВТ_Товары КАК ВТ)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	МАКСИМУМ(Закупки.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МАКС_ДАТА
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Закупки.Период, ДЕНЬ) <= &НаДату
		|	И (Закупки.АналитикаУчетаНоменклатуры.Номенклатура, Закупки.АналитикаУчетаНоменклатуры.Характеристика) В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ.Номенклатура,
		|				ВТ.Характеристика
		|			ИЗ
		|				ВТ_Товары КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Закупки.Количество <> 0
		|				ТОГДА Закупки.Стоимость / Закупки.Количество
		|			ИНАЧЕ Закупки.Стоимость
		|		КОНЕЦ, 0) КАК Цена,
		|	ВТ_МАКС_ДАТА.Номенклатура КАК Номенклатура,
		|	ВТ_МАКС_ДАТА.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ЗАКУПКИ
		|ИЗ
		|	ВТ_МАКС_ДАТА КАК ВТ_МАКС_ДАТА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
		|		ПО ВТ_МАКС_ДАТА.Номенклатура = Закупки.АналитикаУчетаНоменклатуры.Номенклатура
		|			И ВТ_МАКС_ДАТА.Характеристика = Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|			И ВТ_МАКС_ДАТА.МаксПериод = Закупки.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СРЕДНЕЕ(ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Цена, ЦЕНЫ_ЗАКУПКИ.Цена)) КАК ЦЕНА,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика) КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ
		|ИЗ
		|	ВТ_ЦЕНЫ_ПОТИПУЦЕН КАК ЦЕНЫ_ПОТИПУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ_ЗАКУПКИ КАК ЦЕНЫ_ЗАКУПКИ
		|		ПО ЦЕНЫ_ПОТИПУ.Номенклатура = ЦЕНЫ_ЗАКУПКИ.Номенклатура
		|			И ЦЕНЫ_ПОТИПУ.Характеристика = ЦЕНЫ_ЗАКУПКИ.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура),
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	Спр.Код КАК НоменклатурныйНомер,
		|	Спр.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	Спр.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ВТ_Товары.Количество КАК Количество,
		|	ЕСТЬNULL(ВТ_СЕБЕСТ.СебестЗаЕд, ЕСТЬNULL(ВТ_ЦЕНЫ.ЦЕНА, ВТ_Товары.Цена)) КАК Цена,
		|	ВТ_Товары.Сумма КАК Сумма,
		|	ВТ_Товары.Характеристика КАК Характеристика
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр
		|		ПО (Спр.Ссылка = ВТ_Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ КАК ВТ_ЦЕНЫ
		|		ПО (ВТ_ЦЕНЫ.Номенклатура = ВТ_Товары.Номенклатура)
		|			И (ВТ_ЦЕНЫ.Характеристика = ВТ_Товары.Характеристика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СЕБЕСТ_ФАКТ КАК ВТ_СЕБЕСТ
		|		ПО (ВТ_СЕБЕСТ.Номенклатура = ВТ_ЦЕНЫ.Номенклатура)
		|ИТОГИ
		|	СУММА(Количество),
		|	СРЕДНЕЕ(Цена),
		|	СУММА(Сумма)
		|ПО
		|	Номенклатура,
		|	Характеристика";
#КонецОбласти
	
	
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("НаДату",КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ВидЦены", ?(ЗначениеЗаполнено(Объект.ВидЦены), Объект.ВидЦены,КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ВидЦенПлановойСебестоимости")));
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТАблЗнач = Новый ТаблицаЗначений;
		ТаблЗнач.Колонки.Добавить("ТоварНаименование");
		ТаблЗнач.Колонки.Добавить("ТоварКод");
		ТаблЗнач.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		ТаблЗнач.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
		ТаблЗнач.Колонки.Добавить("ВидУпаковки");
		ТаблЗнач.Колонки.Добавить("КоличествоВОдномМесте");
		ТаблЗнач.Колонки.Добавить("КоличествоМест");
		ТаблЗнач.Колонки.Добавить("МассаБрутто");
		ТаблЗнач.Колонки.Добавить("Количество");
		ТаблЗнач.Колонки.Добавить("Цена");
		ТаблЗнач.Колонки.Добавить("Сумма");
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		ИтогМестНаСтранице = 0;
		ИтогСуммаНаСтранице = 0;
		ИтогКоличество = 0;
		ИтогКоличествоНаСтранице = 0;
		ИтогМест = 0;
		ИтогСумма = 0;
		ПерваяСтрокаВыведена = Ложь;
		//Перенос выборки в таблицу значений
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  			
			ВыборкаПоХарактеристике = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока ВыборкаПоХарактеристике.Следующий() Цикл
				
				СтрокаТЗ = ТаблЗнач.Добавить();
				СтрокаТЗ.ТоварНаименование			= СокрЛП(ВыборкаПоХарактеристике.Номенклатура) + 
				" "+СокрЛП(ВыборкаПоХарактеристике.Характеристика);
				СтрокаТЗ.ТоварКод			 		= ВыборкаПоХарактеристике.НоменклатурныйНомер;
				СтрокаТЗ.ЕдиницаИзмеренияКодПоОКЕИ	= ВыборкаПоХарактеристике.ЕдиницаИзмеренияКод;
			
				СтрокаТЗ.ВидУпаковки				= ВыборкаПоХарактеристике.ЕдиницаИзмеренияНаименование; 
				СтрокаТЗ.КоличествоВОдномМесте		= 1; //ВыборкаПоХарактеристике.Количество;                   
				СтрокаТЗ.КоличествоМест				= ВыборкаПоХарактеристике.Количество;
				СтрокаТЗ.Количество 				= ВыборкаПоХарактеристике.Количество;
			
				СтрокаТЗ.Цена						= ВыборкаПоХарактеристике.Цена; 
				СтрокаТЗ.Сумма 						= ВыборкаПоХарактеристике.Цена * ВыборкаПоХарактеристике.Количество;
			КонецЦикла;
		КонецЦикла;
		
		//Вывод в ТабДок табличной части
		Для СчетчикСтрок = 0 По ТаблЗнач.Количество()-1 Цикл
			ПеревестиСтраницу = Ложь;
			ОбластьСтрок.Параметры.Заполнить(ТаблЗнач[СчетчикСтрок]);
			МассивПроверкиВывода.Добавить(ОбластьСтрок);
			МассивПроверкиВывода.Добавить(ОбластьИтогиПоСтранице);
			
			Если ТабДок.ПроверитьВывод(МассивПроверкиВывода) Тогда
				
				Если Не ПерваяСтрокаВыведена Тогда						
					ТабДок.Вывести(ОбластьЗаголовокТаблицы);
				КонецЕслИ;
				МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());   //Отрываем от линейки итоговую строку
				МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());   //Отрываем от линейки тек. строку
				
			Иначе //Не умещается 2 строки с подвалом
				Если МассивПроверкиВыводаСодержитОбластьПодвала Тогда
					Если (ТаблЗнач.Количество()-1 - СчетчикСтрок) < 3 Тогда
						//Переводить страницу, не умещается подвал 
						ПеревестиСтраницу = Истина;
					Иначе
						//Убрать из массива проверки вывода подвал и выводить до конца страницы
						МассивПроверкиВывода.Удалить(0); //Убираем из линейки область подвала
						МассивПроверкиВыводаСодержитОбластьПодвала = Ложь; 	
						ПеревестиСтраницу = НЕ ТабДок.ПроверитьВывод(МассивПроверкиВывода);
						
						МассивПроверкиВывода.Добавить(ОбластьПодвал);
					КонецЕсли;	
				Иначе
					ПеревестиСтраницу = Истина;
				КонецЕсли;	
				
				
				Если ПеревестиСтраницу Тогда	
					//, переводим страницу 
					ОбластьИтогиПоСтранице.Параметры.ИтогМестНаСтранице  = ИтогМестНаСтранице;
					ОбластьИтогиПоСтранице.Параметры.ИтогСуммаНаСтранице = ИтогСуммаНаСтранице;
					ТабДок.Вывести(ОбластьИтогиПоСтранице);
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();	
					ИтогМестНаСтранице = 0;
					ИтогСуммаНаСтранице = 0;
					ИтогКоличествоНаСтранице = 0;
					МассивПроверкиВывода.Очистить();
					МассивПроверкиВывода.Добавить(ОбластьПодвал);
					МассивПроверкиВыводаСодержитОбластьПодвала = Истина;
					НомерСтраницы = НомерСтраницы + 1;					
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = НомерСтраницы;					
					ТабДок.Вывести(ОбластьЗаголовокТаблицы);
					ПеревестиСтраницу = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьСтрок); 
			ПерваяСтрокаВыведена = Истина;     		
			
			ИтогМестНаСтранице  = ИтогМестНаСтранице + ОбластьСтрок.Параметры.КоличествоМест;
			ИтогСуммаНаСтранице = ИтогСуммаНаСтранице + ОбластьСтрок.Параметры.Сумма;
			ИтогКоличествоНаСтранице = ИтогКоличествоНаСтранице + ОбластьСтрок.Параметры.Количество;
			
			ИтогМест  = ИтогМест + ОбластьСтрок.Параметры.КоличествоМест;
			ИтогСумма = ИтогСумма + ОбластьСтрок.Параметры.Сумма;     		
			ИтогКоличество = ИтогКоличество + ОбластьСтрок.Параметры.Количество;

		КонецЦикла;
		
		
		
		
		
		
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  			
		//	ВыборкаПоХарактеристике = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		//	Пока ВыборкаПоХарактеристике.Следующий() Цикл
		//		ОбластьСтрок.Параметры.ТоварНаименование			= СокрЛП(ВыборкаПоХарактеристике.Номенклатура) + 
		//		" "+СокрЛП(ВыборкаПоХарактеристике.Характеристика);
		//		ОбластьСтрок.Параметры.ТоварКод			 			= ВыборкаПоХарактеристике.НоменклатурныйНомер;
		//		ОбластьСтрок.Параметры.ЕдиницаИзмеренияКодПоОКЕИ	= ВыборкаПоХарактеристике.ЕдиницаИзмеренияКод;
		//		//ОбластьСтрок.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияНаименование;
		//		ОбластьСтрок.Параметры.ВидУпаковки					= ВыборкаПоХарактеристике.ЕдиницаИзмеренияНаименование; 
		//		ОбластьСтрок.Параметры.КоличествоВОдномМесте		= ВыборкаПоХарактеристике.Количество;                   
		//		ОбластьСтрок.Параметры.КоличествоМест				= 1;
		//		//ОбластьСтрок.Параметры.Счет  						= 
		//		ОбластьСтрок.Параметры.Цена							= ВыборкаПоХарактеристике.Цена; 
		//		ОбластьСтрок.Параметры.Сумма 						= ВыборкаПоХарактеристике.Цена * ВыборкаПоХарактеристике.Количество;
		//		
		//		
		//		
		//		МассивПроверкиВывода.Добавить(ОбластьСтрок);
		//		МассивПроверкиВывода.Добавить(ОбластьИтогиПоСтранице);
		//		
		//		Если ТабДок.ПроверитьВывод(МассивПроверкиВывода) Тогда
		//			
		//			Если Не ПерваяСтрокаВыведена Тогда						
		//				ТабДок.Вывести(ОбластьЗаголовокТаблицы);
		//			КонецЕслИ;
		//		МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());   //Отрываем от линейки итоговую строку
		//		МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());   //Отрываем от линейки тек. строку
		//						
		//		Иначе
		//			//Не умещается
		//			Если МассивПроверкиВыводаСодержитОбластьПодвала Тогда
		//				МассивПроверкиВывода.Удалить(0); //Убираем из линейки область подвала
		//				МассивПроверкиВыводаСодержитОбластьПодвала = Ложь; 	
		//			Иначе	
		//				//, переводим страницу 
		//				ОбластьИтогиПоСтранице.Параметры.ИтогМестНаСтранице  = ИтогМестНаСтранице;
		//				ОбластьИтогиПоСтранице.Параметры.ИтогСуммаНаСтранице = ИтогСуммаНаСтранице;
		//				ТабДок.Вывести(ОбластьИтогиПоСтранице);
		//				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();	
		//				ИтогМестНаСтранице = 0;
		//				ИтогСуммаНаСтранице = 0;
		//				    МассивПроверкиВывода.Очистить();
		//					МассивПроверкиВывода.Добавить(ОбластьПодвал);
		//					МассивПроверкиВыводаСодержитОбластьПодвала = Истина;
		//					//МассивПроверкиВывода.Добавить(ОбластьЗаголовокТаблицы);
		//					//МассивПроверкиВывода.Добавить(ОбластьВсего);  						
		//				НомерСтраницы = НомерСтраницы + 1;					
		//				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = НомерСтраницы;					
		//				ТабДок.Вывести(ОбластьЗаголовокТаблицы);					
		//			КонецЕсли;					
		//		КонецЕсли;			
		//		
		//		ТабДок.Вывести(ОбластьСтрок); 
		//		ПерваяСтрокаВыведена = Истина;     		
		//		        				
		//		ИтогМестНаСтранице  = ИтогМестНаСтранице + ОбластьСтрок.Параметры.КоличествоМест;
		//		ИтогСуммаНаСтранице = ИтогСуммаНаСтранице + ОбластьСтрок.Параметры.Сумма;
		//		
		//		ИтогМест  = ИтогМест + ОбластьСтрок.Параметры.КоличествоМест;
		//		ИтогСумма = ИтогСумма + ОбластьСтрок.Параметры.Сумма;
		//		
		//	КонецЦикла;
		//КонецЦикла;
	КонецЕсли;	
	
	ОбластьИтогиПоСтранице.Параметры.ИтогМестНаСтранице  = ИтогМестНаСтранице;
	ОбластьИтогиПоСтранице.Параметры.ИтогСуммаНаСтранице = ИтогСуммаНаСтранице;
	ОбластьИтогиПоСтранице.Параметры.ИтогКоличествоНаСтранице = ИтогКоличествоНаСтранице;
	ТабДок.Вывести(ОбластьИтогиПоСтранице);
	
	ОбластьВсего.Параметры.ИтогМест  = ИтогМест;
	ОбластьВсего.Параметры.ИтогСумма = ИтогСумма;
	ОбластьВсего.Параметры.ИтогКоличество = ИтогКоличество;
	ТабДок.Вывести(ОбластьВсего);   
	
	ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ИтогМест, ,",,,,,,,,0");
	ТабДок.Вывести(ОбластьПодвал);   		
	
		
	Возврат ТабДок;
	
КонецФункции


&НаСервере
Функция ПечатьМХ18НаСервере_old()
	
	ТабДок = Новый ТабличныйДокумент;
		
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_МХ18");
	
	ОбластьШапка  			 = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы  = Макет.ПолучитьОбласть("ЗаголовокТаблицы");   
	ОбластьСтрок  			 = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогиПоСтранице	 = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьВсего  			 = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал 			 = Макет.ПолучитьОбласть("Подвал"); 
		
	ТабДок.Очистить();
	
	СведенияОПроизводителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата,, Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация));           
	
	ОбластьШапка.Параметры.НомерДокумента 			= Строка(Объект.Номер);
	ОбластьШапка.Параметры.ДатаДокумента 			=  Формат(Объект.Дата,"ДФ=dd.MM.yyyy");    
	ОбластьШапка.Параметры.ОрганизацияПоОКПО 	 	= Объект.Организация.КодПоОКПО;  	
	ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПроизводителе);           
	//ОбластьШапка.Параметры.Отправитель 				= 
	//ОбластьШапка.Параметры.Получатель  				= 
	//ОбластьШапка.Параметры.КоррСчет	   				= 
	ТабДок.Вывести(ОбластьШапка);
	
	ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = 1;
	ТабДок.Вывести(ОбластьЗаголовокТаблицы);
	
	Запрос = Новый Запрос;
#Область ЗапросДоИзменения	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество КАК Количество,
		|	вт_ОтчетПроизводстваТовары.Цена КАК Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма КАК Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов КАК ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ КАК вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо КАК БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий КАК ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали КАК ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства КАК ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода КАК МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода КАК ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака КАК ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки КАК КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование КАК Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан КАК ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт КАК ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования КАК КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК СтоимостьРегл,
		|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Продукт,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура КАК КорНоменклатура
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ПРЕД
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Регистратор = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЕБЕСТ_ПРЕД.Номенклатура КАК Номенклатура,
		|	ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл КАК СебестФакт,
		|	ВЫБОР
		|		КОГДА ВТ_СЕБЕСТ_ПРЕД.Количество <> 0
		|			ТОГДА ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл / ВТ_СЕБЕСТ_ПРЕД.Количество
		|		ИНАЧЕ ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл
		|	КОНЕЦ КАК СебестЗаЕд,
		|	ВТ_СЕБЕСТ_ПРЕД.Продукт КАК Продукт,
		|	ВТ_СЕБЕСТ_ПРЕД.КорНоменклатура КАК КорНоменклатура
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ФАКТ
		|ИЗ
		|	ВТ_СЕБЕСТ_ПРЕД КАК ВТ_СЕБЕСТ_ПРЕД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ПОТИПУЦЕН
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ.Номенклатура,
		|						ВТ.Характеристика
		|					ИЗ
		|						ВТ_Товары КАК ВТ)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	МАКСИМУМ(Закупки.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МАКС_ДАТА
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Закупки.Период, ДЕНЬ) <= &НаДату
		|	И (Закупки.АналитикаУчетаНоменклатуры.Номенклатура, Закупки.АналитикаУчетаНоменклатуры.Характеристика) В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ.Номенклатура,
		|				ВТ.Характеристика
		|			ИЗ
		|				ВТ_Товары КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Закупки.Количество <> 0
		|				ТОГДА Закупки.Стоимость / Закупки.Количество
		|			ИНАЧЕ Закупки.Стоимость
		|		КОНЕЦ, 0) КАК Цена,
		|	ВТ_МАКС_ДАТА.Номенклатура КАК Номенклатура,
		|	ВТ_МАКС_ДАТА.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ЗАКУПКИ
		|ИЗ
		|	ВТ_МАКС_ДАТА КАК ВТ_МАКС_ДАТА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
		|		ПО ВТ_МАКС_ДАТА.Номенклатура = Закупки.АналитикаУчетаНоменклатуры.Номенклатура
		|			И ВТ_МАКС_ДАТА.Характеристика = Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|			И ВТ_МАКС_ДАТА.МаксПериод = Закупки.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СРЕДНЕЕ(ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Цена, ЦЕНЫ_ЗАКУПКИ.Цена)) КАК ЦЕНА,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика) КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ
		|ИЗ
		|	ВТ_ЦЕНЫ_ПОТИПУЦЕН КАК ЦЕНЫ_ПОТИПУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ_ЗАКУПКИ КАК ЦЕНЫ_ЗАКУПКИ
		|		ПО ЦЕНЫ_ПОТИПУ.Номенклатура = ЦЕНЫ_ЗАКУПКИ.Номенклатура
		|			И ЦЕНЫ_ПОТИПУ.Характеристика = ЦЕНЫ_ЗАКУПКИ.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура),
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	Спр.Код КАК НоменклатурныйНомер,
		|	Спр.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	Спр.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	СУММА(ВТ_Товары.Количество) КАК Количество,
		|	СУММА(ЕСТЬNULL(ВТ_СЕБЕСТ.СебестЗаЕд, ЕСТЬNULL(ВТ_ЦЕНЫ.ЦЕНА, ВТ_Товары.Цена))) КАК Цена,
		|	СУММА(ВТ_Товары.Сумма) КАК Сумма
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр
		|		ПО (Спр.Ссылка = ВТ_Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ КАК ВТ_ЦЕНЫ
		|		ПО (ВТ_ЦЕНЫ.Номенклатура = ВТ_Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СЕБЕСТ_ФАКТ КАК ВТ_СЕБЕСТ
		|		ПО (ВТ_СЕБЕСТ.Продукт = ВТ_ЦЕНЫ.Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура,
		|	Спр.Код,
		|	Спр.ЕдиницаИзмерения.Код,
		|	Спр.ЕдиницаИзмерения.Наименование";
#КонецОбласти		

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
		|	вт_ОтчетПроизводстваТовары.Количество КАК Количество,
		|	вт_ОтчетПроизводстваТовары.Цена КАК Цена,
		|	вт_ОтчетПроизводстваТовары.Сумма КАК Сумма,
		|	вт_ОтчетПроизводстваТовары.ВидЗапасов КАК ВидЗапасов,
		|	вт_ОтчетПроизводстваТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	вт_ОтчетПроизводстваТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	вт_ОтчетПроизводстваТовары.вт_Заказ КАК вт_Заказ,
		|	вт_ОтчетПроизводстваТовары.БракКолВо КАК БракКолВо,
		|	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан,
		|	вт_ОтчетПроизводстваТовары.ВесОбщий КАК ВесОбщий,
		|	вт_ОтчетПроизводстваТовары.ВесДетали КАК ВесДетали,
		|	вт_ОтчетПроизводстваТовары.ВариантПроизводства КАК ВариантПроизводства,
		|	вт_ОтчетПроизводстваТовары.МатериалОтхода КАК МатериалОтхода,
		|	вт_ОтчетПроизводстваТовары.ОбъемОтхода КАК ОбъемОтхода,
		|	вт_ОтчетПроизводстваТовары.ВариантОбработкиБрака КАК ВариантОбработкиБрака,
		|	вт_ОтчетПроизводстваТовары.КодСтроки КАК КодСтроки,
		|	вт_ОтчетПроизводстваТовары.Оборудование КАК Оборудование,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтПлан КАК ВремяПроизводстваШтПлан,
		|	вт_ОтчетПроизводстваТовары.ВремяПроизводстваШтФакт КАК ВремяПроизводстваШтФакт,
		|	вт_ОтчетПроизводстваТовары.КлючСвязиОборудования КАК КлючСвязиОборудования
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК вт_ОтчетПроизводстваТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК СтоимостьРегл,
		|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Продукт,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура КАК КорНоменклатура,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Характеристика КАК КорХарактеристика
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ПРЕД
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Регистратор = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Номенклатура,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Характеристика,
		|	СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЕБЕСТ_ПРЕД.Номенклатура КАК Номенклатура,
		|	ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл КАК СебестФакт,
		|	ВЫБОР
		|		КОГДА ВТ_СЕБЕСТ_ПРЕД.Количество <> 0
		|			ТОГДА ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл / ВТ_СЕБЕСТ_ПРЕД.Количество
		|		ИНАЧЕ ВТ_СЕБЕСТ_ПРЕД.СтоимостьРегл
		|	КОНЕЦ КАК СебестЗаЕд,
		|	ВТ_СЕБЕСТ_ПРЕД.Продукт КАК Продукт,
		|	ВТ_СЕБЕСТ_ПРЕД.КорНоменклатура КАК КорНоменклатура,
		|	ВТ_СЕБЕСТ_ПРЕД.КорХарактеристика КАК КорХарактеристика,
		|	ВТ_СЕБЕСТ_ПРЕД.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_СЕБЕСТ_ФАКТ
		|ИЗ
		|	ВТ_СЕБЕСТ_ПРЕД КАК ВТ_СЕБЕСТ_ПРЕД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ПОТИПУЦЕН
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ.Номенклатура,
		|						ВТ.Характеристика
		|					ИЗ
		|						ВТ_Товары КАК ВТ)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	МАКСИМУМ(Закупки.Период) КАК МаксПериод
		|ПОМЕСТИТЬ ВТ_МАКС_ДАТА
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(Закупки.Период, ДЕНЬ) <= &НаДату
		|	И (Закупки.АналитикаУчетаНоменклатуры.Номенклатура, Закупки.АналитикаУчетаНоменклатуры.Характеристика) В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ.Номенклатура,
		|				ВТ.Характеристика
		|			ИЗ
		|				ВТ_Товары КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура,
		|	Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Закупки.Количество <> 0
		|				ТОГДА Закупки.Стоимость / Закупки.Количество
		|			ИНАЧЕ Закупки.Стоимость
		|		КОНЕЦ, 0) КАК Цена,
		|	ВТ_МАКС_ДАТА.Номенклатура КАК Номенклатура,
		|	ВТ_МАКС_ДАТА.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ_ЗАКУПКИ
		|ИЗ
		|	ВТ_МАКС_ДАТА КАК ВТ_МАКС_ДАТА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
		|		ПО ВТ_МАКС_ДАТА.Номенклатура = Закупки.АналитикаУчетаНоменклатуры.Номенклатура
		|			И ВТ_МАКС_ДАТА.Характеристика = Закупки.АналитикаУчетаНоменклатуры.Характеристика
		|			И ВТ_МАКС_ДАТА.МаксПериод = Закупки.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СРЕДНЕЕ(ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Цена, ЦЕНЫ_ЗАКУПКИ.Цена)) КАК ЦЕНА,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика) КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ЦЕНЫ
		|ИЗ
		|	ВТ_ЦЕНЫ_ПОТИПУЦЕН КАК ЦЕНЫ_ПОТИПУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ_ЗАКУПКИ КАК ЦЕНЫ_ЗАКУПКИ
		|		ПО ЦЕНЫ_ПОТИПУ.Номенклатура = ЦЕНЫ_ЗАКУПКИ.Номенклатура
		|			И ЦЕНЫ_ПОТИПУ.Характеристика = ЦЕНЫ_ЗАКУПКИ.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Номенклатура, ЦЕНЫ_ЗАКУПКИ.Номенклатура),
		|	ЕСТЬNULL(ЦЕНЫ_ПОТИПУ.Характеристика, ЦЕНЫ_ЗАКУПКИ.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	Спр.Код КАК НоменклатурныйНомер,
		|	Спр.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	Спр.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	СУММА(ВТ_Товары.Количество) КАК Количество,
		|	СУММА(ЕСТЬNULL(ВТ_СЕБЕСТ.СебестЗаЕд, ЕСТЬNULL(ВТ_ЦЕНЫ.ЦЕНА, ВТ_Товары.Цена))) КАК Цена,
		|	СУММА(ВТ_Товары.Сумма) КАК Сумма,
		|	ВТ_Товары.Характеристика КАК Характеристика
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Спр
		|		ПО (Спр.Ссылка = ВТ_Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦЕНЫ КАК ВТ_ЦЕНЫ
		|		ПО (ВТ_ЦЕНЫ.Номенклатура = ВТ_Товары.Номенклатура
		|				И ВТ_ЦЕНЫ.Характеристика = ВТ_Товары.Характеристика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СЕБЕСТ_ФАКТ КАК ВТ_СЕБЕСТ
		|		ПО (ВТ_СЕБЕСТ.Номенклатура = ВТ_ЦЕНЫ.Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура,
		|	Спр.Код,
		|	Спр.ЕдиницаИзмерения.Код,
		|	Спр.ЕдиницаИзмерения.Наименование,
		|	ВТ_Товары.Характеристика";

	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("НаДату",КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ВидЦены", ?(ЗначениеЗаполнено(Объект.ВидЦены), Объект.ВидЦены,КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ВидЦенПлановойСебестоимости")));
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
		ИтогМестНаСтранице = 0;
		ИтогСуммаНаСтранице = 0;
		ИтогМест = 0;
		ИтогСумма = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			ОбластьСтрок.Параметры.ТоварНаименование			= ВыборкаДетальныеЗаписи.Номенклатура;
			ОбластьСтрок.Параметры.ТоварКод			 			= ВыборкаДетальныеЗаписи.НоменклатурныйНомер;
			ОбластьСтрок.Параметры.ЕдиницаИзмеренияКодПоОКЕИ	= ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияКод;
			//ОбластьСтрок.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияНаименование;
			ОбластьСтрок.Параметры.ВидУпаковки					= ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияНаименование; 
			ОбластьСтрок.Параметры.КоличествоВОдномМесте		= ВыборкаДетальныеЗаписи.Количество;                   
			ОбластьСтрок.Параметры.КоличествоМест				= 1;
			//ОбластьСтрок.Параметры.Счет  						= 
			ОбластьСтрок.Параметры.Цена							= ВыборкаДетальныеЗаписи.Цена; 
			ОбластьСтрок.Параметры.Сумма 						= ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.Количество;
 
			ТабДок.Вывести(ОбластьСтрок); 
			
			ИтогМестНаСтранице  = ИтогМестНаСтранице + ВыборкаДетальныеЗаписи.Количество;
			ИтогСуммаНаСтранице = ИтогСуммаНаСтранице + ВыборкаДетальныеЗаписи.Сумма;

			ИтогМест  = ИтогМест + ИтогМестНаСтранице;
			ИтогСумма = ИтогСумма + ИтогСуммаНаСтранице;
		КонецЦикла;
	КонецЕсли;	
	
	ОбластьИтогиПоСтранице.Параметры.ИтогМестНаСтранице  = ИтогМестНаСтранице;
	ОбластьИтогиПоСтранице.Параметры.ИтогСуммаНаСтранице = ИтогСуммаНаСтранице;
	ТабДок.Вывести(ОбластьИтогиПоСтранице);  
	
	ОбластьВсего.Параметры.ИтогМест  = ИтогМест;
	ОбластьВсего.Параметры.ИтогСумма = ИтогСумма;	
	ТабДок.Вывести(ОбластьВсего);   
	
	ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ИтогМест, ,",,,,,,,,0");
	ТабДок.Вывести(ОбластьПодвал);   		
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу  = 0;
	ТабДок.ПолеСлева  = 0;
	ТабДок.ПолеСправа = 0;
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьОборудованиеДляТекущейСтрокиГотовойПродукции(Команда)
	СписокОборудования = ПолучитьСписокОборудования();
	//СписокОборудования = Новый СписокЗначений;
	пЗаголовок ="Выберите оборудование"+Символы.ПС + "(выбирается только то оборудование, которое имеется в документе)";
	ВыбранноеОборудование = СписокОборудования.ВыбратьЭлемент(пЗаголовок);
	НомерСтрокиОборудования = СписокОборудования.Индекс(ВыбранноеОборудование);
	Если НомерСтрокиОборудования > -1 Тогда
		ТекСтрока = Элементы.Товары.ТекущиеДанные;
		ТекСтрока.КлючСвязиОборудования = Объект.вт_ОборудованиеПроизводства[НомерСтрокиОборудования].КодСтроки;
		ТекСтрока.Оборудование = ВыбранноеОборудование.Значение;
	КонецЕсли;	
	УстановитьОтборПродукцииПоОборудованию();
	УстановитьОтборПоГотовойПродукции();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОборудования()
	СписокОборудования = Новый СписокЗначений;
	КолвоСтрокОборудование = Объект.вт_ОборудованиеПроизводства.Количество();
	Для Индекс = 0 по КолвоСтрокОборудование-1 Цикл
		СписокОборудования.Добавить(Объект.вт_ОборудованиеПроизводства[Индекс].Оборудование);
	КонецЦикла;	
	Возврат СписокОборудования;
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаТоваров.Ссылка
			|ИЗ
			|	Документ.СборкаТоваров КАК СборкаТоваров
			|ГДЕ
			|	СборкаТоваров.ПометкаУдаления
			|	И СборкаТоваров.Комментарий ПОДОБНО &Комментарий";		
		Запрос.УстановитьПараметр("Комментарий", Строка(Объект.Ссылка)); 		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
					обСборка = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Попытка
						обСборка.Удалить();
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//	ПередЗакрытиемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	ОткрытьПодборСерий();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусУказанияСерий(ИмяТаблицы)
		
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = Истина;
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.вт_ОтчетПроизводства";
	ПараметрыУказанияСерий.ИмяТЧТовары = ИмяТаблицы;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтаФорма.Объект, ПараметрыУказанияСерий);
	              
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтатусУказанияСерийОтходов()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого мСтрока Из Объект.вт_БракДробленка Цикл
		мСтрока.СтатусУказанияСерий = ДокОбъект.вт_ПолучитьСтатусУказанияСерий(мСтрока.Дробленка);
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	ЗаполнитьСтатусУказанияСерий("Товары");	
	//ПараметрыУказанияСерий = ПолучитьПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
	//++ 13.06.2019
		мМассив = Новый Массив;
		мМассив.Добавить("КодСтроки");
		//мМассив.Добавить("КлючСвязиСтроки");
	ПараметрыУказанияСерий.ПоляСвязи = мМассив;	
	//-- 13.06.2019
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;   
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, 
		Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыУказанияСерий()
	Возврат НоменклатураСервер.ПараметрыУказанияСерий(Объект,Документы.вт_ОтчетПроизводства);	
КонецФункции	

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НС_ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    ЗначениеВозврата = Результат;
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
	
ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,Неопределено);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, Действия = Неопределено, КешированныеЗначения = Неопределено) 
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	
#Область ОбработкаПодбораСерий
	// Если обрабатывается результаты формы подбора серий,
	// то серии целиком загружаются из обработки.
	
	Если Не ПараметрыФормыУказанияСерий.РегистрироватьСерии Тогда 
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
		
		Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
			
			НоменклатураСервер.ЗаполнитьСерииВТЧПоТаблицеСерий(Объект,
											ПараметрыУказанияСерий,
											СтруктураВозврата.ТаблицаСерий,
											Действия);
											
			Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
				И Не ПараметрыУказанияСерий.ИспользоватьАдресноеХранение Тогда
				НоменклатураСервер.РазбитьТоварыПоТоварнымМестам(Объект[ПараметрыУказанияСерий.ИмяТЧТовары]);									
			КонецЕсли;
			
		Иначе
			Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(СтруктураВозврата.ТаблицаСерий);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		КонецЕсли;
		
		
		Возврат;
	КонецЕсли;
#КонецОбласти

#Область ОбработкаРегистрацииСерий
// Удалим прежние строки серий
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	
	Если СтруктураПоиска.Свойство("Упаковка")
		И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
		И ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
		
		// При использовании товарных мест, изменения в строке касаются каждой упаковки - товарного места.
		СтруктураПоиска.Удалить("Упаковка");
		
	КонецЕсли;
	
	НомерВставляемойСтроки = 0;
	
	Упаковки = Новый Массив();
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЕстьУпаковкиВТЧТовары = Ложь;
		Если Объект.Свойство("Упаковка") Тогда
			Упаковки.Добавить(Объект.Упаковка);
		КонецЕсли;
	Иначе
		КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(Новый Массив);
		ЕстьУпаковкиВТЧТовары = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
	КонецЕсли;
	
	КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(Новый Массив);
	ЕстьУпаковкиВТЧСерии = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
	
	Если ЕстьУпаковкиВТЧТовары Тогда
		УпаковкиТЧТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧТовары);
	КонецЕсли;
	
	Если ЕстьУпаковкиВТЧСерии Тогда
		УпаковкиТЧСерии = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧСерии);
	КонецЕсли;
	
	Упаковки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Упаковки);
	ТипыУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Упаковки, "ТипУпаковки");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	//++ 13.06.2019
	 СтруктураПоиска = ЗаменитьВСтруктуреПоискаКодСтрокиНаКлючСвязиСтроки(СтруктураПоиска);	
	//-- 13.06.2019
	НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	КоличествоУпаковокДоУдаленияСерий = 0;
	УпаковкиТоварныхМест = Новый Массив();
	
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	
	Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
		
		Если ЕстьУпаковкиВТЧТовары
			И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
			И ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
			ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
			Если Не ТоварныеМестаВСтроке Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТоварныеМестаВСтроке
				И УпаковкиТоварныхМест.Найти(СтрМас.Упаковка) = Неопределено Тогда
				УпаковкиТоварныхМест.Добавить(СтрМас.Упаковка);
			КонецЕсли;
			
		ИначеЕсли ЕстьУпаковкиВТЧТовары
			И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста 
			И Не ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
			ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
			Если ТоварныеМестаВСтроке Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
			Если ЕстьУпаковкиВТЧТовары Тогда
				КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас.КоличествоУпаковок;
			Иначе
				КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаСерий.НайтиСтроки(Новый Структура("Серия", СтрМас.Серия)).Количество() = 0 Тогда 
			Если НомерВставляемойСтроки = 0 Тогда
				НомерВставляемойСтроки = СтрМас.НомерСтроки;
			КонецЕсли;
			Если ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества Тогда
				СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
			Иначе
				Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМас);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим новые строки серий
	СтрокиСерийДляОбработки =  Новый Массив;
	
	КоличествоУпаковокПослеУдаленияСерий = 0;
	
	Если ЕстьУпаковкиВТЧТовары
		И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
		И ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
		
		ТаблицаДокумента = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить();
		ТаблицаДокумента.Колонки.Добавить("СтрокаКОбработке", Новый ОписаниеТипов("Булево"));
		ТаблицаДокумента.Колонки.Добавить("КоличествоПоСериям", Новый ОписаниеТипов("Число"));
		
		СтарыеСтроки = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
		
		// Подготовка строк к обработке
		Для Каждого Строка Из СтарыеСтроки Цикл
			
			ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(Строка.Упаковка)
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
			
			Если ТоварныеМестаВСтроке Тогда
				Строка.СтрокаКОбработке = Истина;
			КонецЕсли;
		
		КонецЦикла;
		
		// Умножение серий на упаковки с типом "товарное место"
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Серия      КАК Серия,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ВТСерии
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Упаковка
		|ПОМЕСТИТЬ ВТУпаковки
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивУпаковок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Серия           КАК Серия,
		|	СписокУпаковок.Упаковка КАК Упаковка,
		|	Таблица.Количество      КАК КоличествоПоСериям,
		|	ИСТИНА                  КАК СтрокаКОбработке
		|ИЗ
		|	ВТСерии КАК Таблица
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТУпаковки КАК СписокУпаковок
		|		ПО (ИСТИНА)";
		Запрос.УстановитьПараметр("Таблица", ТаблицаСерий);
		Запрос.УстановитьПараметр("МассивУпаковок", УпаковкиТоварныхМест);
		
		ТаблицаСерийИУпаковок = Запрос.Выполнить().Выгрузить();
		
		// 1. Распределение на строки с указанными упаковками и сериями
		
		// Добавление количества заказов
		Ключ = "СтрокаКОбработке, Упаковка, Серия";
		
		Условие = "ПО [Количество]";
		НакладныеСервер.РаспределитьКоличество(ТаблицаСерийИУпаковок, ТаблицаДокумента, "КоличествоПоСериям", Ключ, Условие, Ложь);
		
		// 2. Распределение на строки с указанными упаковками
		Ключ = "СтрокаКОбработке, Упаковка";
		
		Условие = "ПО [Количество]";
		НакладныеСервер.РаспределитьКоличество(ТаблицаСерийИУпаковок, ТаблицаДокумента, "КоличествоПоСериям", Ключ, Условие, Ложь);
		
		// 3. Создание новых строк для оставшейся нераспределенной части
		Для Каждого Строка Из ТаблицаСерийИУпаковок Цикл
			Если Строка.КоличествоПоСериям = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыФормыУказанияСерий);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Серия, Упаковка");
			НоваяСтрока.Количество = Строка.КоличествоПоСериям;
			
			СтрокиСерийДляОбработки.Добавить(НоваяСтрока);
			
			Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
				
				СтруктураДействий = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Действия);
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
				СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КешированныеЗначения);
				
				КоличествоУпаковокПослеУдаленияСерий = КоличествоУпаковокПослеУдаленияСерий + НоваяСтрока.КоличествоУпаковок; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Для Каждого СтрТабл Из ТаблицаСерий Цикл
			СтруктураПоискаПоСериям = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
			СтруктураПоискаПоСериям.Вставить("Серия", СтрТабл.Серия);
			
			СтарыеСтроки = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаПоСериям);
			
			Если СтарыеСтроки.Количество() = 0 Тогда 
				Если НомерВставляемойСтроки = 0 Тогда
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
				Иначе
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Вставить(НомерВставляемойСтроки - 1);
				КонецЕсли;
			Иначе
				НоваяСтрока = СтарыеСтроки[0];
				
				Если СтарыеСтроки.Количество() > 1 Тогда
					
					Для Каждого СтрМасСтарыеСтроки из СтарыеСтроки Цикл
						Если СтрМасСтарыеСтроки <> НоваяСтрока Тогда
							Если ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества Тогда
								СтрМасСтарыеСтроки[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
							Иначе
								Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМасСтарыеСтроки);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			НомерВставляемойСтроки = НоваяСтрока.НомерСтроки + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
			//++ 13.06.2019
			Если ПараметрыФормыУказанияСерий.ПараметрыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
				НоваяСтрока.КлючСвязиСтроки = СтруктураПоискаПоСериям.КлючСвязиСтроки; 
			КонецЕсли;	
			//--13.06.2019
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
			
			Если ЕстьУпаковкиВТЧСерии
				И ПараметрыФормыУказанияСерий.Свойство("УпаковкаДляПодстановки") Тогда
				
				НоваяСтрока.Упаковка = ПараметрыФормыУказанияСерий.УпаковкаДляПодстановки;
				
			КонецЕсли;
			
			Если ПараметрыУказанияСерий.ИмяПоляКоличество <> "Количество"
				И ПараметрыУказанияСерий.ИмяПоляКоличество <> "КоличествоУпаковок" Тогда
				Если ЕстьУпаковки Тогда
					НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрТабл.КоличествоУпаковок;
				Иначе
					НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрТабл.Количество;
				КонецЕсли;
			КонецЕсли;
			
			СтрокиСерийДляОбработки.Добавить(НоваяСтрока);
			
			Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
				
				Если Действия <> Неопределено Тогда
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КешированныеЗначения);
					
				КонецЕсли;
				
				Если ЕстьУпаковкиВТЧТовары Тогда
					КоличествоУпаковокПослеУдаленияСерий = КоличествоУпаковокПослеУдаленияСерий + НоваяСтрока.КоличествоУпаковок; 
				Иначе
					КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
		
		Дельта = КоличествоУпаковокПослеУдаленияСерий - КоличествоУпаковокДоУдаленияСерий;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") 
			И ЕстьУпаковки Тогда
			ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(ПараметрыФормыУказанияСерий.Номенклатура,
																					ПараметрыФормыУказанияСерий.Упаковка); 
			
			Для Каждого СтрТабл Из ТаблицаТары Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрТабл.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрТабл.Характеристика);
				
				СтрокиТары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиТары.Количество() = 0 Тогда
					// Если форма указания серий была открыта после сканирования штрихкода товара,
					// то тара была добавлена в документ обработкой сканирования штрихкода.
					// Значит это условие может отработать только при ручном открытии формы серий, что эквивалентно
					// ручному редактированию количества товаров.
					// При ручном редактировании количества товаров мы тару не пересчитываем.
					Продолжить;	
				Иначе
					СтрокаТары = СтрокиТары[0];
				КонецЕсли;
				
				СтрокаТары.Количество         = СтрокаТары.Количество + Дельта * СтрТабл.Количество;
				СтрокаТары.КоличествоУпаковок = СтрокаТары.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьУпаковки
		И ЗначениеЗаполнено(ПараметрыФормыУказанияСерий.Упаковка) Тогда //не заполнена для тары
		КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
		КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество 
							/Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ПараметрыФормыУказанияСерий.Упаковка, ПараметрыФормыУказанияСерий.Номенклатура); 
	Иначе
		КоличествоСерий = ТаблицаСерий.Итог("Количество");
		КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество;
	КонецЕсли;	
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если КоличествоСерий <> КоличествоТоваров 
			И Действия <> Неопределено
			И Действия.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И Действия.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			Объект[ПараметрыУказанияСерий.ИмяПоляКоличество] = КоличествоСерий;
			КоличествоТоваров = КоличествоСерий;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, Действия, КешированныеЗначения);
			
		КонецЕсли;
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров);
		
		НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																			Объект.СтатусУказанияСерий,
																			СерииУказаныПолностью,
																			КоличествоСерий);
		
	Иначе
		//++13.06.2019
		Если ПараметрыУказанияСерий.ИмяТЧТовары <>"Товары" Тогда
			СтруктураПоиска = ЗаменитьВСтруктуреПоискаКодСтрокиНаКлючСвязиСтроки(СтруктураПоиска);
		Иначе
			СтруктураПоиска = ЗаменитьВСтруктуреПоискаКлючСвязиСтрокиНаКодСтроки(СтруктураПоиска);
		КонецЕсли;
		//--13.06.2019
		
		//++18.06.2019
		Если ПараметрыУказанияСерий.ИмяТЧТовары = "вт_БракДробленка" Тогда
			СтруктураПоиска = ЗаменитьВСтруктуреПоискаНоменклатуруНаДробленку(структураПоиска);
		КонецЕсли;	
		//--18.06.2019
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		Если КоличествоСерий <> КоличествоТоваров 
			И Действия <> Неопределено
			И Действия.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И Действия.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			ЕстьПересчетКоличества = Ложь;
			КоличествоЕдиницСуффикс = "";
			
			Если Действия.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
				Действия.Удалить("ПересчитатьКоличествоЕдиниц");
				ЕстьПересчетКоличества = Истина;
			ИначеЕсли Действия.Свойство("ПересчитатьКоличествоЕдиницСуффикс") Тогда
				КоличествоЕдиницСуффикс = Действия.ПересчитатьКоличествоЕдиницСуффикс;
				Действия.Удалить("ПересчитатьКоличествоЕдиницСуффикс");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			Если Действия.Свойство("ПересчитатьКоличествоУпаковок") Тогда
				Действия.Удалить("ПересчитатьКоличествоУпаковок");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			КоличествоКРаспределению = КоличествоСерий - КоличествоТоваров;
			
			Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
				Дельта = КоличествоКРаспределению;
				
				Если -Дельта > СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] Тогда
					Дельта = -СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество];
					СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
				Иначе
					СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] + Дельта;
				КонецЕсли;
				
				Если ЕстьПересчетКоличества Тогда
					Если ЕстьУпаковки Тогда
						Если КоличествоЕдиницСуффикс <> "" Тогда
							Действия.Вставить("ПересчитатьКоличествоЕдиницСуффикс", КоличествоЕдиницСуффикс);
						Иначе
							Действия.Вставить("ПересчитатьКоличествоЕдиниц");
						КонецЕсли; 
					Иначе
						Если КоличествоЕдиницСуффикс <> "" Тогда
							Действия.Вставить("ПересчитатьКоличествоУпаковокСуффикс", КоличествоЕдиницСуффикс);
						Иначе
							Действия.Вставить("ПересчитатьКоличествоУпаковок");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				КоличествоТоваров = КоличествоТоваров + Дельта;
				
				КоличествоКРаспределению = КоличествоКРаспределению - Дельта;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, Действия, КешированныеЗначения);
				
				Если ЕстьУпаковки
					И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
					ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(СтрокаТоваров.Номенклатура, СтрокаТоваров.Упаковка); 
					
					Для Каждого СтрТабл Из ТаблицаТары Цикл
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура", СтрТабл.Номенклатура);
						СтруктураПоиска.Вставить("Характеристика", СтрТабл.Характеристика);
						
						СтрокиТары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
						
						Если СтрокиТары.Количество() = 0 Тогда
							// Если форма указания серий была открыта после сканирования штрих-кода товара,
							// то тара была добавлена в документ обработкой сканирования штрих-кода.
							// Это условие может отработать только при ручном открытии формы серий, что эквивалентно
							// ручному редактированию количества товаров. При ручном редактировании количества
							// товаров мы тару не пересчитываем.
							Продолжить;	
						Иначе
							СтрокаТары = СтрокиТары[0];
						КонецЕсли;
						
						// Написано неуниверсально, т.к. во всех документах, в которых есть тара, поля "Количество" называются стандартно.
						СтрокаТары.Количество         = СтрокаТары.Количество + Дельта * СтрТабл.Количество;
						СтрокаТары.КоличествоУпаковок = СтрокаТары.Количество;
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТары, Действия, КешированныеЗначения);

					КонецЦикла;
					
				КонецЕсли;
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров
			И (КоличествоТоваров > 0
				Или ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества));
		 // В режиме ТолькоРедактированиеКоличества допускается нулевое количество как в ТЧ Товары, так и в ТЧ Серии.
		Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				
			Если СтрМас.СтатусУказанияСерий = 0 Тогда
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий, НайденныеСтрокиТоваров, СтрокиСерийДляОбработки);
				Прервать;
			КонецЕсли;
		
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																					СтрМас.СтатусУказанияСерий,
																					СерииУказаныПолностью,
																					КоличествоСерий,,
																					СтрМас);
			Иначе
				
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																						СтрМас[ИмяПоляСтатус],
																						СерииУказаныПолностью,
																						КоличествоСерий,,
																						СтрМас);
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
#КонецОбласти	

КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииОтходов(Команда)
	ОткрытьПодборСерийОтходов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийОтходов(Текст = "", ТекущиеДанные = Неопределено)
	ЗаполнитьСтатусУказанияСерийОтходов();
	//ПараметрыУказанияСерий =  ПолучитьПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "БракДробленка";
	//++ 13.06.2019
	мМассив = Новый Массив;
	мМассив.Добавить("КлючСвязиСтроки");
	ПараметрыУказанияСерий.ПоляСвязи = мМассив;	
	//-- 13.06.2019
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.ТаблицаСырье.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		ПараметрыУказанияСерий.ИмяТЧТовары = "вт_БракДробленка";
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);		
		ЗначениеВозврата = Неопределено;
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОткрытьПодборСерийСырьяЗавершение", ЭтотОбъект,
		Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииСырья(Команда)
	ОткрытьПодборСерийСырья();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийСырья(Текст = "", ТекущиеДанные = Неопределено)
	ЗаполнитьСтатусУказанияСерий("вт_ПроизводствоСырье");
	//ПараметрыУказанияСерий =  ПолучитьПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "ТаблицаСырье";
	//++ 13.06.2019
	мМассив = Новый Массив;
	мМассив.Добавить("КлючСвязиСтроки");
	ПараметрыУказанияСерий.ПоляСвязи = мМассив;	
	//-- 13.06.2019
	//
	//ПоляСвязи = Новый Массив;
	//ПоляСвязи.Добавить("СкладСырья");
	//ПараметрыУказанияСерийСырья.ПоляСвязи = ПоляСвязи;
	//
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.ТаблицаСырье.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		ПараметрыУказанияСерий.ИмяТЧТовары = "вт_ПроизводствоСырье";
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);		
		ЗначениеВозврата = Неопределено;
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОткрытьПодборСерийСырьяЗавершение", ЭтотОбъект,
		Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийСырьяЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерийСырья = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерийСырья);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСырьяСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ТаблицаСырье");
	
	//НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	//		Элемент,КэшированныеЗначения,ПараметрыУказанияСерийСырья, Копирование);
КонецПроцедуры

//++ 21.03.2018
&НаКлиенте
Процедура ТаблицаСырьеСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("ВидНоменклатуры", ПолучитьВидНоменклатуры(Элементы.ТаблицаСырье.ТекущиеДанные.Номенклатура));
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ТаблицаСырьеСерияНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	//++ Закомментировал 07.06.2019 Этой формы в конфигурации нет
	//ОткрытьФорму("ОбщаяФорма.вт_ФормаВыбораСерийНоменклатуры", ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ТаблицаСырьеСерияНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеСерияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ТаблицаСырье.ТекущиеДанные.Серия = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

	
	//СтандартнаяОбработка = Ложь;
	//ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("ВидНоменклатуры", ПолучитьВидНоменклатуры(Элементы.Товары.ТекущиеДанные.Номенклатура));	
	//ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ТоварыСерияНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	////++ Закомментировал 07.06.2019 Этой формы в конфигурации нет
	////ОткрытьФорму("ОбщаяФорма.вт_ФормаВыбораСерийНоменклатуры", ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ТоварыСерияНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Товары.ТекущиеДанные.Серия = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура БракДробленкаСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("ВидНоменклатуры", ПолучитьВидНоменклатуры(Элементы.БракДробленка.ТекущиеДанные.Дробленка));
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("БракДробленкаСерияНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	//++ Закомментировал 07.06.2019 Этой формы в конфигурации нет
	//ОткрытьФорму("ОбщаяФорма.вт_ФормаВыбораСерийНоменклатуры", ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ТаблицаСырьеСерияНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры
 
&НаКлиенте
Процедура БракДробленкаСерияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.БракДробленка.ТекущиеДанные.Серия = Результат;
	
КонецПроцедуры





&НаСервере
Функция ПолучитьВидНоменклатуры(ТекущиеДанныеНоменклатура)
	Возврат ТекущиеДанныеНоменклатура.ВидНоменклатуры;
КонецФункции	

&НаКлиенте
Процедура ВидОперацииПроизводстваПриИзменении(Элемент)
	УстановитьВидимостьГруппыКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыКонтрагента()
	 Элементы.ГруппаКонтрагента.Видимость = НЕ (Объект.ВидОперацииПроизводства=ПредопределенноеЗначение("Перечисление.вт_ВидыОперацийПроизводства.СобственноеПроизводство"));
	 Если Объект.ВидОперацииПроизводства=ПредопределенноеЗначение("Перечисление.вт_ВидыОперацийПроизводства.ПроизводствоДляЗаказчика") Тогда
		 Элементы.Партнер.Заголовок = "Заказчик";
	 ИначеЕсли Объект.ВидОперацииПроизводства=ПредопределенноеЗначение("Перечисление.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства") Тогда
		 Элементы.Партнер.Заголовок = "Исполнитель,производитель";
	 КонецЕсли;	 
 КонецПроцедуры	

 &НаКлиенте
Процедура УстановитьВидимостьГруппыОперации()
 Элементы.ГруппаОперации.Видимость = ЕстьОперацииВДокументеОсновании();
КонецПроцедуры	

&НаСервере
Функция ЕстьОперацииВДокументеОсновании()
	ЕстьОперации = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
		ЕстьОперации =Объект.ДокументОснование.ОперацииПроизводства.Количество()>0;
	КонецЕсли;
	
	
	Возврат ЕстьОперации;
	
КонецФункции	

&НаКлиенте
 Процедура ПечатьЭтикетокЦенников(Команда)
	 
	 ПараметрыПечати = Новый Структура("АдресВХранилище");
	 ПараметрыПечати.АдресВХранилище = ПоместитьТоварыВХранилище();
	 
	 ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары",ПараметрыПечати);
	 
КонецПроцедуры
 
 &НаСервере
 Функция ПоместитьТоварыВХранилище()
	 ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));

	 ТоварыПечати = Новый ТаблицаЗначений;
	 ТоварыПечати.Колонки.Добавить("Порядок",        ТипЧисло);
	 ТоварыПечати.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	 ТоварыПечати.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	 ТоварыПечати.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	 ТоварыПечати.Колонки.Добавить("Количество",     ТипЧисло);
	 
	 Нпп = 1;
	 Для Каждого СтрокаПродукция из Объект.Товары Цикл
		   СтрокаПечати = ТоварыПечати.Добавить();
		   СтрокаПечати.Порядок = Нпп;
		   СтрокаПечати.Номенклатура = СтрокаПродукция.Номенклатура;
		   СтрокаПечати.Характеристика = СтрокаПродукция.Характеристика;
		   СтрокаПечати.Количество = СтрокаПродукция.Количество;
		   Нпп = Нпп + 1;
	 КонецЦикла;
	 
	 СтруктДанных = Новый Структура("Товары",ТоварыПечати);
	 
	 СтруктураДействий = Новый Структура();
	 СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Объект.Организация);
	 СтруктураДействий.Вставить("ЗаполнитьСклад", Объект.Склад);
	 СтруктураДействий.Вставить("ЗаполнитьВидЦены", Объект.ВидЦены);
	 СтруктураДействий.Вставить("УстановитьРежим","ПечатьЭтикеток");
	 СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров",Истина);
	 СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу",Истина);
	 СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу",Истина);
	 //СтруктураДействий.Вставить("", Объект.Организация);
	 //СтруктураДействий.Вставить("", Объект.Организация);
	 //СтруктураДействий.Вставить("", Объект.Организация);
	 //СтруктураДействий.Вставить("", Объект.Организация);
	 
	 СтруктДанных.Вставить("СтруктураДействий",СтруктураДействий);
	 
	 
	 Возврат ПоместитьВоВременноеХранилище(СтруктДанных);
 КонецФункции


&НаКлиенте
 Процедура УпаковкаПродкуции(Команда)
	 ФрмДок = ПолучитьФорму("Документ.УпаковочныйЛист.Форма.ФормаДокумента");
	 ДанныеОбъекта = ФрмДок.Объект;
	 ЗаполнитьДокументУпаковка(ДанныеОбъекта);
	 КопироватьДанныеФормы(ДанныеОбъекта, ФрмДок.Объект);
	 ФрмДок.Открыть();

 КонецПроцедуры
 
 &НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

 &НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДокументУпаковка(ДанныеОбъекта)
	 ДанныеОбъекта.СкладУпаковки = Объект.Склад;
	 ДанныеОбъекта.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
	 ДанныеОбъекта.Упаковал = ПараметрыСеанса.ТекущийПользователь;

	 Для Каждого СтрокаПродукция из Объект.Товары Цикл
		 СтрокаУпак = ДанныеОбъекта.товары.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаУпак, СтрокаПродукция);
		 СтрокаУпак.КоличествоУпаковок = СтрокаПродукция.Количество;
	 КонецЦикла;
 КонецПроцедуры 

&НаСервере
Процедура КомандаЗаполнитьНачисленияНаСервере()
	Объект.Сотрудники.Очистить();
	 Для Каждого СтрокаСостава из Объект.СменаБригада.Состав Цикл
		 ЗаполнитьТаблицуТарифовПоСотруднику(СтрокаСостава.Сотрудник);
	 КонецЦикла;
 КонецПроцедуры

&НаКлиенте
 Процедура КомандаЗаполнитьНачисления(Команда)
	 Если ЭтаФорма.Модифицированность Тогда
		 Сообщить("Для подбора сотрудников документ должен быть записан!");
		 Возврат;
	 КонецЕсли;
	 
	 КомандаЗаполнитьНачисленияНаСервере();
 КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборСотрудника(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		 Сообщить("Для подбора сотрудников документ должен быть записан!");
		 Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",,ЭтаФорма.Элементы.Сотрудники);
КонецПроцедуры


 &НаСервере
Процедура ЗаполнитьТаблицуТарифовПоСотруднику(ВыбранныйСотрудник)
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗаполнитьТаблицуТарифовПоСотруднику(ВыбранныйСотрудник);
	
	Объект.Сотрудники.Загрузить(Об.Сотрудники.Выгрузить());
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                         |	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
	//                         |	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан
	//                         |ПОМЕСТИТЬ ВТ_ТОВАРЫ
	//                         |ИЗ
	//                         |	Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
	//                         |ГДЕ
	//                         |	вт_ОтчетПроизводстваТовары.Ссылка = &Ссылка
	//                         |;
	//						 |ВЫБРАТЬ
	//                         |	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
	//                         |	вт_ОтчетПроизводстваТовары.Количество КАК Количество
	//                         |ПОМЕСТИТЬ ВТ_ОПЕРАЦИИ
	//                         |ИЗ
	//                         |	Документ.вт_ОтчетПроизводства.Операции КАК вт_ОтчетПроизводстваТовары
	//                         |ГДЕ
	//                         |	вт_ОтчетПроизводстваТовары.Ссылка = &Ссылка
	//                         |;
	//                         |
	//                         |////////////////////////////////////////////////////////////////////////////////
	//                         |ВЫБРАТЬ
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	//                         |	ВТ_ТОВАРЫ.Номенклатура КАК Номенклатура,
	//                         |	ВТ_ТОВАРЫ.КоличествоПлан КАК КоличествоПлан,
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа КАК ПредметТарифа
	//                         |ПОМЕСТИТЬ ВТ_ПОТОВАРАМ
	//                         |ИЗ
	//                         |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
	//                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	//                         |		ПО ВТ_ТОВАРЫ.Номенклатура = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	//                         |ГДЕ
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	//                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	//                         |;
	//						 |/////////////////////////////////////////////////////////////////////////////////
	//                         |ВЫБРАТЬ
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	//                         |	ВТ_ОПЕРАЦИИ.Номенклатура КАК Номенклатура,
	//                         |	ВТ_ОПЕРАЦИИ.Количество КАК Количество,
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа КАК ПредметТарифа
	//                         |ПОМЕСТИТЬ ВТ_ПООПЕРАЦИЯМ
	//                         |ИЗ
	//                         |	ВТ_ОПЕРАЦИИ КАК ВТ_ОПЕРАЦИИ
	//                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	//                         |		ПО ВТ_ОПЕРАЦИИ.Номенклатура = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	//                         |ГДЕ
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	//                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	//                         |;
	//                         |
	//                         |////////////////////////////////////////////////////////////////////////////////
	//                         |ВЫБРАТЬ
	//                         |	ВТ_ТОВАРЫ.Номенклатура КАК Номенклатура,
	//                         |	ВТ_ТОВАРЫ.КоличествоПлан КАК КоличествоПлан,
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	//                         |	ВТ_ТОВАРЫ.Номенклатура КАК ПредметТарифа
	//                         |ПОМЕСТИТЬ ВТ_ПОВИДАМ
	//                         |ИЗ
	//                         |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
	//                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	//                         |		ПО ВТ_ТОВАРЫ.Номенклатура.ВидНоменклатуры = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	//                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПОТОВАРАМ КАК ВТ_ПОТОВАРАМ
	//                         |		ПО ВТ_ТОВАРЫ.Номенклатура = ВТ_ПОТОВАРАМ.Номенклатура
	//                         |ГДЕ
	//                         |	ЕСТЬNULL(ВТ_ПОТОВАРАМ.КоличествоПлан, 1) = 1
	//                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	//                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	//                         |;
	//                         |
	//                         |
	//                         |////////////////////////////////////////////////////////////////////////////////
	//                         |ВЫБРАТЬ
	//                         |	ВТ_ОПЕРАЦИИ.Номенклатура КАК Номенклатура,
	//                         |	ВТ_ОПЕРАЦИИ.Количество КАК Количество,
	//                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	//                         |	ВТ_ОПЕРАЦИИ.Номенклатура КАК ПредметТарифа
	//                         |ПОМЕСТИТЬ ВТ_ПОВИДАМ_ОПЕРАЦИИ
	//                         |ИЗ
	//                         |	ВТ_ОПЕРАЦИИ КАК ВТ_ОПЕРАЦИИ
	//                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	//                         |		ПО ВТ_ОПЕРАЦИИ.Номенклатура.ВидНоменклатуры = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	//                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПООПЕРАЦИЯМ КАК ВТ_ПООПЕРАЦИЯМ
	//                         |		ПО ВТ_ОПЕРАЦИИ.Номенклатура = ВТ_ПООПЕРАЦИЯМ.Номенклатура
	//                         |ГДЕ
	//                         |	ЕСТЬNULL(ВТ_ПООПЕРАЦИЯМ.Количество, 1) = 1
	//                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	//                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	//                         |;
	//                         |////////////////////////////////////////////////////////////////////////////////
	//                         |ВЫБРАТЬ
	//						 |	&Сотрудник КАК Сотрудник,
	//                         |	ВТ_ПОТОВАРАМ.Тариф КАК Тариф,
	//                         |	ВТ_ПОТОВАРАМ.Номенклатура КАК Номенклатура,
	//                         |	ВТ_ПОТОВАРАМ.КоличествоПлан КАК Количество,
	//                         |	ВТ_ПОТОВАРАМ.ПредметТарифа КАК РазрезНачисления
	//                         |ИЗ
	//                         |	ВТ_ПОТОВАРАМ КАК ВТ_ПОТОВАРАМ
	//                         |
	//                         |ОБЪЕДИНИТЬ ВСЕ
	//                         |
	//                         |ВЫБРАТЬ
	//						 |	&Сотрудник КАК Сотрудник,
	//                         |	ВТ_ПОВИДАМ.Тариф,
	//                         |	ВТ_ПОВИДАМ.Номенклатура,
	//                         |	ВТ_ПОВИДАМ.КоличествоПлан,
	//                         |	ВТ_ПОВИДАМ.ПредметТарифа
	//                         |ИЗ
	//                         |	ВТ_ПОВИДАМ КАК ВТ_ПОВИДАМ
	//						 |
	//                         |ОБЪЕДИНИТЬ ВСЕ
	//						 |
	//						 |ВЫБРАТЬ
	//						 |	&Сотрудник КАК Сотрудник,
	//                         |	ВТ_ПООПЕРАЦИЯМ.Тариф КАК Тариф,
	//                         |	ВТ_ПООПЕРАЦИЯМ.Номенклатура КАК Номенклатура,
	//                         |	ВТ_ПООПЕРАЦИЯМ.Количество КАК Количество,
	//                         |	ВТ_ПООПЕРАЦИЯМ.ПредметТарифа КАК РазрезНачисления
	//                         |ИЗ
	//                         |	ВТ_ПООПЕРАЦИЯМ КАК ВТ_ПООПЕРАЦИЯМ
	//                         |
	//						 |ОБЪЕДИНИТЬ ВСЕ
	//						 |
	//                         |ВЫБРАТЬ
	//						 |	&Сотрудник КАК Сотрудник,
	//                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.Тариф,
	//                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.Номенклатура,
	//                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.Количество,
	//                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.ПредметТарифа
	//                         |ИЗ
	//                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ КАК ВТ_ПОВИДАМ_ОПЕРАЦИИ
	//						 |");
	//   Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	//   Запрос.УстановитьПараметр("НаДату",КонецДня(Объект.Дата));
	//   Запрос.УстановитьПараметр("Сотрудник",ВыбранныйСотрудник);
	//   Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	//   Выборка = Запрос.Выполнить().Выбрать();
	//   Пока Выборка.Следующий() Цикл
	//	    НоваяСтрока = Объект.Сотрудники.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//		НоваяСтрока.Сумма = Выборка.Тариф * Выборка.Количество;
	//   КонецЦикла;
	   
КонецПроцедуры


&НаКлиенте
 Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МассивСотрудников = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник",ВыбранноеЗначение));
	Для Каждого СтрокаСотр из МассивСотрудников Цикл
		 Объект.Сотрудники.Удалить(СтрокаСотр);
	КонецЦикла;
	 
	ЗаполнитьТаблицуТарифовПоСотруднику(ВыбранноеЗначение);
 КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьБрак(Команда)
	Если Не Модифицированность Тогда
		 КомандаПереместитьБракФрагмент();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаПереместитьБракЗавершение", ЭтотОбъект), "Сначала необходимо записать изменения в документе. Записать?",РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Процедура КомандаПереместитьБракФрагмент()
	Если ВОтчетеПроизводстваЕстьБрак() Тогда 
		ФормаПеремещения = ПолучитьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта");		
		ДанныеФормы = ФормаПеремещения.Объект;
		ЗаполнитьДокументПермемещениеТоваров(ДанныеФормы, ЛОЖЬ, ИСТИНА);
		КопироватьДанныеФормы(ДанныеФормы, ФормаПеремещения.Объект);
		ФормаПеремещения.Открыть();
	Иначе
		ПоказатьПредупреждение(,"В этом документе нет брака!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПермемещениеТоваров(ФормаПеремещенияОбъект, ОтборГотовойПродукции = ИСТИНА, ОтборБрака=ЛОЖЬ)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ФормаОбъект = ДанныеФормыВЗначение(ФормаПеремещенияОбъект, Тип("ДокументОбъект.ПеремещениеТоваров"));
	ФормаОбъект.Организация      = Объект.Организация;
	ФормаОбъект.Подразделение    = Объект.Подразделение;
	ФормаОбъект.СкладОтправитель = Объект.Склад;
	ФормаОбъект.СкладПолучатель  = ПолучитьСкладБракаПоУмолчанию();
	ФормаОбъект.Комментарий = "Перемещение брака на основании документа "+Объект.Ссылка;
	ФормаОбъект.Товары.Очистить();
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
		|	СУММА(вт_ОтчетПроизводстваТовары.КоличествоПлан - вт_ОтчетПроизводстваТовары.БракКолВо) КАК Количество,
		|	вт_ОтчетПроизводстваСерии.Серия КАК Серия,
		|	СУММА(вт_ОтчетПроизводстваСерии.Количество) КАК КоличествоСерии
		|ПОМЕСТИТЬ ВТ_ПРОДУКЦИЯ
		|ИЗ
		|	Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.Серии КАК вт_ОтчетПроизводстваСерии
		|		ПО вт_ОтчетПроизводстваТовары.Ссылка = вт_ОтчетПроизводстваСерии.Ссылка
		|			И вт_ОтчетПроизводстваТовары.КодСтроки = вт_ОтчетПроизводстваСерии.КлючСвязиСтроки
		|			И вт_ОтчетПроизводстваТовары.Номенклатура = вт_ОтчетПроизводстваСерии.Номенклатура
		|			И вт_ОтчетПроизводстваТовары.Характеристика = вт_ОтчетПроизводстваСерии.Характеристика
		|ГДЕ
		|	вт_ОтчетПроизводстваТовары.Ссылка = &Ссылка
		|	И вт_ОтчетПроизводстваТовары.КоличествоПлан - вт_ОтчетПроизводстваТовары.БракКолВо > 0
		|	И &ОтборГотовойПродукции = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ОтчетПроизводстваТовары.Номенклатура,
		|	вт_ОтчетПроизводстваТовары.Характеристика,
		|	вт_ОтчетПроизводстваСерии.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА вт_ОтчетПроизводстваТовары.НоменклатураБрака = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА вт_ОтчетПроизводстваТовары.Номенклатура
		|		ИНАЧЕ вт_ОтчетПроизводстваТовары.НоменклатураБрака
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА вт_ОтчетПроизводстваТовары.ХарактеристикаБрака = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА вт_ОтчетПроизводстваТовары.Характеристика
		|		ИНАЧЕ вт_ОтчетПроизводстваТовары.ХарактеристикаБрака
		|	КОНЕЦ КАК ХАрактеристика,
		|	СУММА(вт_ОтчетПроизводстваТовары.БракКолВо) КАК Количество,
		|	вт_ОтчетПроизводстваСерии.Серия КАК Серия,
		|	СУММА(вт_ОтчетПроизводстваСерии.Количество) КАК КоличествоСерии
		|ПОМЕСТИТЬ ВТ_БРАК
		|ИЗ
		|	Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.Серии КАК вт_ОтчетПроизводстваСерии
		|		ПО вт_ОтчетПроизводстваТовары.Ссылка = вт_ОтчетПроизводстваСерии.Ссылка
		|			И вт_ОтчетПроизводстваТовары.КодСтроки = вт_ОтчетПроизводстваСерии.КлючСвязиСтроки
		|			И вт_ОтчетПроизводстваТовары.Номенклатура = вт_ОтчетПроизводстваСерии.Номенклатура
		|			И вт_ОтчетПроизводстваТовары.Характеристика = вт_ОтчетПроизводстваСерии.Характеристика
		|ГДЕ
		|	вт_ОтчетПроизводстваТовары.Ссылка = &Ссылка
		|	И вт_ОтчетПроизводстваТовары.БракКолВо > 0
		|	И &ОтборБрака = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА вт_ОтчетПроизводстваТовары.НоменклатураБрака = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА вт_ОтчетПроизводстваТовары.Номенклатура
		|		ИНАЧЕ вт_ОтчетПроизводстваТовары.НоменклатураБрака
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА вт_ОтчетПроизводстваТовары.ХарактеристикаБрака = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА вт_ОтчетПроизводстваТовары.Характеристика
		|		ИНАЧЕ вт_ОтчетПроизводстваТовары.ХарактеристикаБрака
		|	КОНЕЦ,
		|	вт_ОтчетПроизводстваСерии.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_БРАК.Количество КАК Количество,
		|	ВТ_БРАК.Номенклатура КАК Номенклатура,
		|	ВТ_БРАК.ХАрактеристика КАК Характеристика,
		|	ВТ_БРАК.КоличествоСерии КАК КоличествоСерии,
		|	ВТ_БРАК.Серия КАК Серия
		|ПОМЕСТИТЬ ВТ_ВСЕ
		|ИЗ
		|	ВТ_БРАК КАК ВТ_БРАК
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ПРОДУКЦИЯ.Количество,
		|	ВТ_ПРОДУКЦИЯ.Номенклатура,
		|	ВТ_ПРОДУКЦИЯ.Характеристика,
		|	ВТ_ПРОДУКЦИЯ.КоличествоСерии,
		|	ВТ_ПРОДУКЦИЯ.Серия
		|ИЗ
		|	ВТ_ПРОДУКЦИЯ КАК ВТ_ПРОДУКЦИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_ВСЕ.Количество) КАК Количество,
		|	ВТ_ВСЕ.Номенклатура КАК Номенклатура,
		|	ВТ_ВСЕ.Характеристика КАК Характеристика,
		|	ВТ_ВСЕ.Серия КАК Серия,
		|	ВТ_ВСЕ.КоличествоСерии КАК КоличествоСерии
		|ИЗ
		|	ВТ_ВСЕ КАК ВТ_ВСЕ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВСЕ.Номенклатура,
		|	ВТ_ВСЕ.Характеристика,
		|	ВТ_ВСЕ.Серия,
		|	ВТ_ВСЕ.КоличествоСерии
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	СУММА(КоличествоСерии)
		|ПО
		|	Номенклатура,
		|	Серия";
	
	Запрос.УстановитьПараметр("ОтборБрака", ОтборБрака);
	Запрос.УстановитьПараметр("ОтборГотовойПродукции", ОтборГотовойПродукции);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		// Вставить обработку выборки ВыборкаНоменклатура
		
		НоваяСтрокаТЧТовары = ФормаОбъект.Товары.Добавить();
		НоваяСтрокаТЧТовары.Номенклатура   = ВыборкаНоменклатура.Номенклатура; 
		НоваяСтрокаТЧТовары.Характеристика = ВыборкаНоменклатура.Характеристика;
		НоваяСтрокаТЧТовары.Количество	   = ВыборкаНоменклатура.Количество;
		НоваяСтрокаТЧТовары.КоличествоУпаковок = ВыборкаНоменклатура.Количество;
		//			НоваяСтрокаТЧТовары.Серия		   = ?(ЗначениеЗаполнено(СтрокаТовар.Серия), Справочники.СерииНоменклатуры.ПустаяСсылка(), СтрокаТовар.Серия);
		//			НоваяСтрокаТЧТовары.СтатусУказанияСерийОтправитель = ?(ЗначениеЗаполнено(СтрокаТовар.СтатусУказанияСерий), 0, СтрокаТовар.СтатусУказанияСерий);
		
		ВыборкаСерия = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСерия.Следующий() Цикл
			// Вставить обработку выборки ВыборкаСерия
	       НоваяСтрокаСерии = ФормаОбъект.Серии.Добавить();
		   НоваяСтрокаСерии.Серия  		   = ВыборкаСерия.Серия; 
		   НоваяСтрокаСерии.Количество	   = ВыборкаСерия.КоличествоСерии;	
		   НоваяСтрокаСерии.Номенклатура   = НоваяСтрокаТЧТовары.Номенклатура;
		   НоваяСтрокаСерии.Характеристика = НоваяСтрокаТЧТовары.Характеристика;
		КонецЦикла;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
	ЗначениеВДанныеФормы(ФормаОбъект, ФормаПеремещенияОбъект);	
КонецПроцедуры	
	
&НаКлиенте
Процедура КомандаПереместитьБракЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			КомандаПереместитьГотовуюПродукцию();
		Исключение
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьГотовуюПродукцию()
	ФормаПеремещения = ПолучитьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта");		
	ДанныеФормы = ФормаПеремещения.Объект;
	ЗаполнитьДокументПермемещениеТоваров(ДанныеФормы, ИСТИНА, ЛОЖЬ);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПеремещения.Объект);
	ФормаПеремещения.Открыть();
КонецПроцедуры


&НаСервере
Функция ВОтчетеПроизводстваЕстьБрак()
	ЕстьБрак = Ложь;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаТовар Из ДокОбъект.Товары Цикл
		Если СтрокаТовар.БракКолВо<>0 Тогда 
			ЕстьБрак = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьБрак;
КонецФункции

 &Насервере
Функция ПолучитьСкладБракаПоУмолчанию()
	Возврат КонстантыСервер.ПолучитьЗначениеКонстанты("вт_СкладБрака");
КонецФункции	


&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);     
КонецПроцедуры


// Функция определяет, какую форму для указания серий нужно открыть (регистрации или подбора),
// подготавливает параметры (в т.ч. помещает нужные данные во временное хранилище) для ее открытия и возвращает их.
//
// Параметры:
//	Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа;
//	ПараметрыУказанияСерий		 - Структура			 - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий;
//	ТекущиеДанныеИдентификатор	 - Число				 - идентификатор текущей строки товаров в форме документа;
//	Форма						 - УправляемаяФорма		 - форма, из которой инициировано указание серий;
//	Метаданные					 - ОбъектМетаданных 	 - метаданные объекта, для которого помещаются серии в хранилище, значение по умолчанию - Неопределено.
//															Если параметр не указан - метаданные извлекаются из ссылки (Объект.Ссылка);
//	ЗаголовокКолонкиКоличество	 - Строка				 - заголовок колонки с количеством в открываемой форме указания серий, значение по умолчанию - "".
//															Если заголовок не передан, то колонка будет называться в форме "Количество".
//
// Возвращаемое значение:
//	Структура - структура с именем и параметрами формы указания серий:
// - Основные поля
//		* ИмяФормы - Строка - имя формы, которую нужно отрыть. Это или форма регистрации или формы подбора серий. Зависит от ПараметрыУказанияСерий
//		* АдресВоВременномХранилище - Строка - адрес во временном хранилище отобранных строк серий.
//												Если вызывается форма подбора серий - то во временном хранилище лежит структура(ТаблицаТоваров, ТаблицаСерий).
//												ТаблицаСерий - это ТЧ Серии, ТаблицаТоваров - сгруппированная по полям связи таблица товаров;
//		* РегистрироватьСерии - Булево - нужно ли согласно ПараметрыУказанияСерий давать возможность регистрировать серии (или только подбирать из имеющихся);
//		* ТолькоПросмотр - Булево, Истина - поле формы доступно только для просмотра;
//		* Количество - Число - количество товаров по срокам, для которых указываются серии. Имеет смысл, для формы регистрации серии, т.к. форма подбора открывается для всей ТЧ Товары;
//		* СерииВТЧТовары - Булево - признак, что серии указываются в той же ТЧ, что и товары;
//		* Регистратор - ДокументСсылка - имеет смысл для формы подбора серий. В этой форме отображаются остатки, при этом при отображении сторнируется
//										 изменение остатков текущим документом;
//		* ПараметрыУказанияСерий - Структура - значение параметра ПараметрыУказанияСерий данной функции для передачи в форму указания серий;
//		* ЗначенияПолейДляОпределенияРаспоряжения - Структура - имеет смысл для формы подбора серий, в которой показываются остатки. Для запроса остатков нужны
//													параметры. Возвращается функцией см. НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения.
// - Значения полей текущей строки или объекта, если в строке нет таких полей:
//		* Номенклатура - СправочникСсылка.Номенклатура - номенклатура;
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры;
//		* СтатусУказанияСерий - Число - статус указания серий;
//		* ХарактеристикиИспользуются - Булево, Истина - признак использования характеристик номенклатуры;
//		* Значения полей связи из ПараметрыУказанияСерий.ПоляСвязи;
//		* Склад - СправочникСсылка.Склады - склад;
//		* Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение;
//		* УпаковкаДляПодстановки - СправочникСсылка.УпаковкиЕдиницыИзмерения, Неопределено - упаковка, в которой нужно выводить количество в форме регистрации серий.
//								Если в ТЧ "Товары" для всех строк товара одна упаковка и упаковка не входит в поля связи - передается это значение, если упаковки
//								разные - то Неопределено.
//
&НаСервере
Функция НС_ПараметрыФормыУказанияСерий(Объект,ПараметрыУказанияСерий,ТекущиеДанныеИдентификатор,Форма, Метаданные = Неопределено, ЗаголовокКолонкиКоличество = "") Экспорт
	МетаданныеДокумента = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	// Если нужно будет изменять количество, то данные формы нужно заблокировать
	// Если заблокировать не удастся - вылетит исключение.
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр
		И ПараметрыУказанияСерий.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	ТекстВыбораТоваров = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстВыбораТоваров = ТекстВыбораТоваров + "
		|	ТаблицаТоваров."  + СтрМас + ", ";
		
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ТекущиеДанные = Объект;
	Иначе
		ТекущиеДанные = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	КонецЕсли;

	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	ЕстьДействие = ПараметрыУказанияСерий.ПоляСвязи.Найти("Действие") <> Неопределено;
	УпаковкаДляПодстановки = Неопределено;
	ИдетОбработкаТоварныхМест = Ложь;
	Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста Тогда
		ИдетОбработкаТоварныхМест = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Упаковка, "ТипУпаковки")
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
	КонецЕсли;
	
	Если ЕстьДействие Тогда
		РегистрироватьСерии = ?(ТекущиеДанные.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать, Ложь, Истина);
	Иначе
		РегистрироватьСерии = ПараметрыУказанияСерий.РегистрироватьСерии;
	КонецЕсли;
	
	Если РегистрироватьСерии Тогда
		НомераСтрокДокумента = "";
		
		Если ЕстьУпаковки
			И ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда //не заполнена для тары
			ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(ТекущиеДанные.Упаковка, ТекущиеДанные.Номенклатура);
			КоэффициентУпаковки      = ДанныеУпаковки.Коэффициент; 
			НужноОкруглятьКоличество = ДанныеУпаковки.НужноОкруглятьКоличество;
		Иначе
			КоэффициентУпаковки = 1;
			НужноОкруглятьКоличество = Ложь;
		КонецЕсли;
		
		Упаковки = Новый Массив();
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			ЕстьУпаковкиВТЧТовары = Ложь;
			Если Объект.Свойство("Упаковка") Тогда
				Упаковки.Добавить(Объект.Упаковка);
			КонецЕсли;
		Иначе
			КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(Новый Массив);
			ЕстьУпаковкиВТЧТовары = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
		КонецЕсли;
		
		КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(Новый Массив);
		ЕстьУпаковкиВТЧСерии = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
		
		Если ЕстьУпаковкиВТЧТовары Тогда
			УпаковкиТЧТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧТовары);
		КонецЕсли;
		Если ЕстьУпаковкиВТЧСерии Тогда
			УпаковкиТЧСерии = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧСерии);
		КонецЕсли;
		
		Упаковки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Упаковки);
		ТипыУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Упаковки, "ТипУпаковки");
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			КоличествоВДокументе = Объект[ПараметрыУказанияСерий.ИмяПоляКоличество]*КоэффициентУпаковки;
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		Иначе			
			Если ПараметрыУказанияСерий.ИмяТЧТовары = "вт_БракДробленка" Тогда			
				СтруктураПоиска = Новый Структура("Дробленка,Характеристика"+ТекстПоляСвязи);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);				
				ТекстПоляСвязиУпаковка = ?(ЕстьУпаковкиВТЧТовары И Не ЕстьУпаковки, ", Упаковка", "");				
				ВыгружаемыеПоля = "Дробленка,Характеристика" + ТекстПоляСвязи + ТекстПоляСвязиУпаковка;	
			Иначе	
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);				
				ТекстПоляСвязиУпаковка = ?(ЕстьУпаковкиВТЧТовары И Не ЕстьУпаковки, ", Упаковка", "");					
				ВыгружаемыеПоля = "Номенклатура,Характеристика" + ТекстПоляСвязи + ТекстПоляСвязиУпаковка;
			КонецЕсли;
			ТаблицаТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(, ВыгружаемыеПоля + ", " + ПараметрыУказанияСерий.ИмяПоляКоличество);
			ТаблицаТовары.Свернуть(ВыгружаемыеПоля, ПараметрыУказанияСерий.ИмяПоляКоличество);
			
			НайденныеСтрокиТоваровСгруппированные = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
			
			КоличествоВДокументе = 0;
			МинимальноеКоличествоЦелыхНаборов = 0;
			Для Каждого СтрМас Из НайденныеСтрокиТоваровСгруппированные Цикл
				
				Если ЕстьУпаковкиВТЧТовары Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - товарным местом,
					// то нужно исключать из алгоритма строки с другими типами упаковок. И наоборот.
					Если ИдетОбработкаТоварныхМест
						И Не ТоварныеМестаВСтроке Тогда
						Продолжить;
					ИначеЕсли Не ИдетОбработкаТоварныхМест
						И ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
				
					// Расчитаем упаковку, в которой нужно отображать количество в форме редактирования упаковок
					// Если для всех строк указана одна упаковка - то в ней и будем отображать количество
					// Если упаковка входит в поля связи, то она и будет единственной для всех строк.
					Если УпаковкаДляПодстановки = Неопределено Тогда
						УпаковкаДляПодстановки = СтрМас.Упаковка;
					ИначеЕсли УпаковкаДляПодстановки <> СтрМас.Упаковка Тогда
						УпаковкаДляПодстановки = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;
					
				КонецЕсли;
				
				Если НужноОкруглятьКоличество Тогда
					СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество] = Окр(СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество], 0, РежимОкругления.Окр15как20);
				КонецЕсли;
				
				Если ИдетОбработкаТоварныхМест Тогда
					// Количество упаковок, из которых состоит одна штука товара
					КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрМас.Упаковка, "КоличествоУпаковок");
					
					КоличествоЦелыхНаборов = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
					
					МинимальноеКоличествоЦелыхНаборов = ?(МинимальноеКоличествоЦелыхНаборов = 0,
															КоличествоЦелыхНаборов,
															Мин(КоличествоЦелыхНаборов, МинимальноеКоличествоЦелыхНаборов));
															
					КоличествоВДокументе = МинимальноеКоличествоЦелыхНаборов;
				Иначе
					КоличествоВДокументе = КоличествоВДокументе + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество]*КоэффициентУпаковки;
				КонецЕсли;
				
			КонецЦикла;
			
			НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				Если ЕстьУпаковкиВТЧТовары Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - товарным местом,
					// то нужно исключать из алгоритма строки с другими типами упаковок. И наоборот.
					Если ИдетОбработкаТоварныхМест
						И Не ТоварныеМестаВСтроке Тогда
						Продолжить;
					ИначеЕсли Не ИдетОбработкаТоварныхМест
						И ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НомераСтрокДокумента = НомераСтрокДокумента + Строка(СтрМас.НомерСтроки) + ", ";
			КонецЦикла;
			
			Если Не ПустаяСтрока(НомераСтрокДокумента) Тогда
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаСерий = Новый ТаблицаЗначений;
		ТаблицаСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаСерий.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		//++13.06.2019
		СтруктураПоиска = ЗаменитьВСтруктуреПоискаКодСтрокиНаКлючСвязиСтроки(СтруктураПоиска);	
		//--13.06.2019
		//++18.06.2019
		СтруктураПоиска = ЗаменитьВструктуреПоискаДробленкуНаНоменклатуру(СтруктураПоиска);
		//--18.06.2019
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Если ИдетОбработкаТоварныхМест Тогда
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если ЕстьУпаковкиВТЧСерии Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - товарным местом,
					// то нужно исключать из алгоритма строки с другими типами упаковок.
					Если Не ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// При использовании товарных мест, необходимо получить свернутую таблицу с количеством приведенным
				// к максимуму - для правильного использования в последующем алгоритме распределения в методе ОбработатьУказаниеСерий.
				СтрокаСерий = ТаблицаСерий.Найти(СтрМас.Серия, "Серия");
				Если СтрокаСерий <> Неопределено Тогда
					
					СтрокаСерий.Количество = Макс(СтрокаСерий.Количество, СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество]);
					СтрокаСерий.КоличествоУпаковок = СтрокаСерий.Количество;
					
				Иначе
					
					НоваяСтрока = ТаблицаСерий.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
					
					// Сделано неуниверсально. Если упаковки есть в полях связи, то поля с количеством во всех документах называются стандартно.
					Если Не ЕстьУпаковки Тогда
						НоваяСтрока.Количество = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
					И ЕстьУпаковкиВТЧСерии Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - не товарным местом,
					// то нужно исключать из алгоритма строки с типом упаковки "товарное место".
					Если ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаСерий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
				
				// Сделано неуниверсально. Если упаковки есть в полях связи, то поля с количеством во всех документах называются стандартно.
				Если Не ЕстьУпаковки Тогда
					НоваяСтрока.Количество = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСерий,УникальныйИдентификаторФормы);
		
	Иначе
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		Если НЕ ЕстьУпаковки Тогда
			ТаблицаТоваров.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		КонецЕсли;
		ТаблицаТоваров.Колонки.Добавить("НомераСтрокДокумента",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
		
		НоменклатураСервер.ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, Метаданные); 
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			СтрокаТовара = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
			Если ПараметрыУказанияСерий.ЭтоЗаказ
				И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено
				И Объект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				// В шапке заказов при смене варианта обеспечения не очищается назначение,
				//	поэтому для необособленной отгрузки сбросим назначение здесь.
				СтрокаТовара.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
			|	ТаблицаТоваров.НомерСтроки
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.СтатусУказанияСерий В(&ОтборПоСтатусам)
			|	И &УсловиеПоДействию
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|		ТаблицаТоваров.Характеристика КАК Характеристика,
			|		МИНИМУМ(ТаблицаТоваров.Количество) КАК Количество,
			|		МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки
			|	ИЗ
			|		ТаблицаТоваров КАК ТаблицаТоваров
			|	ГДЕ
			|		ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Количество
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Количество,
			|		ТаблицаТоваров.НомерСтроки
			|	ИЗ
			|		ТаблицаТоваров КАК ТаблицаТоваров
			|	ГДЕ
			|		ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)) КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.ТекстВыбораТоваров,", ТекстВыбораТоваров); 
			
			Если Не ЕстьУпаковки Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.Упаковка,", ""); 
			КонецЕсли;
			
			Если ЕстьДействие Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
											"&УсловиеПоДействию",
											"ТаблицаТоваров.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)");
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДействию", "ИСТИНА");
			КонецЕсли;		
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			Если ПараметрыУказанияСерий.НужноОкруглятьКоличество
				И СтрНайти(ПараметрыУказанияСерий.ИмяПоляКоличество, "КоличествоУпаковок") = 0 Тогда
				
				Если ПараметрыУказанияСерий.ТоварВШапке Тогда
					ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Объект.Упаковка, Объект.Номенклатура);
					Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
						Объект[ПараметрыУказанияСерий.ИмяПоляКоличество] = Окр(Объект[ПараметрыУказанияСерий.ИмяПоляКоличество], 0, РежимОкругления.Окр15как20);
					КонецЕсли;
				Иначе
					ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
					ПараметрыОкругления.ИмяТЧ = ПараметрыУказанияСерий.ИмяТЧТовары;
					
					ДлинаИмяПоляКоличество = СтрДлина(ПараметрыУказанияСерий.ИмяПоляКоличество);
					
					Если ДлинаИмяПоляКоличество > 10 Тогда
						ПараметрыОкругления.СуффиксДопРеквизита = Прав(ПараметрыУказанияСерий.ИмяПоляКоличество, ДлинаИмяПоляКоличество - 10);
					КонецЕсли;
					
					ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(Объект, Неопределено, ПараметрыОкругления);
				КонецЕсли;
				
			КонецЕсли;
			
			ТЧ = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить();
			
			Запрос.УстановитьПараметр("ТаблицаТоваров",ТЧ);

			ОтборПоСтатусамУказанияСерий = Новый Массив;
			ОтборПоСтатусамУказанияСерий.Добавить(3);
			ОтборПоСтатусамУказанияСерий.Добавить(23);
			ОтборПоСтатусамУказанияСерий.Добавить(4);
			ОтборПоСтатусамУказанияСерий.Добавить(5);
			ОтборПоСтатусамУказанияСерий.Добавить(25);
			ОтборПоСтатусамУказанияСерий.Добавить(6);
			ОтборПоСтатусамУказанияСерий.Добавить(7);
			ОтборПоСтатусамУказанияСерий.Добавить(27);
			ОтборПоСтатусамУказанияСерий.Добавить(8);
			Если ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии
				ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
				ОтборПоСтатусамУказанияСерий.Добавить(9);
				ОтборПоСтатусамУказанияСерий.Добавить(10);
				ОтборПоСтатусамУказанияСерий.Добавить(11);
			КонецЕсли;
			Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
				ОтборПоСтатусамУказанияСерий.Добавить(13);
				ОтборПоСтатусамУказанияСерий.Добавить(14);
				ОтборПоСтатусамУказанияСерий.Добавить(15);
				ОтборПоСтатусамУказанияСерий.Добавить(17);
				ОтборПоСтатусамУказанияСерий.Добавить(18);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ОтборПоСтатусам", ОтборПоСтатусамУказанияСерий);
			
			ПоляГруппировки = "Номенклатура,Характеристика" + ТекстПоляСвязи;
			
			ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДляСортировки",
				Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
			
			Количество               = 0;
			НомераСтрокДокумента     = "";
			НомерСтрокиДляСортировки = 0;
			
			НоваяСтрокаТоваров = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущаяГруппировка, Выборка, ПоляГруппировки) Тогда
					
					Если НоваяСтрокаТоваров <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
						НоваяСтрокаТоваров.Количество = Количество;
						
						НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
						НоваяСтрокаТоваров.НомераСтрокДокумента     = НомераСтрокДокумента;
						НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ТекущаяГруппировка,Выборка);
					НоваяСтрокаТоваров       = ТаблицаТоваров.Добавить();
					НомерСтрокиДляСортировки = Выборка.НомерСтроки;
					Количество           = 0;
					НомераСтрокДокумента = "";
					
				КонецЕсли;
				
				Количество           = Количество + Выборка.Количество;
				НомераСтрокДокумента = НомераСтрокДокумента + Выборка.НомерСтроки + ", ";
				
			КонецЦикла;
			
			Если НоваяСтрокаТоваров <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
				НоваяСтрокаТоваров.Количество = Количество;
				
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
				НоваяСтрокаТоваров.НомераСтрокДокумента = НомераСтрокДокумента;
				НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
			КонецЕсли;
			
			ТаблицаТоваров.Сортировать("НомерСтрокиДляСортировки");
			ТаблицаТоваров.Колонки.Удалить("НомерСтрокиДляСортировки");
			
		КонецЕсли;
		СтруктураДляВременногоХранилища = Новый Структура;
		СтруктураДляВременногоХранилища.Вставить("ТаблицаТоваров",ТаблицаТоваров);
		
		ТаблицаСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(); 
		
		Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТоваров.НомерСтроки,
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
			|	ТаблицаТоваров.Количество
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	Упаковки.Ссылка КАК Упаковка
			|ПОМЕСТИТЬ УпаковкиТоваровПоТоварнымМестам
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
			|	ПО ТаблицаТоваров.Номенклатура.НаборУпаковок = Упаковки.Владелец
			|		И Упаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
			|ГДЕ
			|	НЕ Упаковки.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	Упаковки.Ссылка
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
			|	ПО ТаблицаТоваров.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
			|		И ТаблицаТоваров.Номенклатура = Упаковки.Владелец
			|		И Упаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
			|ГДЕ
			|	НЕ Упаковки.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.Серия
			|ПОМЕСТИТЬ ПервыеНомераСтрокТоваровПоТоварнымМестам
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	ТаблицаТоваров.Упаковка,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество
			|ПОМЕСТИТЬ ПолныеНаборыТоваровПоТоварнымМестам
			|ИЗ
			|	(ВЫБРАТЬ
			|		Упаковки.ТекстВыбораТоваров,
			|		Упаковки.Номенклатура,
			|		Упаковки.Характеристика,
			|		Упаковки.Серия,
			|		Упаковки.Упаковка,
			|		ЕСТЬNULL(ТаблицаТоваров.Количество, 0) КАК Количество
			|	ИЗ
			|		УпаковкиТоваровПоТоварнымМестам КАК Упаковки
			|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|			ПО Упаковки.Номенклатура = ТаблицаТоваров.Номенклатура
			|				И Упаковки.Характеристика = ТаблицаТоваров.Характеристика
			|				И Упаковки.Серия = ТаблицаТоваров.Серия
			|				И Упаковки.Упаковка = ТаблицаТоваров.Упаковка
			|				&УсловиеСоединения) КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	ТаблицаТоваров.Упаковка
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТаблицаТоваров.Количество) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.Серия,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(Упаковки.НомерСтроки) КАК НомерСтроки,
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Упаковка,
			|		ТаблицаТоваров.Серия,
			|		МИНИМУМ(ТаблицаТоваров.Количество) КАК Количество
			|	ИЗ
			|		ПолныеНаборыТоваровПоТоварнымМестам КАК ТаблицаТоваров
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПервыеНомераСтрокТоваровПоТоварнымМестам КАК Упаковки
			|			ПО ТаблицаТоваров.Номенклатура = Упаковки.Номенклатура
			|				И ТаблицаТоваров.Номенклатура = Упаковки.Номенклатура
			|				И ТаблицаТоваров.Характеристика = Упаковки.Характеристика
			|				И ТаблицаТоваров.Серия = Упаковки.Серия
			|				&УсловиеСоединения
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Упаковка,
			|		ТаблицаТоваров.Серия
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаТоваров.НомерСтроки,
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Упаковка,
			|		ТаблицаТоваров.Серия,
			|		ТаблицаТоваров.Количество
			|	ИЗ
			|		ТаблицаТоваров КАК ТаблицаТоваров
			|	ГДЕ
			|		ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)) КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.НомерСтроки,
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Упаковка";
			
			ТекстУсловияСоединенияТаблиц = "";
			ТекстВыбораТоваров= СтрЗаменить(ТекстВыбораТоваров, "ТаблицаТоваров.Упаковка,", "");
			ТекстВыбораУпаковок = СтрЗаменить(ТекстВыбораТоваров, "ТаблицаТоваров", "Упаковки");
			
			Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
				
				Если СтрНайти(ТекстВыбораТоваров, ПолеСвязи) = 0
					Или ПолеСвязи = "Упаковка" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ТекстУсловияСоединенияТаблиц = ТекстУсловияСоединенияТаблиц + "
					|	И Упаковки." + ПолеСвязи + " = ТаблицаТоваров." + ПолеСвязи;
				
			КонецЦикла;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.ТекстВыбораТоваров,", ТекстВыбораТоваров);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Упаковки.ТекстВыбораТоваров,", ТекстВыбораУпаковок);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединения", ТекстУсловияСоединенияТаблиц);
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаСерий);
			ТаблицаСерий = Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			СтрокиСерийКУдалению = ТаблицаСерий.НайтиСтроки(Новый Структура("Серия",Справочники.СерииНоменклатуры.ПустаяСсылка()));
			
			Для Каждого СтрМас Из СтрокиСерийКУдалению Цикл
				ТаблицаСерий.Удалить(СтрМас);
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураДляВременногоХранилища.Вставить("ТаблицаСерий",ТаблицаСерий);
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДляВременногоХранилища,УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = Новый Структура("Номенклатура,Характеристика,СтатусУказанияСерий,ХарактеристикиИспользуются"+ТекстПоляСвязи);
	ПараметрыФормыУказанияСерий.Вставить("НомераСтрокДокумента", НомераСтрокДокумента); 
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,Объект);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,ТекущиеДанные);
		//++18.06.2019
		Если ПараметрыУказанияСерий.ИмяТЧТовары = "вт_БракДробленка" Тогда
			ПараметрыФормыУказанияСерий.Номенклатура = ТекущиеДанные.Дробленка;
		КонецЕсли;	
		//--18.06.2019
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Склад", Неопределено);
	ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Склад", ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляСклад]);
	Иначе
		ПараметрыФормыУказанияСерий.Вставить("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Помещение") <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Помещение", ТекущиеДанные.Помещение);
	ИначеЕсли ПараметрыУказанияСерий.ИмяПоляПомещение = Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Помещение", Справочники.СкладскиеПомещения.ПустаяСсылка());
	Иначе
		ПараметрыФормыУказанияСерий.Вставить("Помещение", Объект[ПараметрыУказанияСерий.ИмяПоляПомещение]);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("УпаковкаДляПодстановки",УпаковкаДляПодстановки);
	ПараметрыФормыУказанияСерий.Вставить("ИдетОбработкаТоварныхМест", ИдетОбработкаТоварныхМест);
	
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("РегистрироватьСерии", РегистрироватьСерии);
	ПараметрыФормыУказанияСерий.Вставить("ТолькоПросмотр", ПараметрыУказанияСерий.ТолькоПросмотр);
	ПараметрыФормыУказанияСерий.Вставить("ТолькоРедактированиеКоличества", Ложь);
	ПараметрыФормыУказанияСерий.Вставить("Количество",КоличествоВДокументе);
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("СерииВТЧТовары", ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары);
	Если Объект.Свойство("Ссылка") Тогда
		ПараметрыФормыУказанияСерий.Вставить("Регистратор",Объект.Ссылка);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ПараметрыУказанияСерий",ПараметрыУказанияСерий);
	
	ЗначенияПолейДляОпределенияРаспоряжения = НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения(Объект,
																							  ТекущиеДанные,
																							  ПараметрыУказанияСерий);

	ПараметрыФормыУказанияСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", ЗначенияПолейДляОпределенияРаспоряжения);
	
	Если РегистрироватьСерии Тогда
		мИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.РегистрацияИПодборСерийПоОднойСтрокеТоваров";
	Иначе
		мИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ПодборСерийПоОстаткамДляВсехСтрокТоваров";
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("ИмяФормы", мИмяФормы);
	
	Если ЗначениеЗаполнено(ЗаголовокКолонкиКоличество) Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗаголовокКолонкиКоличество", ЗаголовокКолонкиКоличество);
	КонецЕсли;
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

&НаСервере
Функция ЗаменитьВСтруктуреПоискаНоменклатуруНаДробленку(СтруктураПоиска)
	Если СтруктураПоиска.Свойство("Номенклатура") Тогда
		СтруктураПоиска.Вставить("Дробленка",СтруктураПоиска.Номенклатура);
		СтруктураПоиска.Удалить("Номенклатура");
	КонецЕсли;	
	Возврат СтруктураПоиска;
КонецФункции

&НаСервере
Функция ЗаменитьВСтруктуреПоискаДробленкуНаНоменклатуру(СтруктураПоиска)
	Если СтруктураПоиска.Свойство("Дробленка") Тогда
		СтруктураПоиска.Вставить("Номенклатура",СтруктураПоиска.Дробленка);
		СтруктураПоиска.Удалить("Дробленка");
	КонецЕсли;	
	Возврат СтруктураПоиска;
КонецФункции


&НаСервере
Функция ЗаменитьВСтруктуреПоискаКодСтрокиНаКлючСвязиСтроки(СтруктураПоиска)
	Если СтруктураПоиска.Свойство("КодСтроки") Тогда
		СтруктураПоиска.Вставить("КлючСвязиСтроки",СтруктураПоиска.КодСтроки);
		СтруктураПоиска.Удалить("КодСтроки");			
	КонецЕсли;	
	Возврат СтруктураПоиска;
КонецФункции	

&НаСервере
Функция ЗаменитьВСтруктуреПоискаКлючСвязиСтрокиНаКодСтроки(СтруктураПоиска)
	Если СтруктураПоиска.Свойство("КлючСвязиСтроки") Тогда
		СтруктураПоиска.Вставить("КодСтроки",СтруктураПоиска.КлючСвязиСтроки);
		СтруктураПоиска.Удалить("КлючСвязиСтроки");			
	КонецЕсли;	
	Возврат СтруктураПоиска;
КонецФункции	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьСырьеПоОбъемуГотовойНаСервере(КлючСвязиСтроки, МассивНоменклатур, ТребуетсяРаспределить)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                      |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	                      |	ТоварыНаСкладахОстатки.Серия КАК Серия,
	                      |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                      |			,
	                      |			Склад = &Склад
	                      |				И Номенклатура В (&МассивНоменклатур)) КАК ТоварыНаСкладахОстатки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Серия,
	                      |	ВНаличииОстаток
	                      |ИТОГИ
	                      |	СУММА(ВНаличииОстаток)
	                      |ПО
	                      |	Номенклатура,
	                      |	Характеристика,
	                      |	Серия");
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("МассивНоменклатур",МассивНоменклатур);
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		СтрокаСырье = Объект.вт_ПроизводствоСырье.Добавить();
		СтрокаСырье.Номенклатура = ВыборкаПоНоменклатуре.Номенклатура;
		СтрокаСырье.КлючСвязиСтроки = КлючСвязиСтроки;
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			СтрокаСырье.Характеристика = ВыборкаПоНоменклатуре.Характеристика;
			//сколько берем и сколько можем взять сырья
			КоличествоСписать = ?(ТребуетсяРаспределить>ВыборкаПоХарактеристикам.ВНаличииОстаток, ВыборкаПоХарактеристикам.ВНаличииОстаток, ТребуетсяРаспределить);
			
			СтрокаСырье.Количество = КоличествоСписать; //Столько списываем этого сырья
			
			ТребуетсяРаспределить = ТребуетсяРаспределить - КоличествоСписать;
			
			ВыбокраПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыбокраПоСериям.Следующий() Цикл
				Выборка = ВыбокраПоСериям.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					КоличествоСписатьСерий = ?(Выборка.ВНаличииОстаток > КоличествоСписать,
										  КоличествоСписать,	Выборка.ВНаличииОстаток);
					
					СтрокаСерия = Объект.Серии.Добавить();
					СтрокаСерия.Серия = Выборка.Серия;
					СтрокаСерия.Количество = КоличествоСписатьСерий;
					СтрокаСерия.Номенклатура = Выборка.Номенклатура;
					СтрокаСерия.Характеристика = Выборка.Характеристика;
					СтрокаСерия.Склад = Объект.Склад;
					СтрокаСерия.КлючСвязиСтроки = КлючСвязиСтроки;
					
				КонецЦикла;			 
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСырьеПоОбъемуГотовой(Команда)
	
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Дата", ТекущаяДата());
	ПараметрыФормы.Вставить("Документ", Объект.Организация);
	ПараметрыФормы.Вставить("Валюта", ПолучитьВалютуРеглУчета());
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Сотрудники.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Тариф;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиТарифПриИзменении(Элемент)
	ТекДанные = Элементы.Сотрудники.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Тариф;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.Сотрудники.ТекущиеДанные;
	ТекДанные.Тариф = ТекДанные.Сумма / ТекДанные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесДеталиФактПриИзменении(Элемент)
	ПересчитатьВесОбщийКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВесьДетали()
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	пВесДетали = ЗначениеРеквизита(ТекДанные.ВариантПроизводства,"ВесДетали");
	
	ТекДанные.ВесДетали = пВесДетали;
	
	Если ТекДанные.ВесДеталиФакт=0 ТОгда
		ТекДанные.ВесДеталиФакт = пВесДетали;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьВесОбщийКлиент()
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	ТекДанные.ВесОбщий = ?(ТекДанные.ВесДеталиФакт>0,ТекДанные.ВесДеталиФакт,ТекДанные.ВесДетали) * ТекДанные.КоличествоПлан;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПечатьСоставИнгредиентов(Команда)
	
	ТабДок = ПечатьСоставИнгредиентовНаСервере();
	
	ОбластиОбъектов = Неопределено;
    
    ИдентификаторПечатнойФормы = "ПФ_ПотребностьВСырье";
    
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
    ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
    ПечатнаяФорма.СинонимМакета = НСтр("ru = 'ОтчетПроизводстваПроизводства_ПотребностьВСырье'");
    ПечатнаяФорма.ТабличныйДокумент = ТабДок;
    ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'ОтчетПроизводстваПроизводства_ПотребностьВСырье'");
    
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);	   
		
	//ТабДок.Показать(); 
КонецПроцедуры

&НаСервере
Функция ПечатьСоставИнгредиентовНаСервере();
 ТабДок = Новый ТабличныйДокумент;
		          
    ЗапросПоДокументам = Новый Запрос;
    ЗапросПоДокументам.УстановитьПараметр("СсылкаНаОбъект", Объект.Ссылка);
    ЗапросПоДокументам.Текст =
    "ВЫБРАТЬ
    |	Документ.Ссылка КАК Ссылка,
    |	Документ.Номер КАК Номер,
    |	Документ.Дата КАК Дата,
    |	Документ.Склад КАК Склад,
    |	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
    |	Документ.Организация КАК Организация,
    |	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
    |	Документ.Контрагент КАК Контрагент,
    |	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК КонтрагентПредставление,
    |	Документ.Партнер КАК Партнер,
    |	ПРЕДСТАВЛЕНИЕ(Документ.Партнер) КАК ПартнерПредставление,
    |	Документ.ДокументОснование КАК ДокументОснование,
    |	Документ.Организация.Префикс КАК Префикс,
    |	Документ.Товары.(
    |		НомерСтроки КАК НомерСтроки,
    |		Номенклатура КАК Номенклатура,
    |		Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
    |		Характеристика.НаименованиеПолное КАК ХарактеристикаПредставление,
    |		Характеристика КАК Характеристика,
    |		ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Товары.Номенклатура.ЕдиницаИзмерения) КАК Упаковка,
    |		Количество КАК Количество,
    |		КодСтроки КАК КлючСтроки
    |	) КАК ТаблицаТовары
    |ИЗ
    |	Документ.вт_ОтчетПроизводства КАК Документ
    |ГДЕ
    |	Документ.Ссылка = &СсылкаНаОбъект
    |
    |УПОРЯДОЧИТЬ ПО
    |	НомерСтроки";
    РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
    
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПотребностьВСырье";
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_ПотребностьВСырье");
	
	ОбластьШапки     = "ШапкаТаблицы";    
	ОбластьСтроки    = "Строка1";
    	
    ПервыйДокумент = Истина;
    ВыборкаДокументы = ЗапросПоДокументам.Выполнить().Выбрать();
    Пока ВыборкаДокументы.Следующий() Цикл
    	
    	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
    	
    	Если Не ПервыйДокумент Тогда
    		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
    	КонецЕсли;
    	ПервыйДокумент = Ложь;
    	
    	// Вывод заголовка.
    	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаДокументы);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
        ОбластьМакета.Параметры.ТекстЗаголовка = ВыборкаДокументы.Ссылка;
        ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьМакета, ВыборкаДокументы.Ссылка);
		ОбластьМакета.Параметры.Клиент = ВыборкаДокументы.ПартнерПредставление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		//Если ВыборкаДокументы.ТребуемаяДата <> Дата(1,1,1) Тогда
		//	ОбластьМакета = Макет.ПолучитьОбласть("СобратьКДате");
		//	ОбластьМакета.Параметры.ТребуемаяДата = Формат(ВыборкаДокументы.ТребуемаяДата,"ДЛФ=DD"); 
		//	ТабДокумент.Вывести(ОбластьМакета);
		//КонецЕсли;
		    	    	
    	// Вывод шапки отчета.
    	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		
		ТабДокумент.Вывести(ОбластьМакета);
    	
    	// Вывод строк документа.        
        ВыборкаПоСтрокам = ВыборкаДокументы.ТаблицаТовары.Выбрать(); 
		ИтогоКоличество = 0;
		ИтогоОстаток = 0;
        Пока ВыборкаПоСтрокам.Следующий() Цикл                          
                                 		
    		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
    		ОбластьМакета.Параметры.Заполнить(ВыборкаПоСтрокам);
    		
    		ОбластьМакета.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
    			ВыборкаПоСтрокам.НоменклатураПредставление,
    			ВыборкаПоСтрокам.ХарактеристикаПредставление
    		);
			
			ТипОперацииНоменклатуры = ПолучитьТипНоменклатуры(ВыборкаПоСтрокам.Номенклатура);
			//ОбластьМакета.Параметры.ТипОперации	= ТипОперацииНоменклатуры; 
			ТекОстаток = ПолучитьОстатокНоменклатуры(ВыборкаПоСтрокам.Номенклатура,ВыборкаПоСтрокам.Характеристика,ВыборкаДокументы.Склад, ВыборкаДокументы.Дата); 
			ОбластьМакета.Параметры.Остаток	= ТекОстаток;
			ОбластьМакета.Параметры.Потребность = ?(ТекОстаток < ВыборкаПоСтрокам.Количество, ТекОстаток - ВыборкаПоСтрокам.Количество, 0); 
			ИтогоКоличество = ИтогоКоличество + ВыборкаПоСтрокам.Количество;
			ИтогоОстаток = ИтогоОстаток + ТекОстаток;
			
    		ТабДокумент.Вывести(ОбластьМакета);  
			
			//Если ТипОперацииНоменклатуры = "Комплектация" Тогда
				СоставКомплекта = ПолучитьСоставСырьяДляПроизводства(ВыборкаПоСтрокам.Номенклатура, ВыборкаПоСтрокам.КлючСтроки,ВыборкаПоСтрокам.Количество, ВыборкаДокументы.Склад, ВыборкаДокументы.Дата,ВыборкаДокументы.Ссылка);
				Для каждого Комплект Из СоставКомплекта Цикл
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
					ОбластьМакета.Параметры.НоменклатураПредставление = Комплект.Пропуск + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						Комплект.НоменклатураПредставление,
						Комплект.ХарактеристикаПредставление
					);
					ОбластьМакета.Параметры.Количество	= Комплект.Количество;
					ОбластьМакета.Параметры.Упаковка	= Комплект.ЕдИзм;

					//ОбластьМакета.Параметры.ТипОперации	= Комплект.ТипНоменклатуры; 
					ОбластьМакета.Параметры.Остаток		= Комплект.Остаток;	
					ОбластьМакета.Параметры.Потребность = ?(Комплект.Остаток < Комплект.Количество, Комплект.Остаток -  Комплект.Количество, 0); 
					ТабДокумент.Вывести(ОбластьМакета);
					ИтогоКоличество = ИтогоКоличество + Комплект.Количество;
					ИтогоОстаток = ИтогоОстаток + Комплект.Остаток;
				КонецЦикла;	
			//КонецЕсли;	
        	           
		КонецЦикла; 
		//Вывод Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итог");
		ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоОстаток = ИтогоОстаток;
        ТабДокумент.Вывести(ОбластьМакета);

    	
    	// Вывод подписей.
    	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
    	ОбластьМакета.Параметры.ОтветственныйПредставление = "/                                        /";
    	ТабДокумент.Вывести(ОбластьМакета);
    	
    	//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);
    	
    КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

&НаСервере
Функция ПолучитьОстатокНоменклатуры(Номенклатура,Характеристика,Склад,Дата)
	ОстатокНоменклатуры = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Дата,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Характеристика", Характеристика); 	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда   		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ВНаличииОстаток<>Неопределено Тогда
				ОстатокНоменклатуры = ВыборкаДетальныеЗаписи.ВНаличииОстаток;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат ОстатокНоменклатуры;
КонецФункции

&НаСервере
Функция ПолучитьТипНоменклатуры(Номенклатура)
	ТипОперацииНоменклатуры = "";
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ВариантыПроизводстваПоТехКартам.Ссылка,
		|	""Производство"" КАК ТипОперации
		|ИЗ
		|	Справочник.вт_ВариантыПроизводстваПоТехКартам КАК вт_ВариантыПроизводстваПоТехКартам
		|ГДЕ
		|	вт_ВариантыПроизводстваПоТехКартам.Владелец = &Номенклатура
		|	И НЕ вт_ВариантыПроизводстваПоТехКартам.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Ссылка,
		|	""Комплектация""
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Владелец = &Номенклатура
		|	И НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОперации";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура); 	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда     	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Ссылка<>Неопределено Тогда 
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
					ТипОперацииНоменклатуры = ВыборкаДетальныеЗаписи.ТипОперации;
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат ТипОперацииНоменклатуры;	
КонецФункции	

&НаСервере
Функция ПолучитьСоставСырьяДляПроизводства(Номенклатура,КлючНоменклатуры, КоличествоКомплекта, Склад, Дата, СсылкаДокумента)
	Пропуск = "        ";

	СоставКомплекта = Новый ТаблицаЗначений;
	СоставКомплекта.Колонки.Добавить("НоменклатураПредставление");
	СоставКомплекта.Колонки.Добавить("ХарактеристикаПредставление");
	СоставКомплекта.Колонки.Добавить("Количество");
	СоставКомплекта.Колонки.Добавить("ЕдИзм");
	СоставКомплекта.Колонки.Добавить("ТипНоменклатуры"); 
	СоставКомплекта.Колонки.Добавить("Остаток");
	СоставКомплекта.Колонки.Добавить("Пропуск");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(вт_ЗаказВПроизводствоСырье.Номенклатура) КАК НоменклатураПредставление,
	               |	ПРЕДСТАВЛЕНИЕ(вт_ЗаказВПроизводствоСырье.Характеристика) КАК ХарактеристикаПредставление,
	               |	вт_ЗаказВПроизводствоСырье.Номенклатура КАК Номенклатура,
	               |	вт_ЗаказВПроизводствоСырье.Характеристика КАК Характеристика,
	               |	вт_ЗаказВПроизводствоСырье.Количество КАК Количество,
	               |	вт_ЗаказВПроизводствоСырье.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ИЗ
	               |	Документ.вт_ОтчетПроизводства.вт_ПроизводствоСырье КАК вт_ЗаказВПроизводствоСырье
	               |ГДЕ
	               |	вт_ЗаказВПроизводствоСырье.Ссылка = &Ссылка
	               |	И вт_ЗаказВПроизводствоСырье.КлючСвязиСтроки = &КлючСвязиСтроки";
	Запрос.УстановитьПараметр("КлючСвязиСтроки",КлючНоменклатуры);	
	Запрос.УстановитьПараметр("Ссылка",СсылкаДокумента);	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Номенклатура<>Неопределено Тогда
				ТипНоменклатуры = ПолучитьТипНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура);
				
				СтрокаКомплекта = СоставКомплекта.Добавить();
				СтрокаКомплекта.НоменклатураПредставление    = ВыборкаДетальныеЗаписи.НоменклатураПредставление;
				СтрокаКомплекта.ХарактеристикаПредставление  = ВыборкаДетальныеЗаписи.ХарактеристикаПредставление;
				СтрокаКомплекта.Количество      = ВыборкаДетальныеЗаписи.Количество; //* КоличествоКомплекта;
				СтрокаКомплекта.ЕдИзм		    = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
				СтрокаКомплекта.ТипНоменклатуры = ТипНоменклатуры;
				//СтрокаКомплекта.Остаток			= ПолучитьОстатокНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.Характеристика,Склад,Дата);
				СтрокаКомплекта.Остаток			= ПолучитьОстатокНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.Характеристика,Склад,ТекущаяДата());
				СтрокаКомплекта.Пропуск 	    = Пропуск;
				Если ТипНоменклатуры = "Комплектация" Тогда
					ТаблицаКомплекта = ПолучитьСоставКомплектаДляПроизводства(ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.Количество * КоличествоКомплекта, Склад, Дата, Пропуск);
					Для каждого ПодСтрокаКомплекта Из ТаблицаКомплекта Цикл
						СтрокаКомплекта = СоставКомплекта.Добавить();
						СтрокаКомплекта.НоменклатураПредставление    = ПодСтрокаКомплекта.НоменклатураПредставление;
						СтрокаКомплекта.ХарактеристикаПредставление  = ПодСтрокаКомплекта.ХарактеристикаПредставление;
						СтрокаКомплекта.Количество      = ПодСтрокаКомплекта.Количество;
						СтрокаКомплекта.ЕдИзм		    = ПодСтрокаКомплекта.ЕдИзм;
						СтрокаКомплекта.ТипНоменклатуры = ПодСтрокаКомплекта.ТипНоменклатуры;
						СтрокаКомплекта.Остаток			= ПодСтрокаКомплекта.Остаток;
						СтрокаКомплекта.Пропуск 	    = ПодСтрокаКомплекта.Пропуск + Пропуск;  	
					КонецЦикла;	
				ИначеЕсли ТипНоменклатуры = "Производство" Тогда					
					ТаблицаКомплекта = ПолучитьСоставСырьяПоТехКарте(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.Характеристика, Склад, Дата, Пропуск);
					Для каждого ПодСтрокаКомплекта Из ТаблицаКомплекта Цикл
						СтрокаКомплекта = СоставКомплекта.Добавить();
						СтрокаКомплекта.НоменклатураПредставление    = ПодСтрокаКомплекта.НоменклатураПредставление;
						СтрокаКомплекта.ХарактеристикаПредставление  = ПодСтрокаКомплекта.ХарактеристикаПредставление;
						СтрокаКомплекта.Количество      = ПодСтрокаКомплекта.Количество * ВыборкаДетальныеЗаписи.Количество;
						СтрокаКомплекта.ЕдИзм		    = ПодСтрокаКомплекта.ЕдИзм;
						СтрокаКомплекта.ТипНоменклатуры = ПодСтрокаКомплекта.ТипНоменклатуры;
						СтрокаКомплекта.Остаток			= ПодСтрокаКомплекта.Остаток;
						СтрокаКомплекта.Пропуск 	    = ПодСтрокаКомплекта.Пропуск + Пропуск;  	
					КонецЦикла;						
				КонецЕсли;	    				
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат СоставКомплекта;

КонецФункции	

Функция ПолучитьСоставСырьяПоТехКарте(пГотоваяПродукция,пХарактеристикаПродукции,Склад, Дата, Пропуск)
	СоставКомплекта = Новый ТаблицаЗначений;
	СоставКомплекта.Колонки.Добавить("Номенклатура");
	СоставКомплекта.Колонки.Добавить("Характеристика");
	СоставКомплекта.Колонки.Добавить("НоменклатураПредставление");
	СоставКомплекта.Колонки.Добавить("ХарактеристикаПредставление");
	СоставКомплекта.Колонки.Добавить("Количество");
	СоставКомплекта.Колонки.Добавить("ЕдИзм");
	СоставКомплекта.Колонки.Добавить("ТипНоменклатуры"); 
	СоставКомплекта.Колонки.Добавить("Остаток");
	СоставКомплекта.Колонки.Добавить("Пропуск");
	
	мТехКарта = вт_ОбщийМодульПроизводства.ПолучитьВариантПроизводстваПродукции(пГотоваяПродукция, пХарактеристикаПродукции);
	Если мТехКарта.Ссылка = Справочники.вт_ВариантыПроизводстваПоТехКартам.ПустаяСсылка() Тогда
		Возврат СоставКомплекта;
	КонецЕсли;	
	мТехКартаОбъект = мТехКарта.Ссылка.ПолучитьОбъект();
	Для Каждого ПодСтрокаКомплекта Из мТехКартаОбъект.Состав Цикл
		СтрокаКомплекта = СоставКомплекта.Добавить();
		СтрокаКомплекта.Номенклатура = ПодСтрокаКомплекта.Сырье;
		СтрокаКомплекта.Характеристика = ПодСтрокаКомплекта.Характеристика;
		СтрокаКомплекта.НоменклатураПредставление    = СокрЛП(ПодСтрокаКомплекта.Сырье);
		СтрокаКомплекта.ХарактеристикаПредставление  = СокрЛП(ПодСтрокаКомплекта.Характеристика);
		СтрокаКомплекта.Количество      = ПодСтрокаКомплекта.Количество;
		СтрокаКомплекта.ЕдИзм		    = ПодСтрокаКомплекта.Сырье.ЕдиницаИзмерения;
		СтрокаКомплекта.ТипНоменклатуры = ПолучитьТипНоменклатуры(ПодСтрокаКомплекта.Сырье);
		СтрокаКомплекта.Остаток			= ПолучитьОстатокНоменклатуры(ПодСтрокаКомплекта.Сырье,ПодСтрокаКомплекта.Характеристика,Склад,Дата);
		СтрокаКомплекта.Пропуск 	    = Пропуск; 
		мТехКарта2 = вт_ОбщийМодульПроизводства.ПолучитьВариантПроизводстваПродукции(ПодСтрокаКомплекта.Сырье, ПодСтрокаКомплекта.Характеристика);
		Если мТехКарта2.Ссылка <> Справочники.вт_ВариантыПроизводстваПоТехКартам.ПустаяСсылка() Тогда
			ТаблицаКомплекта2 = ПолучитьСоставСырьяПоТехКарте(ПодСтрокаКомплекта.Сырье,ПодСтрокаКомплекта.Характеристика,Склад, Дата, СтрокаКомплекта.Пропуск);
			Для Каждого СтрокаКомплекта2 Из ТаблицаКомплекта2 Цикл
				СтрокаКомплекта = СоставКомплекта.Добавить();
				СтрокаКомплекта.Номенклатура = СтрокаКомплекта2.Номенклатура;
				СтрокаКомплекта.Характеристика = СтрокаКомплекта2.Характеристика;				
				СтрокаКомплекта.НоменклатураПредставление    = СтрокаКомплекта2.НоменклатураПредставление;
				СтрокаКомплекта.ХарактеристикаПредставление  = СтрокаКомплекта2.ХарактеристикаПредставление;
				СтрокаКомплекта.Количество      = СтрокаКомплекта2.Количество;
				СтрокаКомплекта.ЕдИзм		    = СтрокаКомплекта2.ЕдИзм;
				СтрокаКомплекта.ТипНоменклатуры =  ПолучитьТипНоменклатуры(СтрокаКомплекта2.Номенклатура);
				СтрокаКомплекта.Остаток			= ПолучитьОстатокНоменклатуры(СтрокаКомплекта2.Номенклатура,СтрокаКомплекта2.Характеристика,Склад,Дата);
				СтрокаКомплекта.Пропуск 	    = Пропуск + СтрокаКомплекта2.Пропуск; 
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;	
	Возврат СоставКомплекта;

КонецФункции	

&НаСервере
Функция ПолучитьСоставКомплектаДляПроизводства(Номенклатура, КоличествоКомплекта, Склад, Дата, Пропуск = "")
	Пропуск = Пропуск + "        ";
	СоставКомплекта = Новый ТаблицаЗначений;
	СоставКомплекта.Колонки.Добавить("НоменклатураПредставление");
	СоставКомплекта.Колонки.Добавить("ХарактеристикаПредставление");
	СоставКомплекта.Колонки.Добавить("Количество");
	СоставКомплекта.Колонки.Добавить("ЕдИзм");
	СоставКомплекта.Колонки.Добавить("ТипНоменклатуры"); 
	СоставКомплекта.Колонки.Добавить("Остаток");
	СоставКомплекта.Колонки.Добавить("Пропуск");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
		|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
		|	ВариантыКомплектацииНоменклатурыТовары.Количество,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ВариантыКомплектацииНоменклатурыТовары.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВариантыКомплектацииНоменклатурыТовары.Характеристика) КАК ХарактеристикаПредставление
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец",Номенклатура);	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Номенклатура<>Неопределено Тогда
				ТипНоменклатуры = ПолучитьТипНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура);
				Если ТипНоменклатуры = "Производство" Или ТипНоменклатуры = "Комплектация" Тогда
					СтрокаКомплекта = СоставКомплекта.Добавить();
					СтрокаКомплекта.НоменклатураПредставление    = ВыборкаДетальныеЗаписи.НоменклатураПредставление;
					СтрокаКомплекта.ХарактеристикаПредставление  = ВыборкаДетальныеЗаписи.ХарактеристикаПредставление;
					СтрокаКомплекта.Количество      = ВыборкаДетальныеЗаписи.Количество * КоличествоКомплекта;
					СтрокаКомплекта.ЕдИзм		    = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
					СтрокаКомплекта.ТипНоменклатуры = ТипНоменклатуры;
					СтрокаКомплекта.Остаток			= ПолучитьОстатокНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура,ВыборкаДетальныеЗаписи.Характеристика,Склад,Дата);
					СтрокаКомплекта.Пропуск 	    = Пропуск;
					Если ТипНоменклатуры = "Комплектация" Тогда
						ТаблицаКомплекта = ПолучитьСоставКомплектаДляПроизводства(ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.Количество * КоличествоКомплекта, Склад, Дата, Пропуск);
						Для каждого ПодСтрокаКомплекта Из ТаблицаКомплекта Цикл
							СтрокаКомплекта = СоставКомплекта.Добавить();
							СтрокаКомплекта.НоменклатураПредставление    = ПодСтрокаКомплекта.НоменклатураПредставление;
							СтрокаКомплекта.ХарактеристикаПредставление  = ПодСтрокаКомплекта.ХарактеристикаПредставление;
							СтрокаКомплекта.Количество      = ПодСтрокаКомплекта.Количество;
							СтрокаКомплекта.ЕдИзм		    = ПодСтрокаКомплекта.ЕдИзм;
							СтрокаКомплекта.ТипНоменклатуры = ПодСтрокаКомплекта.ТипНоменклатуры;
							СтрокаКомплекта.Остаток			= ПодСтрокаКомплекта.Остаток;
							СтрокаКомплекта.Пропуск 	    = ПодСтрокаКомплекта.Пропуск;  	
						КонецЦикла;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат СоставКомплекта;
КонецФункции	

&НаСервере
Функция ПечатьСоставИнгредиентовНаСервере1()
ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.вт_ОтчетПроизводства.ПолучитьМакет("ПФ_MXL_ЗаказВПроизводствоСОстатком");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
//	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
		
	ТабДок.Очистить();
	//ОбластьШапка.Параметры.ДатаДокумента = Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+"г.";
	//Если РеквизитДеньНочь = 1 Тогда
	//	пДеньНочь = "(День)";	
	//ИначеЕсли РеквизитДеньНочь = 2 Тогда
	//	пДеньНочь = "(Ночь)";
	//КонецЕсли;	
//	ОбластьШапка.Параметры.СменаДокумента = "смена №" + Строка(РеквизитДеньНочь) + пДеньНочь;
	ТабДок.Вывести(ОбластьШапка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Количество
		|ПОМЕСТИТЬ вт_ПроизводствоСырье
		|ИЗ
		|	&вт_ПроизводствоСырье КАК вт_ОтчетПроизводствавт_ПроизводствоСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ПроизводствоСырье.Номенклатура,
		|	СУММА(вт_ПроизводствоСырье.Количество) КАК Количество
		|ИЗ
		|	вт_ПроизводствоСырье КАК вт_ПроизводствоСырье
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ПроизводствоСырье.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	Запрос.УстановитьПараметр("вт_ПроизводствоСырье",Объект.вт_ПроизводствоСырье.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 		
		НомерСтроки = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			НомерСтроки = НомерСтроки + 1;		
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрока.Параметры.НоменклатураПредставление = Строка(ВыборкаДетальныеЗаписи.Номенклатура);
		//	ОбластьСтрока.Параметры.РасшифровкаНоменклатуры = ВыборкаДетальныеЗаписи.Номенклатура.Ссылка;
			ОбластьСтрока.Параметры.Количество = ВыборкаДетальныеЗаписи.Количество;
								
			ТабДок.Вывести(ОбластьСтрока);	
							
		КонецЦикла;	
	КонецЕсли;	    		
	
//	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСнизу  = 5;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	
	Возврат ТабДок;    	


КонецФункции

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Объект.Партнер = Объект.Контрагент.Партнер;	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодобратьАналогСырья(Команда)
	
	ТекДанные = Элементы.ТаблицаСырье.ТекущиеДанные;
	Если ТекДанные= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура",ТекДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекДанные.Характеристика);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("ДатаОстатков", Объект.Дата);
	ПараметрыФормы.Вставить("Количество", ТекДанные.Количество);
	
	ОткрытьФорму("Документ.вт_ОтчетПроизводства.Форма.ФормаПодборЗаменыСырья",ПараметрыФормы,Элементы.ТаблицаСырье);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		ТекДанныеСырье = Элементы.ТаблицаСырье.ТекущаяСтрока;

		ТекДанные = Элементы.Товары.ТекущиеДанные;
		КлючСвязи 		 = ТекДанные.КодСтроки;
		ГотоваяПродукция = ТекДанные.Номенклатура;
		
		для Каждого Элеммассива из ВыбранноеЗначение Цикл
			ДобавитьСтрокуСырье(КлючСвязи, ГотоваяПродукция, Элеммассива)
		КонецЦикла;
		
		Объект.вт_ПроизводствоСырье.Удалить(ТекДанныеСырье);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ДобавитьСтрокуСырье(КлючСвязи, ГотоваяПродукция, ДанныеСтроки)
	      СтрокаСырье = Объект.вт_ПроизводствоСырье.Добавить();
		  СтрокаСырье.КлючСвязиСтроки 	= КлючСвязи;
		  СтрокаСырье.Номенклатура 		= ДанныеСтроки.Номенклатура;
		  СтрокаСырье.Характеристика 	= ДанныеСтроки.Характеристика;		
		  СтрокаСырье.Количество 		= ДанныеСтроки.Количество;		
		  СтрокаСырье.ГотоваяПродукция 	= ГотоваяПродукция;
		  
КонецПроцедуры	

&НаКлиенте
Процедура КомандаПереместить(Команда)
	Если Не Модифицированность Тогда
		ОповещениеЗакрытия = Новый ОписаниеОповещения("СоздатьДокументПеремещения",ЭтаФорма);
		ОткрытьФорму("Документ.вт_ОтчетПроизводства.Форма.ФормаВыборВидаПеремещения",,ЭтаФорма,,,,ОповещениеЗакрытия);
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаПереместитьБракЗавершение", ЭтотОбъект), "Сначала необходимо записать изменения в документе. Записать?",РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПеремещения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия=Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатЗакрытия.Брак И НЕ РезультатЗакрытия.Продукция ТОгда
		Возврат;
	КонецЕсли;
	
		ФормаПеремещения = ПолучитьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта");		
		ДанныеФормы = ФормаПеремещения.Объект;
		ЗаполнитьДокументПермемещениеТоваров(ДанныеФормы, РезультатЗакрытия.Продукция, РезультатЗакрытия.Брак);
		КопироватьДанныеФормы(ДанныеФормы, ФормаПеремещения.Объект);
		ФормаПеремещения.Открыть();
	
КонецПроцедуры


#Область ПересчетНДС_ПрочиеРасходы

// Возвращает структуру, содержащую поля значений, используемых для пересчета сумм НДС в строках табличной части 
// документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные документа.
//
// Возвращаемое значение:
//	Структура - структура, используемая для пересчета сумм НДС в табличной части документа:
//		* ЦенаВключаетНДС - Булево - Истина - НДС включен в цену товара.
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение документа.
//
&НаКлиенте
Функция ПараметрыПересчетаСуммыНДСВСтрокеТЧ()	
	//СтруктураЗаполненияЦены = Новый Структура;
	//СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Ложь);
	//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"НалогообложениеНДС") Тогда
	//	СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	//КонецЕсли;
	//Возврат СтруктураЗаполненияЦены;       	
	Возврат Новый Структура("ЦенаВключаетНДС", Ложь);	
КонецФункции

&НаКлиенте
Процедура ПрочиеРасходыСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаРегл);
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура("ИмяКоличества", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, ,"Сумма"); 
	ТекущиеДанные.СуммаБезНДС = ТекущаяСтрока.Сумма;
	ТекущиеДанные.Сумма = ТекущаяСтрока.СуммаСНДС;

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаРегл);

	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ();
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, ,"Сумма"); 
	ТекущиеДанные.СуммаБезНДС = ТекущаяСтрока.Сумма;
	ТекущиеДанные.Сумма = ТекущаяСтрока.СуммаСНДС;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	

	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаРегл);
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ();
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, ,"Сумма"); 
	ТекущиеДанные.СуммаБезНДС = ТекущаяСтрока.Сумма;
	ТекущиеДанные.Сумма = ТекущаяСтрока.СуммаСНДС;
	
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("СуммаБезНДС",         ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаРегл);

	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);	
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока); 
	     
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаНДСПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.СуммаБезНДС);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаРегл);

	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, ,"Сумма"); 
	ТекущиеДанные.СуммаБезНДС = ТекущаяСтрока.Сумма;
	ТекущиеДанные.Сумма = ТекущаяСтрока.СуммаСНДС;        
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВалютуРеглУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоМЛНаСервере()
	
	Объект.Товары.Очистить();
	Объект.вт_ПроизводствоСырье.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка.Номенклатура КАК ГП,
	|	СУММА(МаршрутныйЛист.Ссылка.Количество) КАК КоличествоГП,
	|	МаршрутныйЛист.Ссылка.Серия КАК СерияГП,
	|	МаршрутныйЛист.Ссылка.Рецепт КАК Рецепт,
	|	МаршрутныйЛист.Номенклатура КАК Сырье,
	|	СУММА(МаршрутныйЛист.Количество) КАК КоличествоСырья,
	|	МаршрутныйЛист.Серия КАК СерияСырья
	|ИЗ
	|	Документ.МаршрутныйЛист.Материалы КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Ссылка.ДатаФакт МЕЖДУ &НачПериода И &КонПериода
	|	И МаршрутныйЛист.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистов.Проверен)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛист.Ссылка.Серия,
	|	МаршрутныйЛист.Номенклатура,
	|	МаршрутныйЛист.Ссылка.Номенклатура,
	|	МаршрутныйЛист.Ссылка.Рецепт,
	|	МаршрутныйЛист.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГП,
	|	Сырье
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Объект.Дата));
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
	ТекГп = "";
	Пока Выборка.Следующий() Цикл
		Если НЕ ТекГп = Выборка.ГП Тогда
		   ТекГп = Выборка.ГП;
			СтрГП = Объект.Товары.Добавить();
		    СтрГП.Номенклатура = Выборка.ГП; 
			СтрГП.Серия = Выборка.СерияГП; 
			СтрГП.ВариантПроизводства = Выборка.Рецепт;
			СтрГП.КоличествоПлан = Выборка.КоличествоГП; 
			СтрГП.Количество = Выборка.КоличествоГП;
			СтрГП.КодСтроки = Объект.Товары.Количество()+1;
			СтрГП.ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(Объект.Организация, ХозяйственнаяОперация);
			СтрГП.СтатусУказанияСерий = ДокОбъект.вт_ПолучитьСтатусУказанияСерий(СтрГП.Номенклатура);
			
		КонецЕсли; 
		
		СтрСырье = Объект.вт_ПроизводствоСырье.Добавить();
		СтрСырье.Номенклатура = Выборка.Сырье;
		СтрСырье.КоличествоПлан = Выборка.КоличествоСырья;
		СтрСырье.Количество = Выборка.КоличествоСырья;
		СтрСырье.ГотоваяПродукция = Выборка.ГП;
		СтрСырье.ВариантПроизводства = Выборка.Рецепт;
		СтрСырье.КлючСвязиСтроки = СтрГП.КодСтроки;
		СтрСырье.Серия = Выборка.СерияСырья;
		СтрСырье.СтатусУказанияСерий = ДокОбъект.вт_ПолучитьСтатусУказанияСерий(СтрСырье.Номенклатура);
	КонецЦикла; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМЛ(Команда)
	ЗаполнитьПоМЛНаСервере();
КонецПроцедуры
	

#КонецОбласти 
