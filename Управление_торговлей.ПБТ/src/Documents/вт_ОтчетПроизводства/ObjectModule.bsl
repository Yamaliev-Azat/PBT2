#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем СырьеВывестиИзРезерва; 
Перем СтатусЗаказаЗавершено ;
Перем ЕстьОперации;
	

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	ИнициализироватьДокумент();
	ВидЗапасов = Неопределено;
	ДокументОснование = Неопределено;
	ДокументПрочихРасходов   = Неопределено;
	ДокументРасходовЗарплата = Неопределено;
	ДокументРасходовОперации = Неопределено;
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЭтотОбъект.Дата = ТекущаяДата();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			ДанныеЗаполнения = ДанныеЗаполнения.ДокументОснование;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.вт_ЗаказВПроизводство") ТОгда
		Склад			= ДанныеЗаполнения.Склад;
		//СкладСырья 		= ДанныеЗаполнения.Склад;
		Организация 	= ДанныеЗаполнения.Организация;
		Подразделение 	= ДанныеЗаполнения.Подразделение;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.вт_ПоступлениеДавальческогоСырья") ТОгда
		ВидОперацииПроизводства = Перечисления.вт_ВидыОперацийПроизводства.ПроизводствоДляЗаказчика;
		Партнер = ДанныеЗаполнения.Партнер;
		Контрагент = ДанныеЗаполнения.Контрагент;	
		ДоговорКонтрагента = ДанныеЗаполнения.Договор;	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.вт_ПланПроизводства") ТОгда
		Организация = ДанныеЗаполнения.Организация;
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);

	ДокументОснование = ДанныеЗаполнения;
	
	Если ЗначениеЗаполнено(Склад)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад",Склад))
		И Не ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ТекстСообщения = НСтр("ru='На складе ""%Склад%"" используется ордерная схема для отражения излишков и недостач, поэтому ""Оприходование товаров"" нужно вводить по основанию.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%",Склад);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если НЕ ЗначениеЗаполнено(ВидОперацииПроизводства) Тогда
			ВидОперацииПроизводства = Перечисления.вт_ВидыОперацийПроизводства.СобственноеПроизводство;
		КонецЕсли;
		ЗаполнитьТабличнуюЧастьТовары();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.вт_ЗаказВПроизводство") ТОгда
        Если ЗначениеЗаполнено(ДанныеЗаполнения.Исполнитель) ТОгда
			ЗаполнитьТаблицуТарифовПоСотруднику(ДанныеЗаполнения.Исполнитель);
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(Перечисления.ХозяйственныеОперации.СборкаТоваров, Склад, Подразделение, Неопределено);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			ВидыЗапасов.Очистить();
	КонецЕсли;


	ОбработатьДокументыРасходов_ПередЗаписью(РежимЗаписи);
	
	Если ЗначениеЗаполнено(ДокументОснование) 
		И Не ЭтотОбъект.ПометкаУдаления 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			РезервСырьяЗаказан = ПолучитьРезервСырья(ДокументОснование);
		    РезервСырьяПотрачен = ПолучитьИзрасходованноеСырье();
			СырьеВывестиИзРезерва = ПолучитьСырьеКВыводуИЗРезерва(РезервСырьяЗаказан,РезервСырьяПотрачен);
	КонецЕсли;	
		
	ПроверитьСоздатьСерииНоменклатуры(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//НачатьТранзакцию();
	
	мИспользоватьОрдернуюСхему = ЭтотОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
	мИспользоватьОрдернуюСхемуПриОтгрузке = ЭтотОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке;
	мДатаНачалаОрдернойСхемыПриОтгрузке =  ЭтотОбъект.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке;
	
	Если ЭтотОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач ИЛИ ЭтотОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		мСклад = ЭтотОбъект.Склад.ПолучитьОбъект();
		мСклад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Ложь;
		мСклад.ИспользоватьОрдернуюСхемуПриОтгрузке = Ложь;
		мСклад.ОбменДанными.Загрузка = Истина;
		мСклад.Записать();
		мСклад.ОбменДанными.Загрузка = Ложь;
	КонецЕсли;	
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.вт_ОтчетПроизводства.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, ЭтотОбъект.Дата);//Новый Граница(МоментВремени(),ВидГраницы.Исключая));

	Если ЭтотОбъект.ОтразитьВПроизводственномУчете Тогда
		//проверяем - если регистр по заказу закрыт, то ставим статус заказа
		//ЗакрытьЗаказВПроизводство();
		
		ОтразитьЗакрытиеЗаказаВПроизводство(ДополнительныеСвойства, Движения, Отказ);	
		ЗакрытьПланПроизводства();
		ЗаполнитьРегистрВТВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
		ЗаполнитьРегистрВТСырьеВыпускаПродукции(ДополнительныеСвойства, Движения, Отказ);
		ОтразитьВыпускПоСменам(ДополнительныеСвойства, Движения, Отказ);
		ОтразитьОтходыПроизводства(ДополнительныеСвойства, Движения, Отказ);
		ОтразитьБракПроизводства(ДополнительныеСвойства, Движения, Отказ);
		ОтразитьВыработкуСотрудников(Движения, Отказ);
		ОтразитьВыполнениеОперацийПроизводства();
		ОтразитьИспользованиеДавальческогоСырья();

	КонецЕсли;
	
	Если ЭтотОбъект.ОтразитьВРеглУчете Тогда
		ПроведениеДокумента(ЭтотОбъект,Движения);
		СформироватьСписокРегистровДляКонтроля();
		ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
		ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	КонецЕсли;
	
	Если (мИспользоватьОрдернуюСхемуПриОтгрузке <> ЭтотОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке) 
		ИЛИ (мИспользоватьОрдернуюСхему <> ЭтотОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач) Тогда
		мСклад = ЭтотОбъект.Склад.ПолучитьОбъект();
		мСклад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = мИспользоватьОрдернуюСхему;
		мСклад.ИспользоватьОрдернуюСхемуПриОтгрузке = мИспользоватьОрдернуюСхемуПриОтгрузке;
		мСклад.ДатаНачалаОрдернойСхемыПриОтгрузке = мДатаНачалаОрдернойСхемыПриОтгрузке;
		мСклад.ОбменДанными.Загрузка = Истина;
		мСклад.Записать();
		мСклад.ОбменДанными.Загрузка = Ложь;
	КонецЕсли;		
	
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ПроведениеДокумента(ЭтотОбъект,Движения)
	
	СтатусЗаказаЗавершено = ЛОЖЬ;
	ЕстьОперации = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") И ЭтотОбъект.Операции.Количество()>0 ТОгда
		ЕстьОперации = Истина;
		ПослСтатус = РегистрыСведений.вт_СтатусыЗаказовВПроизводство.ПолучитьПоследнее(МоментВремени(), Новый Структура("ЗаказВПроизводство",ДокументОснование));
		тзнОстаткиОпераций = РегистрыНакопления.вт_ОперацииВыпускаПродукции.Остатки(Новый Граница(МоментВремени(),ВидГраницы.Включая),Новый Структура("ЗаказПроизводства", ДокументОснование),"Операция","Количество");
		
		СтатусЗаказаЗавершено = тзнОстаткиОпераций.Итог("Количество")= 0; //ПослСтатус.Статус = Перечисления.вт_СтатусыПроизводства.Завершено;
	КонецЕсли;
	
	СнятьРезервСырьяДокументаОснования();
	СнятьРезервыДляПоступленияИзПроизводства();
	
	ТаблГП = ЭтотОбъект.Товары.Выгрузить();
	ТаблГП.Свернуть("Номенклатура, Характеристика, Серия, НоменклатураБрака, ХарактеристикаБрака, КодСтроки, СтатусУказанияСерий","Количество, КоличествоПлан, БракКолВо");
	
	ТаблСырье = ЭтотОбъект.вт_ПроизводствоСырье.Выгрузить(,"ГотоваяПродукция, Номенклатура, Характеристика, Серия, Количество, КлючСвязиСтроки, СтатусУказанияСерий");
	ТаблСырье.Свернуть("ГотоваяПродукция, Номенклатура, Характеристика, Серия, КлючСвязиСтроки, СтатусУказанияСерий","Количество");
	//Добавим колонки для распределения сырья между готовой продукцией, браком, отходами

	КЧ = Новый КвалификаторыЧисла(15,3);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблСырье.колонки.добавить("Количество_ГП",ОписаниеТиповЧ  );
	ТаблСырье.колонки.добавить("Количество_Брак",ОписаниеТиповЧ);
	ТаблСырье.колонки.добавить("Количество_Отходы",ОписаниеТиповЧ);
	
	
	ТаблОтходы = ЭтотОбъект.вт_БракДробленка.Выгрузить(,"Дробленка, Характеристика, Количество, ГотоваяПродукция, КлючСвязиСтроки");
	ТаблОтходы.Свернуть("Дробленка, Характеристика, ГотоваяПродукция, КлючСвязиСтроки", "Количество");
	ТаблОтходы.колонки.добавить("Доля",ОписаниеТиповЧ);
	
	ТаблСерии = ЭтотОбъект.Серии.Выгрузить();
	ТаблСерии.Свернуть("Номенклатура, Характеристика, Серия, КлючСвязиСтроки, Назначение", "Количество");
	
	НомерСтрокаГП = 0; 
	 
	Для Каждого СтрокаГП из ТаблГП Цикл
	
		НомерСтрокаГП = НомерСтрокаГП + 1; 
		пГотПрод = СтрокаГП.Номенклатура;
		пГПКол = СтрокаГП.Количество;
		пГПКолБрак = СтрокаГП.БракКолВо;
		пГПОтходы  = 0;
		
		ОтборГП = Новый Структура("ГотоваяПродукция, КлючСвязиСтроки",пГотПрод, СтрокаГП.КодСтроки);
		
		ОтходыПоГП = ТаблОтходы.НайтиСтроки(ОтборГП);
		
		ОтборСерии = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",пГотПрод,СтрокаГП.Характеристика, СтрокаГП.КодСтроки);
		СерииПоГП  = ТаблСерии.НайтиСтроки(ОтборСерии);
		
		Для Каждого СтрокаОтходовПоГП из ОтходыПоГП Цикл
			пГПОтходы = пГПОтходы +  СтрокаОтходовПоГП.Количество;
		КонецЦикла;	
		
		Для Каждого СтрокаОтходовПоГП из ОтходыПоГП Цикл
			СтрокаОтходовПоГП.Доля = СтрокаОтходовПоГП.Количество /  пГПОтходы;
		КонецЦикла;	
		
		всегоПриходНаСклад = пГПКол + пГПКолБрак + пГПОтходы;
		
		гпГпПроцент     = ОКР(пГПКол     / всегоПриходНаСклад,3);
		гпБракПроцент   = ОКР(пГПКолБрак / всегоПриходНаСклад,3);
		гпОтходыПроцент = 1 - (гпГпПроцент + гпБракПроцент);
		
		//Распределяем количество сырья между  гп, брак, отходы
		СырьеПоГП  = ТаблСырье.НайтиСтроки(ОтборГП);
		Для Каждого СтрокаСырья из СырьеПоГП Цикл
			СтрокаСырья.Количество_ГП   = СтрокаСырья.Количество * гпГпПроцент;
			СтрокаСырья.Количество_Брак = СтрокаСырья.Количество * гпБракПроцент;
			СтрокаСырья.Количество_Отходы = СтрокаСырья.Количество - (СтрокаСырья.Количество_ГП + СтрокаСырья.Количество_Брак);
			
		КонецЦикла;	
		
		//ШАГ 1. Создаем движения для готовой продукции
		
		ДокСборка = СоздатьИЗаполнитьДокСборка(ЭтотОбъект, СтрокаГП.КодСтроки, пГотПрод,СтрокаГП.Характеристика,пГПКол,СырьеПоГП,ТаблСерии,"Количество_ГП", 1, СтрокаГП);
		
		Если НЕ ДокСборка.Проведен Тогда
			УдалитьДокументСборка(ДокСборка);
			Продолжить;
		КонецЕсли;
		
		ПеренестиДвиженияВОтчетПроизводства(ДокСборка, ЭтотОбъект, Движения);
		
		Попытка  
			ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;		
		
		Попытка
			УдалитьДокументСборка(ДокСборка); 
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
			
		
		
		////ШАГ 2. Создаем движения для брака
		ХарактеристикаБрака = ?(ЗначениеЗаполнено(СтрокаГП.ХарактеристикаБрака),СтрокаГП.ХарактеристикаБрака,СтрокаГП.Характеристика);
		НоменклатураБрака   = ?(ЗначениеЗаполнено(СтрокаГП.НоменклатураБрака),СтрокаГП.НоменклатураБрака,СтрокаГП.Номенклатура);
		КоличествоБрака     = СтрокаГП.БракКолВо;
		Если КоличествоБрака > 0 Тогда
			ДокСборка = СоздатьИЗаполнитьДокСборка(ЭтотОбъект, СтрокаГП.КодСтроки, пГотПрод, ХарактеристикаБрака, КоличествоБрака, СырьеПоГП, ТаблСерии,"Количество_Брак", 1, СтрокаГП);
			
			Если НЕ ДокСборка.Проведен Тогда
				УдалитьДокументСборка(ДокСборка);
				Продолжить;
			КонецЕсли;
			
			ПеренестиДвиженияВОтчетПроизводства(ДокСборка, ЭтотОбъект, Движения);
			
			Попытка  
				ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;		
			
			Попытка
				УдалитьДокументСборка(ДокСборка); 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		////ШАГ 3.Создаем движения для отходов
		Для Каждого СтрокаОтходов из ОтходыПоГП Цикл
			  НоменклатураОтходы   = СтрокаОтходов.Дробленка;
			  ХарактеристикаОтходы = СтрокаОтходов.Характеристика;
              КоличествоОтходы     = СтрокаОтходов.Количество;
			  Если КоличествоОтходы>0 Тогда
				  ДокСборка = СоздатьИЗаполнитьДокСборка(ЭтотОбъект, СтрокаГП.КодСтроки, НоменклатураОтходы, ХарактеристикаОтходы, КоличествоОтходы, СырьеПоГП, ТаблСерии,"Количество_Отходы", СтрокаОтходов.Доля, СтрокаОтходов);
				  Если НЕ ДокСборка.Проведен Тогда
					  УдалитьДокументСборка(ДокСборка);
					  Продолжить;
				  КонецЕсли;
				  
				  ПеренестиДвиженияВОтчетПроизводства(ДокСборка, ЭтотОбъект, Движения);
				  
				  Попытка  
					  ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				  Исключение
					  Сообщить(ОписаниеОшибки());
				  КонецПопытки;		
				  
				  Попытка
					  УдалитьДокументСборка(ДокСборка); 
				  Исключение
					  Сообщить(ОписаниеОшибки());
				  КонецПопытки;
 
			  КонецЕсли;	  
		КонецЦикла;
		
	КонецЦикла;
	
	//++20200911 Движение для прочих расходов
	Если ЭтотОбъект.ПрочиеРасходы.Количество() > 0 И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) И
		ЭтотОбъект.ВидОперацииПроизводства = Перечисления.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства Тогда
		ДокПриобретениеУслуг = СоздатьИЗаполнитьДокПриобретениеУслугПрочихАктивов(ЭтотОбъект);
		Если НЕ ДокПриобретениеУслуг.Проведен Тогда
			УдалитьДокументСборка(ДокПриобретениеУслуг);
		Иначе     		
			ПеренестиДвиженияВОтчетПроизводства(ДокПриобретениеУслуг, ЭтотОбъект, Движения);
			
			Попытка  
				ДокПриобретениеУслуг.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;					
			Попытка
				УдалитьДокументСборка(ДокПриобретениеУслуг); 
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;					
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	
	
Процедура ПриЗаписи(Отказ)
	ОбработатьДокументыРасходов_ПриЗаписи();
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////


Процедура ПроверитьСоздатьСерииГотовойПродукции() Экспорт
	
	//По готовой продукции 
	Для каждого СтрокаГП из ЭтотОбъект.Товары Цикл
		
		Если НЕ СтрокаГП.Номенклатура.ВидНоменклатуры.ИспользоватьСерии Тогда //Учет по сериям не ведется
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",СтрокаГП.Номенклатура, СтрокаГП.Характеристика, СтрокаГП.КодСтроки);
		МассивСерии = ЭтотОбъект.Серии.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСерии.Количество()>0 Тогда //Есть уже серии для номенклатуры
			Продолжить;
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(СтрокаГП.Серия) Тогда
			СсылкаСерия = СтрокаГП.Серия;
		Иначе
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СерииНоменклатуры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ
			|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
			|	И СерииНоменклатуры.Наименование = ""Пустая серия""";
			
			Запрос.УстановитьПараметр("ВидНоменклатуры", СтрокаГП.Номенклатура.ВидНоменклатуры);
			//Запрос.УстановитьПараметр("Наименование", Наименование);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СсылкаСерия 		= ВыборкаДетальныеЗаписи.Ссылка;	
			КонецЦикла;
			
			// на этапе внедрения/переноса данных, создавать серии не будем
			//СсылкаСерия = СоздатьСериюНоменклатуры(СтрокаГП.Номенклатура, СтрокаГП.КодСтроки); //Создаем серии
			
		КонецЕсли;
		
		//Добавляем серию
		СтрокаСерия = ЭтотОбъект.Серии.Добавить();
		СтрокаСерия.Серия 			= СсылкаСерия;
		СтрокаСерия.Количество 		= СтрокаГП.Количество;
		СтрокаСерия.Номенклатура 	= СтрокаГП.Номенклатура;
		СтрокаСерия.Характеристика 	= СтрокаГП.Характеристика;
		СтрокаСерия.Склад 			= ЭтотОбъект.Склад;
		СтрокаСерия.КлючСвязиСтроки = СтрокаГП.КодСтроки;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоздатьСерииОтходов() Экспорт

	//По отходам
	Для каждого СтрокаОтходы из ЭтотОбъект.вт_БракДробленка Цикл
		Если НЕ  СтрокаОтходы.Дробленка.ВидНоменклатуры.ИспользоватьСерии  Тогда //Учет по сериям не ведется
			Продолжить;
		КонецЕсли;

		ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",
				СтрокаОтходы.Дробленка, СтрокаОтходы.Характеристика, СтрокаОтходы.КлючСвязиСтроки);
		МассивСерии = ЭтотОбъект.Серии.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСерии.Количество()>0 Тогда //Есть уже серии для номенклатуры
			Продолжить;
		КонецЕсли;
		
		СсылкаСерия = СоздатьСериюНоменклатуры(СтрокаОтходы.Дробленка, СтрокаОтходы.КлючСвязиСтроки); //Создаем серии
		
		//Добавляем серию
		СтрокаСерия = ЭтотОбъект.Серии.Добавить();
		СтрокаСерия.Серия = СсылкаСерия;
		СтрокаСерия.Количество = СтрокаОтходы.Количество;
		СтрокаСерия.Номенклатура = СтрокаОтходы.Дробленка;
		СтрокаСерия.Характеристика = СтрокаОтходы.Характеристика;
		СтрокаСерия.Склад = ЭтотОбъект.Склад;
		СтрокаСерия.КлючСвязиСтроки = СтрокаОтходы.КлючСвязиСтроки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПроверитьСоздатьСерииСырья() Экспорт
	//Для сырья
	ТаблСырье = ЭтотОбъект.вт_ПроизводствоСырье.Выгрузить(,"Номенклатура,Характеристика, Количество, КлючСвязиСтроки");
	ТаблСырье.Свернуть("Номенклатура,Характеристика,КлючСвязиСтроки","Количество");
	
	Для Каждого СтрокаСырье из ТаблСырье Цикл
		Если НЕ СтрокаСырье.Номенклатура.ВидНоменклатуры.ИспользоватьСерии Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, КлючСвязиСтроки",
				СтрокаСырье.Номенклатура, СтрокаСырье.Характеристика, СтрокаСырье.КлючСвязиСтроки);
				
		МассивСерии = ЭтотОбъект.Серии.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСерии.Количество()>0 Тогда //Есть уже серии для номенклатуры
			Продолжить;
		КонецЕсли;
		
		КоличествоСырьеРаспределить = СтрокаСырье.Количество;
		
		
		ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика, Склад",
		   СтрокаСырье.Номенклатура,  СтрокаСырье.Характеристика, ЭтотОбъект.Склад);
		   
		ТаблОстатки = РегистрыНакопления.ТоварыНаСкладах.Остатки(ЭтотОбъект.Дата,ПараметрыОтбора,
					"Номенклатура, Характеристика,Серия ","ВНаличии, КОтгрузке");
		Для Каждого СтрокаОстатки из ТаблОстатки Цикл
			Если КоличествоСырьеРаспределить<=0 Тогда
				прервать;
			КонецЕсли;
			
			КоличествоСписать = ?(СтрокаОстатки.ВНаличии > КоличествоСырьеРаспределить,
								   КоличествоСырьеРаспределить,	СтрокаОстатки.ВНаличии);
			
			СтрокаСерия = ЭтотОбъект.Серии.Добавить();
			
			Если ЗначениеЗаполнено(СтрокаОстатки.Серия) Тогда
				СтрокаСерия.Серия 		= СтрокаОстатки.Серия;
			Иначе 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	СерииНоменклатуры.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
					|ГДЕ
					|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
					|	И СерииНоменклатуры.Наименование = ""Пустая серия""";
				
				Запрос.УстановитьПараметр("ВидНоменклатуры", СтрокаСырье.Номенклатура.ВидНоменклатуры);
				//Запрос.УстановитьПараметр("Наименование", Наименование);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаСерия.Серия 		= ВыборкаДетальныеЗаписи.Ссылка;	
				КонецЦикла;
			
			КонецЕсли;
			
			СтрокаСерия.Количество 		= КоличествоСписать;
			СтрокаСерия.Номенклатура 	= СтрокаСырье.Номенклатура;
			СтрокаСерия.Характеристика 	= СтрокаСырье.Характеристика;
			СтрокаСерия.Склад 			= ЭтотОбъект.Склад;
			СтрокаСерия.КлючСвязиСтроки = СтрокаСырье.КлючСвязиСтроки;

			КоличествоСырьеРаспределить = КоличествоСырьеРаспределить - КоличествоСписать;
		КонецЦикла;
		
		Если КоличествоСырьеРаспределить>0 Тогда
			
		//	 Отказ=Истина;
		//	 ВызватьИсключение "Не удалось распределить расход сырья по сериям ["+Строка(СтрокаСырье.Номенклатура)+","+Строка(СтрокаСырье.Характеристика) + "]"; 
		КонецЕсли;	
				
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоздатьСерииНоменклатуры(Отказ) Экспорт
	
	 ПроверитьСоздатьСерииГотовойПродукции();
	 
	 ПроверитьСоздатьСерииОтходов();
	 
	 ПроверитьСоздатьСерииСырья();
	 
КонецПроцедуры	

Функция СоздатьСериюНоменклатуры(пНоменклатура, индсерии)
	СерияНом=Справочники.СерииНоменклатуры.СоздатьЭлемент();
	СерияНом.ВидНоменклатуры = пНоменклатура.ВидНоменклатуры;
	СерияНом.Номер = Формат(ТекущаяДата(),"ДФ=ddMMyyyyhhmmss")+"_"+Формат(индсерии,"ЧГ=0");
	СерияНом.Наименование = СерияНом.Номер;
	СерияНом.Записать();
	
	Возврат СерияНом.Ссылка;
	
КонецФункции	

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
 	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад", Склад)) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	//++
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	//--
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

Функция СформироватьТаблицуТоваров()
	ТаблицаТоваров = Товары.Выгрузить();
	
	Возврат ТаблицаТоваров;
КонецФункции

Процедура ОтразитьВыполнениеОперацийПроизводства()
	
Запрос  = Новый Запрос("ВЫБРАТЬ
	|	вт_ОтчетПроизводстваОперации.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	вт_ОтчетПроизводстваОперации.Ссылка.Организация КАК Организация,
	|	вт_ОтчетПроизводстваОперации.Ссылка.ДокументОснование КАК ЗаказПроизводства,
	|	вт_ОтчетПроизводстваОперации.Операция КАК Операция,
	|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
	|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
	|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура КАК НоменклатураСырье,
	|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Характеристика КАК ХарактеристикаСырье,
	|	естьnull(вт_ОтчетПроизводствавт_ПроизводствоСырье.Количество,1) КАК Количество
	|ИЗ
	|	Документ.вт_ОтчетПроизводства.Операции КАК вт_ОтчетПроизводстваОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
	|		ПО вт_ОтчетПроизводстваОперации.Ссылка = вт_ОтчетПроизводстваТовары.Ссылка
	|			И вт_ОтчетПроизводстваОперации.КлючСтрокипродукции = вт_ОтчетПроизводстваТовары.КодСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.вт_ПроизводствоСырье КАК вт_ОтчетПроизводствавт_ПроизводствоСырье
	|		ПО вт_ОтчетПроизводстваОперации.Ссылка = вт_ОтчетПроизводствавт_ПроизводствоСырье.Ссылка
	|			И вт_ОтчетПроизводстваОперации.КлючСтрокипродукции = вт_ОтчетПроизводствавт_ПроизводствоСырье.КлючСвязиСтроки
	|ГДЕ
	|	вт_ОтчетПроизводстваОперации.Ссылка = &Ссылка");

Запрос.УстановитьПараметр("Ссылка",Ссылка);

Запрос.УстановитьПараметр("Ссылка", Ссылка);

РезультатЗапроса = Запрос.Выполнить();

тзнОперацииСырье = РезультатЗапроса.Выгрузить();

Движения.вт_ОперацииВыпускаСырье.Загрузить(тзнОперацииСырье);
Движения.вт_ОперацииВыпускаСырье.Записать();


тзнОперацииСырье.Свернуть("Период,ВидДвижения, Организация, ЗаказПроизводства, Номенклатура, Характеристика,Операция","Количество");
тзнОперацииСырье.ЗаполнитьЗначения(1,"Количество");

Движения.вт_ОперацииВыпускаПродукции.Загрузить(тзнОперацииСырье);
Движения.вт_ОперацииВыпускаПродукции.Записать();

	
КонецПроцедуры	

Процедура ОтразитьЗакрытиеЗаказаВПроизводство(ДополнительныеСвойства, Движения, Отказ) 
	Если НЕ ЗначениеЗаполнено(ДокументОснование) тогда
		Возврат;
	КонецЕсли; 	

	МассивЗаказовВПроизводство = Новый Массив;
	ЗаказВПроизводство = Неопределено;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ПланПроизводства") Тогда
		//ЗаказВПроизводство = ДокументОснование.ДокументОснования;
		МассивЗаказовВПроизводство = ДокументОснование.РеквизитПланПоЗаказам.ВыгрузитьКолонку("Заказ");
		//МассивЗаказовВПроизводство.Добавить(ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
		ЗаказВПроизводство = ДокументОснование;
		МассивЗаказовВПроизводство.Добавить(ДокументОснование);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если МассивЗаказовВПроизводство.Количество()=0 тогда
		Возврат;
	КонецЕсли; 	

	
	//Если НЕ ЗначениеЗаполнено(ЗаказВПроизводство) тогда
	//	Возврат;
	//КонецЕсли; 	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
	|	вт_ОтчетПроизводстваТовары.Характеристика КАК Характеристика,
	|	СУММА(вт_ОтчетПроизводстваТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ТОВАРЫ
	|ИЗ
	|	Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
	|ГДЕ
	|	вт_ОтчетПроизводстваТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ОтчетПроизводстваТовары.Номенклатура,
	|	вт_ОтчетПроизводстваТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ЗаказВПроизводствоОстатки.Номенклатура КАК Номенклатура,
	|	вт_ЗаказВПроизводствоОстатки.ТребуемаяДата КАК ТребуемаяДата,
	|	вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства КАК ЗаказПроизводства,
	|	СУММА(вт_ЗаказВПроизводствоОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	вт_ЗаказВПроизводствоОстатки.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрНакопления.вт_ЗаказВПроизводство.Остатки(
	|			&ДатаОстатка,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ТОВАРЫ.Номенклатура КАК Номенклатура,
	|						ВТ_ТОВАРЫ.Характеристика КАК Характеристика
	|					ИЗ
	|						ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ)
	|				И Склад = &Склад
	|				И Организация = &Организация
	|				И ЗаказПроизводства В (&ЗаказПроизводства)) КАК вт_ЗаказВПроизводствоОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства,
	|	вт_ЗаказВПроизводствоОстатки.Номенклатура,
	|	вт_ЗаказВПроизводствоОстатки.ТребуемаяДата,
	|	вт_ЗаказВПроизводствоОстатки.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт_ЗаказВПроизводствоОстатки.ТребуемаяДата,
	|	вт_ЗаказВПроизводствоОстатки.Номенклатура,
	|	Характеристика";
	
	пМоментВремени = Новый МоментВремени(ЭтотОбъект.дата,ЭтотОбъект.Ссылка);
	//Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Склад", ЭтотОбъект.Склад);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация); 
	Запрос.УстановитьПараметр("ДатаОстатка",  пМоментВремени);
	Запрос.УстановитьПараметр("ЗаказПроизводства",  МассивЗаказовВПроизводство);
	Запрос.УстановитьПараметр("Ссылка",  Ссылка);
	
	ТаблицаВТВыпускПродукции = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВТЗаказыВПроизводство.СкопироватьКолонки();
	ДокументСсылка = ЭтотОбъект.Ссылка;	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаТоваровВНезакрытыхЗаказахПроизводства = РезультатЗапроса.Выгрузить();
		Для каждого СтрокаТовары Из ДокументСсылка.Товары Цикл
			пСтрокаТоварыКоличество = СтрокаТовары.Количество;
			ИндексСтроки = 0;
			КолвоСтрок   = ТаблицаТоваровВНезакрытыхЗаказахПроизводства.Количество();
			МассивСтрокОстатки = ТаблицаТоваровВНезакрытыхЗаказахПроизводства.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",СтрокаТовары.Номенклатура,СтрокаТовары.Характеристика));// [ИндексСтроки];
			
			Для Каждого СтрокаОстатки из  МассивСтрокОстатки Цикл
				Если СтрокаОстатки.КоличествоОстаток <= 0 Тогда //Возможно уже исчерпали
					Продолжить;
				КонецЕсли;	
				
				СтрокаВТВыпускПродукции = ТаблицаВТВыпускПродукции.Добавить();
				СтрокаВТВыпускПродукции.Период 		 	  = ДокументСсылка.Дата;                 
				СтрокаВТВыпускПродукции.ВидДвижения  	  = ВидДвиженияНакопления.Расход;
				СтрокаВТВыпускПродукции.Организация  	  = ДокументСсылка.Организация;
				СтрокаВТВыпускПродукции.Склад 		 	  = ДокументСсылка.Склад;
				СтрокаВТВыпускПродукции.Номенклатура 	  = СтрокаТовары.Номенклатура; 
				СтрокаВТВыпускПродукции.Характеристика 	  = СтрокаТовары.Характеристика;
				СтрокаВТВыпускПродукции.ЗаказПроизводства = СтрокаОстатки.ЗаказПроизводства; 		                
				СтрокаВТВыпускПродукции.ТребуемаяДата 	  = СтрокаОстатки.ТребуемаяДата;
				
				
				Если пСтрокаТоварыКоличество <= СтрокаОстатки.КоличествоОстаток Тогда
					СтрокаВТВыпускПродукции.Количество 		  = пСтрокаТоварыКоличество;
					СтрокаОстатки.КоличествоОстаток = СтрокаОстатки.КоличествоОстаток - пСтрокаТоварыКоличество;
					Прервать;
				Иначе
					СтрокаВТВыпускПродукции.Количество 		  = СтрокаОстатки.КоличествоОстаток;
					СтрокаОстатки.КоличествоОстаток = 0;
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		//Для заказов производства, которые ушли в 0, ставим статусы и для их оснований
		ЗапросСтатуса = Новый Запрос("ВЫБРАТЬ
		                             |	вт_СтатусыОснованийЗаказовВПроизводство.Период КАК Период,
		                             |	вт_СтатусыОснованийЗаказовВПроизводство.Основание КАК Основание,
		                             |	вт_СтатусыОснованийЗаказовВПроизводство.ЗаказВПроизводство КАК ЗаказВПроизводство,
		                             |	вт_СтатусыОснованийЗаказовВПроизводство.Статус КАК Статус
		                             |ИЗ
		                             |	РегистрСведений.вт_СтатусыОснованийЗаказовВПроизводство КАК вт_СтатусыОснованийЗаказовВПроизводство
		                             |ГДЕ
		                             |	вт_СтатусыОснованийЗаказовВПроизводство.Основание = &Основание
		                             |	И вт_СтатусыОснованийЗаказовВПроизводство.ЗаказВПроизводство = &ЗаказВПроизводство
		                             |	И вт_СтатусыОснованийЗаказовВПроизводство.Статус = &Статус");
		
		ЗапросСтатуса.УстановитьПараметр("Статус", Перечисления.вт_СтатусыПроизводства.Завершено);
		
		ДВижения.вт_СтатусыОснованийЗаказовВПроизводство.Записывать = Истина;
		ДвиженияСтатусы = ДВижения.вт_СтатусыОснованийЗаказовВПроизводство;
		
		ЗаписанныеСтатусыЗаказов = Новый Массив;
		
		Для Каждого СтрокаЗаказаВПроизводство из ТаблицаТоваровВНезакрытыхЗаказахПроизводства Цикл
			
			ЗаказВПроизводство = СтрокаЗаказаВПроизводство.ЗаказПроизводства;
			
			Если ТипЗнч(ЗаказВПроизводство)<>Тип("ДокументСсылка.вт_ЗаказВПроизводство") ТОгда
				Продолжить;
			КонецЕсли;
			
			Если ЗаписанныеСтатусыЗаказов.Найти(ЗаказВПроизводство) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ОбЗаказВПроизводство = ЗаказВПроизводство.ПолучитьОбъект();
			Если СтрокаЗаказаВПроизводство.КоличествоОстаток = 0 Тогда
				ОбЗаказВПроизводство.Статус=Перечисления.вт_СтатусыПроизводства.Завершено;
			Иначе
				ОбЗаказВПроизводство.Статус=Перечисления.вт_СтатусыПроизводства.ВПроизводстве;
			КонецЕсли;
			ОбЗаказВПроизводство.Записать(РежимЗаписиДокумента.Запись);
			
			Движения.вт_СтатусыЗаказовВПроизводство.Записывать=Истина;
			СтрокаНЗ = Движения.вт_СтатусыЗаказовВПроизводство.Добавить();
			СтрокаНЗ.ЗаказВПроизводство = ОбЗаказВПроизводство.Ссылка;
			СтрокаНЗ.Период = Дата;
			СтрокаНЗ.Статус =  ОбЗаказВПроизводство.Статус;
			
			ЗаписанныеСтатусыЗаказов.Добавить(ЗаказВПроизводство);
			
			Если НЕ ЗначениеЗаполнено(ЗаказВПроизводство.ДокументОснование) ТОгда
				Продолжить;
			КонецЕсли;
			
			ДатаЗаписи = ЭтотОбъект.Дата;
			
			СтрокаНЗ = ДвиженияСтатусы.Добавить();
			СтрокаНЗ.Период = ДатаЗаписи;
			СтрокаНЗ.Основание = ЗаказВПроизводство.ДокументОснование;
			СтрокаНЗ.ЗаказВПроизводство = ЗаказВПроизводство;
	
			Если СтрокаЗаказаВПроизводство.КоличествоОстаток = 0 Тогда
				СтрокаНЗ.Статус = Перечисления.вт_СтатусыПроизводства.Завершено;	
			Иначе
				СтрокаНЗ.Статус = Перечисления.вт_СтатусыПроизводства.ВПроизводстве;	
			КонецЕсли;	
			
			
			
			//НЗ.Записать(Истина);
			
			
		КонецЦикла;
		
		//Если ТаблицаТоваровВНезакрытыхЗаказахПроизводства.Итог("КоличествоОстаток") <= 0 И  ЗначениеЗаполнено(ЗаказВПроизводство) 
		//	И ТипЗнч(ЗаказВПроизводство)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") И ЗначениеЗаполнено(ЗаказВПроизводство.ДокументОснование) Тогда
		//	ДатаЗаписи = ТекущаяДата();
		//	
		//	НЗ = РегистрыСведений.вт_СтатусыОснованийЗаказовВПроизводство.СоздатьНаборЗаписей();
		//	НЗ.Отбор.период.Установить(ДатаЗаписи);
		//	//НЗ.Отбор.Основание.Установить(ДокументОснование.ДокументОснование);
		//	НЗ.Отбор.Основание.Установить(ЗаказВПроизводство.ДокументОснование);//ЕГОР
		//	
		//	СтрокаНЗ = НЗ.Добавить();
		//	СтрокаНЗ.Статус = Перечисления.вт_СтатусыПроизводства.Завершено;
		//	//СтрокаНЗ.Основание = ДокументОснование.ДокументОснование;			
		//	СтрокаНЗ.Основание = ЗаказВПроизводство.ДокументОснование;//ЕГОР 
		//	СтрокаНЗ.ЗаказВПроизводство = ЗаказВПроизводство;
		//	СтрокаНЗ.период = ДатаЗаписи;
		//	НЗ.Записать(Истина);
		//	
		//КонецЕсли;	
		
	КонецЕсли;	
	
	
	Если Отказ ИЛИ ТаблицаВТВыпускПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вт_ЗаказВПроизводство.Записывать = Истина;
	Движения.вт_ЗаказВПроизводство.Загрузить(ТаблицаВТВыпускПродукции);
	                                      
КонецПроцедуры

Процедура ЗакрытьСтатусЗаказКлиента(пСсылкаЗаказ)
	//Если введено на основании заказа в производство
	Запрос =  Новый Запрос("ВЫБРАТЬ
	|	СУММА(вт_ЗаказВПроизводствоОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства
	|ИЗ
	|	РегистрНакопления.вт_ЗаказВПроизводство.Остатки(&Период, ЗаказПроизводства = &ЗаказПроизводства) КАК вт_ЗаказВПроизводствоОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства");
	
	Запрос.УстановитьПараметр("Период", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ЗаказПроизводства", пСсылкаЗаказ);
	Выборка = Запрос.Выполнить().Выбрать();
	ЗакрытьЗаказ = Ложь;
	ОсталосьПоЗаказу = 0;
	Если Выборка.Следующий() Тогда
		Если Выборка.КоличествоОстаток=0 ТОгда
			ЗакрытьЗаказ = Истина;	
		ИНаче
			ОсталосьПоЗаказу = Выборка.КоличествоОстаток;
		КонецЕсли;	
	Иначе
		ЗакрытьЗаказ = Истина;
	КонецЕсли;
	
	Если ЗакрытьЗаказ Тогда
		ОбЗаказ = пСсылкаЗаказ.ПолучитьОбъект();
		ОбЗаказ.Статус = Перечисления.вт_СтатусыПроизводства.Завершено;
		ОбЗаказ.Записать();
	ИначеЕсли ОсталосьПоЗаказу>0 Тогда	 
		ОбЗаказ = пСсылкаЗаказ.ПолучитьОбъект();
		ОбЗаказ.Статус = Перечисления.вт_СтатусыПроизводства.ВПроизводстве;
		ОбЗаказ.Записать();
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ЗаполнитьРегистрВТВыпускПродукции(ДополнительныеСвойства, Движения, Отказ)
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВТВыпускПродукции;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вт_ВыпускПродукции.Записывать = Истина;
	Движения.вт_ВыпускПродукции.Загрузить(Таблица);
	
КонецПроцедуры	

Процедура ЗаполнитьРегистрВТСырьеВыпускаПродукции(ДополнительныеСвойства, Движения, Отказ)
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВТСырьеВыпускаПродукции;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вт_СырьеВыпускаПродукции.Записывать = Истина;
	Движения.вт_СырьеВыпускаПродукции.Загрузить(Таблица);
	
КонецПроцедуры	

Процедура ОтразитьОтходыПроизводства(ДополнительныеСвойства,Движения, Отказ)
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОтходов;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Движения.вт_ОтходыПроизводства.Записывать=Истина;
	Движения.вт_ОтходыПроизводства.Загрузить(Таблица);
КонецПроцедуры	

Процедура ОтразитьБракПроизводства(ДополнительныеСвойства,Движения, Отказ)
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБрака;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Движения.вт_БракПроизводства.Записывать=Истина;
	Движения.вт_БракПроизводства.Загрузить(Таблица);
КонецПроцедуры	

Процедура ОтразитьВыработкуСотрудников(Движения, Отказ)
	Движения.вт_ВыработкаСотрудников.Записывать=Истина;
	Движения.вт_ВыработкаСотрудников.Очистить();
	ТаблСумма = ЭтотОбъект.Сотрудники.Выгрузить();
	ТаблСумма.Свернуть("Сотрудник, РазрезНачисления","Сумма");
	
	Для Каждого СтрокаСуммы из ТаблСумма Цикл
		СтрокаДвиж = Движения.вт_ВыработкаСотрудников.Добавить();
		СтрокаДвиж.Период = ЭтотОбъект.Дата;
		СтрокаДвиж.Сотрудник = СтрокаСуммы.Сотрудник;
		СтрокаДвиж.Основание = СтрокаСуммы.РазрезНачисления;
		СтрокаДвиж.Сумма = СтрокаСуммы.Сумма; 
		СтрокаДвиж.Организация = ЭтотОбъект.Организация;
		СтрокаДвиж.Подразделение = ЭтотОбъект.Подразделение;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОтразитьВыпускПоСменам(ДополнительныеСвойства, Движения, Отказ)


	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыпускПоСменам;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вт_ВыпускПроукцииПоСменам.Записывать = Истина;
	Движения.вт_ВыпускПроукцииПоСменам.Загрузить(Таблица);

КонецПроцедуры	

Процедура ЗакрытьЗаказВПроизводство()
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) и ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
		   ЗакрытьСтатусЗаказКлиента(ЭтотОбъект.ДокументОснование);
		   
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) и ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ПланПроизводства") Тогда
		
		ТаблГотовыеТовары = ЭтотОбъект.Товары.Выгрузить();
		ТаблГотовыеТовары.Свернуть("вт_Заказ");
		
		Для Каждого строкаТоварыЗаказ из ТаблГотовыеТовары Цикл
			Если ЗначениеЗаполнено(строкаТоварыЗаказ.вт_Заказ.ДокументОснование) Тогда
				ЗакрытьСтатусЗаказКлиента(строкаТоварыЗаказ.вт_Заказ.ДокументОснование);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

//Закрыть записи регистра план производства
Процедура ЗакрытьПланПроизводства()
	вЗаказПроизводства = документы.вт_ЗаказВПроизводство.ПустаяСсылка();
	МассивЗаказовПроизводства = Новый Массив;
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) ТОгда
		Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
			вЗаказПроизводства = ДокументОснование;
			МассивЗаказовПроизводства.Добавить(вЗаказПроизводства);
		ИНачеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ПланПроизводства") Тогда 	
			вЗаказПроизводства =  ДокументОснование.ДокументОснования;
			МассивЗаказовПроизводства = ДокументОснование.РеквизитПланПоЗаказам.ВыгрузитьКолонку("Заказ");
		КонецЕсли;
		
	КонецЕсли;
	
   Запрос = Новый Запрос("ВЫБРАТЬ
                         |	ВТ_ТОВАРЫ.Номенклатура,
						 |	ВТ_ТОВАРЫ.Характеристика,
						 |	ВТ_ТОВАРЫ.Количество
                         |ПОМЕСТИТЬ ВТ_ТОВАРЫ
                         |ИЗ
                         |	&ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |	вт_ПланПроизводстваТоваровОстатки.Организация,
                         |	вт_ПланПроизводстваТоваровОстатки.ЗаказПроизводства,
                         |	вт_ПланПроизводстваТоваровОстатки.Номенклатура,
                         |	вт_ПланПроизводстваТоваровОстатки.Характеристика,
                         |	вт_ПланПроизводстваТоваровОстатки.КоличествоОстаток,
						 |	ВТ_ТОВАРЫ.Количество КАК Количество
                         |ИЗ
                         |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ПланПроизводстваТоваров.Остатки(
                         |				&МоментОстатка,
                         |				ЗаказПроизводства В (&ЗаказПроизводства)
                         |					И Организация = &Организация) КАК вт_ПланПроизводстваТоваровОстатки
                         |		ПО ВТ_ТОВАРЫ.Номенклатура = вт_ПланПроизводстваТоваровОстатки.Номенклатура
						 |		 И ВТ_ТОВАРЫ.Характеристика = вт_ПланПроизводстваТоваровОстатки.Характеристика");	
						  
						 Запрос.УстановитьПараметр("ВТ_ТОВАРЫ",ЭтотОбъект.Товары);
						 Запрос.УстановитьПараметр("ЗаказПроизводства",МассивЗаказовПроизводства);
						 Запрос.УстановитьПараметр("Организация",ЭтотОбъект.Организация);
						 Запрос.УстановитьПараметр("МоментОстатка",Новый МоментВремени(ЭтотОбъект.Дата-1));
						 ВыборкаОстатки = Запрос.Выполнить().Выбрать();
						 Пока ВыборкаОстатки.Следующий() Цикл
							 Если ВыборкаОстатки.КоличествоОстаток<=0 Тогда
								 Продолжить;
							 КонецЕсли;
							 
							 СтрокаДвижения = Движения.вт_ПланПроизводстваТоваров.Добавить();
							 СтрокаДвижения.ВидДвижения=ВидДвиженияНакопления.Расход;
							 СтрокаДвижения.ЗаказПроизводства = ВыборкаОстатки.ЗаказПроизводства;
							 СтрокаДвижения.Количество = ?(ВыборкаОстатки.Количество>ВыборкаОстатки.КоличествоОстаток,ВыборкаОстатки.КоличествоОстаток,ВыборкаОстатки.Количество);
							 СтрокаДвижения.Номенклатура =ВыборкаОстатки.номенклатура;
							 СтрокаДвижения.Характеристика =ВыборкаОстатки.Характеристика;
							 СтрокаДвижения.Организация = ЭтотОбъект.Организация;
							 СтрокаДвижения.Период = ЭтотОбъект.Дата;
						 КонецЦикла;
						 Движения.вт_ПланПроизводстваТоваров.Записывать = Истина;
						 
КонецПроцедуры

Процедура ОтразитьИспользованиеДавальческогоСырья()
	Если ВидОперацииПроизводства=перечисления.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства Тогда
		
		 //При этом виде операции нужно списать сырье по регистру вт_ДавальческоеСырьеПереданное
		 //т.е. это мы отражаем, что производитель использовал наше сырье
		 
		 ТаблСырье = вт_ПроизводствоСырье.Выгрузить();
		 ТаблСырье.Свернуть("Номенклатура,Характеристика","Количество");
		 
		 Движения.вт_ДавальческоеСырьеПереданное.Записывать = Истина;
		 Для Каждого ТекСтрокаТовары Из ТаблСырье Цикл
			 Движение = Движения.вт_ДавальческоеСырьеПереданное.Добавить();
			 Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			 Движение.Период = Дата;
			 Движение.Партнер = Партнер;
			 Движение.Контрагент = Контрагент;
			 Движение.Договор = ДоговорКонтрагента;
			 Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			 Движение.Характеристика = ТекСтрокаТовары.Характеристика;
			 Движение.Количество = ТекСтрокаТовары.Количество;
		 КонецЦикла;
		 
	 ИначеЕсли ВидОперацииПроизводства=перечисления.вт_ВидыОперацийПроизводства.ПроизводствоДляЗаказчика Тогда
		 ТаблСырье = вт_ПроизводствоСырье.Выгрузить();
		 ТаблСырье.Свернуть("Номенклатура,Характеристика","Количество");
		 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Характеристика КАК Характеристика,
		|	СУММА(вт_ОтчетПроизводствавт_ПроизводствоСырье.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_СЫРЬЕ
		|ИЗ
		|	Документ.вт_ОтчетПроизводства.вт_ПроизводствоСырье КАК вт_ОтчетПроизводствавт_ПроизводствоСырье
		|ГДЕ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(вт_ДавальческоеСырьеПолученноеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	вт_ДавальческоеСырьеПолученноеОстатки.Номенклатура КАК Номенклатура,
		|	вт_ДавальческоеСырьеПолученноеОстатки.Характеристика КАК Характеристика,
		|	вт_ДавальческоеСырьеПолученноеОстатки.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ВТ_ОСТАТКИ
		|ИЗ
		|	РегистрНакопления.вт_ДавальческоеСырьеПолученное.Остатки(
		|			&Момент,
		|			Партнер = &Партнер
		|				И Контрагент = &Контрагент
		|				И Договор = &Договор
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ВТ_СЫРЬЕ.Номенклатура КАК Номенклатура,
		|						ВТ_СЫРЬЕ.Характеристика КАК Характеристика
		|					ИЗ
		|						ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ)) КАК вт_ДавальческоеСырьеПолученноеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ДавальческоеСырьеПолученноеОстатки.Номенклатура,
		|	вт_ДавальческоеСырьеПолученноеОстатки.Характеристика,
		|	вт_ДавальческоеСырьеПолученноеОстатки.СуммаОстаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОСТАТКИ.Номенклатура КАК Номенклатура,
		|	ВТ_ОСТАТКИ.Характеристика КАК Характеристика,
		|	ВТ_ОСТАТКИ.КоличествоОстаток КАК КоличествоОстаток,
		|	ВТ_СЫРЬЕ.Количество КАК Количество,
		|	ВТ_ОСТАТКИ.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	ВТ_ОСТАТКИ КАК ВТ_ОСТАТКИ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ
		|		ПО ВТ_ОСТАТКИ.Номенклатура = ВТ_СЫРЬЕ.Номенклатура
		|			И ВТ_ОСТАТКИ.Характеристика = ВТ_СЫРЬЕ.Характеристика";
	
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 Движения.вт_ДавальческоеСырьеПолученное.Записывать = Истина;
	 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.вт_ДавальческоеСырьеПолученное.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Партнер = Партнер;
		Движение.Контрагент = Контрагент;
		Движение.Договор = ДоговорКонтрагента;
		Движение.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		Движение.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
		Движение.Количество = МИН(ВыборкаДетальныеЗаписи.КоличествоОстаток,ВыборкаДетальныеЗаписи.Количество);
		СуммаСписания = ?(ВыборкаДетальныеЗаписи.КоличествоОстаток = Движение.Количество
							,ВыборкаДетальныеЗаписи.СуммаОстаток
							, Движение.Количество * ВыборкаДетальныеЗаписи.СуммаОстаток / ВыборкаДетальныеЗаписи.КоличествоОстаток);
		Движение.Сумма      = СуммаСписания;
	КонецЦикла;
	
		
		 
		 
	 КонецЕсли;	
КонецПроцедуры	

Процедура СформироватьПриходОтходов(Движения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан,
	|	вт_ОтчетПроизводствавт_БракДробленка.Дробленка КАК Дробленка,
	|	вт_ОтчетПроизводствавт_БракДробленка.Количество КАК Количество,
	|	вт_ОтчетПроизводствавт_БракДробленка.ГотоваяПродукция КАК ГотоваяПродукция,
	|	вт_ОтчетПроизводствавт_БракДробленка.КлючСвязиСтроки КАК КлючСвязиСтроки,
	|	вт_ОтчетПроизводствавт_БракДробленка.Характеристика КАК Характеристика,
	|	вт_ОтчетПроизводствавт_БракДробленка.Серия КАК Серия
	|ИЗ
	|	Документ.вт_ОтчетПроизводства.вт_БракДробленка КАК вт_ОтчетПроизводствавт_БракДробленка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
	|		ПО вт_ОтчетПроизводствавт_БракДробленка.Ссылка = вт_ОтчетПроизводстваТовары.Ссылка
	|			И вт_ОтчетПроизводствавт_БракДробленка.ГотоваяПродукция = вт_ОтчетПроизводстваТовары.Номенклатура
	|			И вт_ОтчетПроизводствавт_БракДробленка.КлючСвязиСтроки = вт_ОтчетПроизводстваТовары.КодСтроки
	|ГДЕ
	|	вт_ОтчетПроизводствавт_БракДробленка.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	
	ТаблОтходы = Запрос.Выполнить().Выгрузить(); 
	ТаблОтходы.Свернуть("ГотоваяПродукция, Дробленка, Характеристика, Серия, КлючСвязиСтроки","Количество, КоличествоПлан");
	
	
	ТаблСырье = ЭтотОбъект.вт_ПроизводствоСырье.Выгрузить(,"ГотоваяПродукция, Номенклатура, Характеристика, Серия, Количество, КлючСвязиСтроки");
	
	ТаблСырье.Свернуть("ГотоваяПродукция, Номенклатура, Характеристика, Серия, КлючСвязиСтроки","Количество");
	
	ТаблСерии = ЭтотОбъект.Серии.Выгрузить();
	ТаблСерии.Свернуть("Номенклатура, Характеристика, Серия, КлючСвязиСтроки, Назначение", "Количество");
	
	
	НомерСтрокаГП = 0; 
	
	
	ОбрЦен = Обработки.вт_РасчетыПлановойСебестоимости.Создать();
	ДокПрих = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
	ДокПрих.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокПрих.АналитикаДоходов=Константы.вт_СтатьяДоходовПроизводство.Получить();
	ДокПрих.СтатьяДоходов=Константы.вт_СтатьяДоходовПроизводство.Получить();
	ДокПрих.Дата=ЭтотОбъект.Дата;
	ДокПрих.Организация = ЭтотОбъект.Организация;
	ДокПрих.Склад = ЭтотОбъект.Склад;
	
	
	Для Каждого СтрокаОтх из ТаблОтходы Цикл
		
		Если  СтрокаОтх.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерСтрокаГП = НомерСтрокаГП + 1; 
		пГотПрод = СтрокаОтх.ГотоваяПродукция;
		Дробленка = СтрокаОтх.Дробленка;
		пГПКолПродукции = СтрокаОтх.КоличествоПлан;
		пГПКолОтходов = СтрокаОтх.Количество;
		
		ОтборГП = Новый Структура("ГотоваяПродукция, КлючСвязиСтроки",пГотПрод, СтрокаОтх.КлючСвязиСтроки);
		СырьеПоГП = ТаблСырье.НайтиСтроки(ОтборГП);
		
		
		//МассивНоменклатур = Новый  Массив;
		
		МассивН = Новый Массив;
		МассивН.Добавить(Тип("СправочникСсылка.Номенклатура"));
		ОписаниеТиповН = Новый ОписаниеТипов(МассивН);
		
		МассивХ = Новый Массив;
		МассивХ.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ОписаниеТиповХ = Новый ОписаниеТипов(МассивХ);
		
		ТЗСырья = Новый ТаблицаЗначений;
		ТЗСырья.Колонки.Добавить("Номенклатура",ОписаниеТиповН);
		ТЗСырья.Колонки.Добавить("Характеристика",ОписаниеТиповХ);
		
		
		для Каждого СтрокаСырья из СырьеПоГП Цикл
			СтрокаТЗСырья = ТЗСырья.Добавить();
			СтрокаТЗСырья.Номенклатура   = СтрокаСырья.Номенклатура;
			СтрокаТЗСырья.Характеристика = СтрокаСырья.Характеристика;
		КонецЦикла;	
		
		ТаблЦенСырья = ОбрЦен.ЗаполнитьЦеныПоВсемВариантам(ТЗСырья,ЭтотОбъект.Дата,ЭтотОбъект.Организация,Константы.вт_ВидЦенПлановойСебестоимости.Получить());
		СтоимостьСырья = 0;
		Для Каждого СтрокаЦены из ТаблЦенСырья Цикл
			Для Каждого СтрокаСырье  ИЗ СырьеПоГП  Цикл
				Если СтрокаСырье.Номенклатура = СтрокаСырье.Номенклатура Тогда
					СтоимостьСырья = СтоимостьСырья + СтрокаЦены.Цена * СтрокаСырье.Количество;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;		
		
		
		
		//Если использется учет по сериям для отходов
		Если СтрокаОтх.Дробленка.ВидНоменклатуры.ИспользоватьСерии Тогда 			
			ОтборСерииОтходы = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",
			СтрокаОтх.Дробленка,
			СтрокаОтх.Характеристика, 
			СтрокаОтх.КлючСвязиСтроки);
			СерииПоОтходы = ТаблСерии.НайтиСтроки(ОтборСерииОтходы);  		
			//Считаем общее количество по сериям данного отхода в ТЧ Серии
			ОтхКоличествоПоСериям = 0;
			Для Каждого СерияОтх Из СерииПоОтходы Цикл		
				ОтхКоличествоПоСериям = ОтхКоличествоПоСериям + СерияОтх.Количество; 
			КонецЦикла;	
			
			Для Каждого СерияОтх Из СерииПоОтходы Цикл				
				СтрокаПрихТовары = ДокПрих.Товары.Добавить();
				СтрокаПрихТовары.Номенклатура =  СтрокаОтх.Дробленка;
				СтрокаПрихТовары.Характеристика = СтрокаОтх.Характеристика;
				СтрокаПрихТовары.Серия = СерияОтх.Серия;
				СтрокаПрихТовары.Количество   =  ?(ОтхКоличествоПоСериям = 0, СтрокаОтх.Количество, 
				СерияОтх.Количество/ОтхКоличествоПоСериям * СтрокаОтх.Количество); 		
				СтрокаПрихТовары.СтатусУказанияСерий = вт_ПолучитьСтатусУказанияСерий(СтрокаПрихТовары.Номенклатура);
				//СтрокаПрихТовары.СтатусУказанияСерий = 1;
				
				СтрокаПрихТовары.Цена = СтоимостьСырья / ОтхКоличествоПоСериям;
				СтрокаПрихТовары.Сумма =  СтрокаПрихТовары.Цена * СтрокаПрихТовары.Количество;
			КонецЦикла;
		Иначе
			СтрокаПрихТовары = ДокПрих.Товары.Добавить();
			СтрокаПрихТовары.Номенклатура =  СтрокаОтх.Дробленка;
			СтрокаПрихТовары.Характеристика = СтрокаОтх.Характеристика;
			СтрокаПрихТовары.Серия = СтрокаОтх.Серия;
			СтрокаПрихТовары.Количество   = СтрокаОтх.Количество; 			
			
			СтрокаПрихТовары.Цена = СтоимостьСырья / СтрокаПрихТовары.Количество;
			СтрокаПрихТовары.Сумма =  СтоимостьСырья;
		КонецЕсли;
		
		
		
		//++ 10.06.2019
		////   При попытке указания политики учета с типом "Управление остатками серий" 
		////выдается ограничение: 
		////На складе не используется ордерная схема при отражении излишков недостач и порчи, 
		////поэтому возможно только справочное указание серий.
		////
		////То есть, не удается включить применение политики без включения ордерной схемы.
		////Поэтому используем тип Политики "Справочное указание серий", и руками ставим СтатусУказанияСерий 		
		//-- 10.06.2019
		
					
		
		
		
	КонецЦикла;
	//++ 10.06.2019
	////   При попытке указания политики учета с типом "Управление остатками серий" 
	////выдается ограничение: 
	////На складе не используется ордерная схема при отражении излишков недостач и порчи, поэтому возможно только справочное указание серий.
	////
	////То есть, не удается включить применение политики без включения ордерной схемы.
	////Поэтому используем тип Политики "Справочное указание серий", и руками ставим СтатусУказанияСерий 
	//мПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокПрих,Документы.ОприходованиеИзлишковТоваров);
	//НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокПрих,мПараметрыУказанияСерий);
	//-- 10.06.2019
	ДокПрих.Записать(РежимЗаписиДокумента.Запись);
	
	Попытка
		ДокПрих.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	Если НЕ ДокПрих.Проведен Тогда
		 УдалитьДокументСборка(ДокПрих);
		Возврат;
	КонецЕсли;	
	
	ДвижДокСборка = ДокПрих.Движения;
	
	МД_ДокСборка = ДокПрих.метаданные().Движения;
	МД_ЭтотОбъект = ЭтотОбъект.метаданные().Движения;
	МД_Массив = Новый Массив;
	Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
		Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
			Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
				МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	ДвижСебестоимость = новый ТаблицаЗначений;
	Для каждого ЭлементМД_Массив из МД_Массив цикл
		ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
		ДвижСебестоимость.Колонки.Удалить("Регистратор");
		
		Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
			Движения[ЭлементМД_Массив].Записывать = Истина;
			НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
		КонецЦикла;
		
	КонецЦикла;
	
	
	Попытка  
		ДокПрих.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	УдалитьДокументСборка(ДокПрих);
	
КонецПроцедуры

Функция вт_ПолучитьСтатусУказанияСерий(мНоменклатура) Экспорт
	
	/// заменена на типовую !!!
	
	
	мПолитика = мНоменклатура.ВидНоменклатуры.ПолитикаУчетаСерий.ТипПолитики;
	Если НЕ ЗначениеЗаполнено(мПолитика) Тогда
		мСтатус = 0;
	ИначеЕсли мПолитика = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий Тогда
		мСтатус = 2;
	ИначеЕсли мПолитика = Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий Тогда
		мСтатус = 4;
	Иначе 
		мСтатус = 6;
	КонецЕсли;
	Возврат мСтатус;
//Из комментария к процедуре НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий:

// Процедура заполняет статусы указания серий в строках ТЧ товары (комментарий содержит описание подсистемы серий).
//
// Возможные статусы указания серий:
//
// -1 - серии указаны в таблице уточнения (нет картинки)
// 0 - серии указывать не требуется (нет картинки)
// первый указанный статус - количество по сериям не совпадает с количеством товаров или серии не указаны (красная картинка)
// второй указанный статус - количество по сериям совпадает с количеством товаров (зеленая картинка)
// третий указанный статус - серии не указаны, их можно указывать, а можно и не указывать (синяя картинка)
// 1,2,21 - серии указываются справочно
// 3,4,23 - по сериям учитываются остатки, серии указываются по факту отбора
// 5,6,25 - по сериям учитываются остатки, серии указываются при планировании отбора,
// заполняются по FEFO (используются только в документах отгрузки товаров)
// 7,8,27 - по сериям учитываются остатки, серии указываются при планировании отбора
// 9,10,11 - по сериям учитываются остатки, серии указываются при планировании отгрузки,
// по сериям формируются движения по регистру ТоварыКОтгрузке (как при приходе, так и при расходе)
// 13,14,15 - учитываются также, как 9,10,11 + по сериям учитывается себестоимость
// 17,18,28 - по сериям учитываются товары у партнеров (товары в пути, неотфактурованные поставки).
	
Конецфункции

Процедура СформироватьДвиженияСебестоимостьОтходовИзДругихДвижений(Движения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вт_ОтчетПроизводстваТовары.Количество КАК КоличествоГП,
	|	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан,
	|	вт_ОтчетПроизводствавт_БракДробленка.Дробленка КАК Дробленка,
	|	вт_ОтчетПроизводствавт_БракДробленка.Количество КАК Количество,
	|	вт_ОтчетПроизводствавт_БракДробленка.ГотоваяПродукция КАК ГотоваяПродукция,
	|	вт_ОтчетПроизводствавт_БракДробленка.КлючСвязиСтроки КАК КлючСвязиСтроки
	|ИЗ
	|	Документ.вт_ОтчетПроизводства.вт_БракДробленка КАК вт_ОтчетПроизводствавт_БракДробленка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ОтчетПроизводства.Товары КАК вт_ОтчетПроизводстваТовары
	|		ПО вт_ОтчетПроизводствавт_БракДробленка.Ссылка = вт_ОтчетПроизводстваТовары.Ссылка
	|			И вт_ОтчетПроизводствавт_БракДробленка.ГотоваяПродукция = вт_ОтчетПроизводстваТовары.Номенклатура
	|			И вт_ОтчетПроизводствавт_БракДробленка.КлючСвязиСтроки = вт_ОтчетПроизводстваТовары.КодСтроки
	|ГДЕ
	|	вт_ОтчетПроизводствавт_БракДробленка.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	
	ТаблОтходы = Запрос.Выполнить().Выгрузить(); 
	ТаблОтходы.Свернуть("ГотоваяПродукция, Дробленка, КлючСвязиСтроки,КоличествоГП, КоличествоПлан","Количество");
	
	
	ТаблСырье = ЭтотОбъект.вт_ПроизводствоСырье.Выгрузить(,"ГотоваяПродукция, Номенклатура, Характеристика, Серия, Количество, КлючСвязиСтроки");
	ТаблСырье.Свернуть("ГотоваяПродукция, Номенклатура, Характеристика, Серия, КлючСвязиСтроки","Количество");
	
	ТаблСерии = ЭтотОбъект.Серии.Выгрузить();
	ТаблСерии.Свернуть("Номенклатура, Характеристика, Серия, КлючСвязиСтроки, Назначение", "Количество");
	
	
	
	НомерСтрокаГП = 0; 
	
	
	Для Каждого СтрокаОтх из ТаблОтходы Цикл
		
		Если  СтрокаОтх.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерСтрокаГП = НомерСтрокаГП + 1; 
		пГотПрод 		= СтрокаОтх.ГотоваяПродукция;
		Дробленка 		= СтрокаОтх.Дробленка;
		пГПКол     		= СтрокаОтх.КоличествоГП;
		пГПКолПродукции = СтрокаОтх.КоличествоПлан;
		пГПКолБрак      = пГПКолПродукции - пГПКол;
		пГПКолОтходов   = СтрокаОтх.Количество;
		
		ОтборГП = Новый Структура("ГотоваяПродукция, КлючСвязиСтроки",пГотПрод, СтрокаОтх.КлючСвязиСтроки);
		СырьеПоГП = ТаблСырье.НайтиСтроки(ОтборГП);
		
		пГПОтходы  = 0;
		ОтходыПоГП = вт_БракДробленка.НайтиСтроки(ОтборГП);
		Для Каждого СтрокаОтходовПоГП из ОтходыПоГП Цикл
			пГПОтходы = пГПОтходы +  СтрокаОтходовПоГП.Количество;
		КонецЦикла;		
		
		всегоПриходНаСклад = пГПКол + пГПКолБрак + пГПОтходы;
		
		гпГпПроцент     = ОКР(пГПКол     / всегоПриходНаСклад,3);
		гпБракПроцент   = ОКР(пГПКолБрак / всегоПриходНаСклад,3);
		гпОтходыПроцент = ОКР(пГПОтходы  / всегоПриходНаСклад,3);		
		
		ДокСборка = Документы.СборкаТоваров.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ДокСборка,ЭтотОбъект,"Организация,Дата,Склад");
		ДокСборка.Номенклатура = ?(ЗначениеЗаполнено(Дробленка),Дробленка,пГотПрод);
		ДокСборка.Количество   = пГПКолОтходов;
		
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		ДокСборка.Комментарий = Строка(Ссылка);  
//		ДокСборка.СборкаПодДеятельность = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;

		ДокСборка.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.СборкаТоваров;
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		
		ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(ДокСборка);
		УчетНДСКэшированныеЗначенияПараметров = Неопределено;	
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			ДокСборка.СборкаПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
		
			Если ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.ПроизводствоДляЗаказчика 
				ИЛИ
				ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.СобственноеПроизводство
				Тогда
				//Только если мы делаем производство для заказчика, значит используем сырье со склада
				для Каждого СтрокаСырья из СырьеПоГП Цикл
					СтрокаТовара = ДокСборка.Товары.Добавить();
					СтрокаТовара.Количество =  СтрокаСырья.Количество * гпОтходыПроцент;//сырье берем пропорционально доле отходов пГПКолОтходов / пГПКолПродукции; //Сырье под брак списываем как бы пропорционально количеству брака от общего числа
					СтрокаТовара.Номенклатура =  СтрокаСырья.Номенклатура;
					СтрокаТовара.Характеристика =  СтрокаСырья.Характеристика;
					
					
					//++14.06.2019 
					//СтрокаТовара.СтатусУказанияСерий = 1;
					СтрокаТовара.СтатусУказанияСерий = вт_ПолучитьСтатусУказанияСерий(СтрокаТовара.Номенклатура);
					ОтборСерииСырье = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",
					СтрокаТовара.Номенклатура,
					СтрокаТовара.Характеристика, 
					СтрокаОтх.КлючСвязиСтроки);
					СерииПоСырье = ТаблСерии.НайтиСтроки(ОтборСерииСырье);
					
					Для Каждого мСерия из СерииПоСырье Цикл			
						НовСтрокаСерии = ДокСборка.Серии.Добавить();	
						НовСтрокаСерии.Номенклатура = мСерия.Номенклатура;
						НовСтрокаСерии.Характеристика = мСерия.Характеристика;
						НовСтрокаСерии.Серия = мСерия.Серия;
						НовСтрокаСерии.Количество = ?(СтрокаСырья.Количество=0,0,
						мСерия.Количество*СтрокаТовара.Количество/СтрокаСырья.Количество);					
					КонецЦикла;	 					
					//--14.06.2019
				КонецЦикла;	
			КонецЕсли;
			
		ДокСборка.Записать(РежимЗаписиДокумента.Запись);
		
		Попытка
			ДокСборка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;	
		
		Если НЕ ДокСборка.Проведен Тогда
			УдалитьДокументСборка(ДокСборка);
			Продолжить;
		КонецЕсли;
		
		ДвижДокСборка = ДокСборка.Движения;
		
		МД_ДокСборка = ДокСборка.метаданные().Движения;
		МД_ЭтотОбъект = ЭтотОбъект.метаданные().Движения;
		МД_Массив = Новый Массив;
		Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
			Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
				Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
					МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		ДвижСебестоимость = новый ТаблицаЗначений;
		Для каждого ЭлементМД_Массив из МД_Массив цикл
			
			ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
			ДвижСебестоимость.Колонки.Удалить("Регистратор");
			
			//Если НомерСтрокаГП = 1 Тогда
			//	Движения[ЭлементМД_Массив].Записывать = Истина;
			//	Движения[ЭлементМД_Массив].Загрузить(ДвижСебестоимость);
			//Иначе
			Движения[ЭлементМД_Массив].Записывать = Истина;
			Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
				
				НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
				
				Если ( ЭлементМД_Массив="СебестоимостьТоваров" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" ) 
					И НоваяСтрокаДвижСебестоимость.Партия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.Партия = ЭтотОбъект.Ссылка;
				ИначеЕсли ( ЭлементМД_Массив="СебестоимостьТоваров"
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" )
					И НоваяСтрокаДвижСебестоимость.КорПартия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.КорПартия = ЭтотОбъект.Ссылка;	
				ИначеЕсли ЭлементМД_Массив="ТоварыКОтгрузке" И НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ЭтотОбъект.Ссылка;	 
				КонецЕсли;	
			КонецЦикла;
			
			//КонецЕсли;
			
		КонецЦикла;		
		//МД_ДокСборка = ДокСборка.метаданные().Движения;
		//МД_ЭтотОбъект = ЭтотОбъект.метаданные().Движения;
		//МД_Массив = Новый Массив;
		//Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
		//	Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
		//		Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
		//			 МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
		//		КонецЕсли;
		//	КонецЦикла;	
		//КонецЦикла;
		//ДвижСебестоимость = новый ТаблицаЗначений;
		//Для каждого ЭлементМД_Массив из МД_Массив цикл
		//	ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
		//	ДвижСебестоимость.Колонки.Удалить("Регистратор");
		//	
		//	Если  ЭлементМД_Массив="ТоварыНаСкладах" ИЛИ ЭлементМД_Массив="СвободныеОстатки" ИЛИ ЭлементМД_Массив="ТоварыОрганизаций" Тогда
		//		МассивСтрок = ДвижСебестоимость.НайтиСтроки(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
		//		Для Каждого СтрокаДвижения из МассивСтрок Цикл 
		//			ДвижСебестоимость.Удалить(СтрокаДвижения);
		//		КонецЦикла;	
		//	ИначеЕсли  ЭлементМД_Массив="ДвиженияНоменклатураНоменклатура" Тогда
		//		    ДвижСебестоимость.Очистить();
		//	КонецЕсли;	
		//		
		//	//Здесь мы закинем примерную оценочную себестоимость сырья и сформируем себестоимость отходов
		//	Если ЭлементМД_Массив="СебестоимостьТоваров" тогда
		//		
		//		МассивНоменклатур = Новый Массив; //Собираем номенклатуру сырья, что бы сделать оценку стоимости
		//		Для Каждого СтрокаДвиж из  ДвижСебестоимость Цикл
		//			Если СтрокаДвиж.ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
		//				Продолжить;
		//			КонецЕсли;
		//			
		//			Номенкл = СтрокаДвиж.АналитикаУчетаНоменклатуры.Номенклатура;
		//			Если МассивНоменклатур.Найти(Номенкл) = Неопределено Тогда
		//				МассивНоменклатур.Добавить(Номенкл);
		//			КонецЕсли;
		//			
		//		КонецЦикла;
		//		
		//		//Делаем расчет стоимости по регистру
		//		Обр = Обработки.вт_РасчетыПлановойСебестоимости.Создать();
		//		ТаблЦен = Обр.ЗаполнитьЦеныПоВсемВариантам(МассивНоменклатур,ЭтотОбъект.Дата,ЭтотОбъект.Организация,Константы.вт_ВидЦенПлановойСебестоимости.Получить());
		//		Для Каждого СтрокаЦены из ТаблЦен Цикл
		//			Для Каждого ЭлементМассивСебестоимость из ДвижСебестоимость Цикл
		//				Если ЭлементМассивСебестоимость.АналитикаУчетаНоменклатуры.Номенклатура = СтрокаЦены.Номенклатура Тогда
		//					ЭлементМассивСебестоимость.Стоимость = СтрокаЦены.Цена * ЭлементМассивСебестоимость.Количество;
		//					ЭлементМассивСебестоимость.СтоимостьБезНДС = ЭлементМассивСебестоимость.Стоимость;
		//					//ЭлементМассивСебестоимость.СтоимостьРегл = ЭлементМассивСебестоимость.Стоимость;
		//				КонецЕсли;	
		//			КонецЦикла;
		//		КонецЦикла;
		//		
		//		//Удаляем строки расхода сырья и получаем общую сумму
		//		МассивСтрокРасхода = ДвижСебестоимость.НайтиСтроки(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
		//		ИтогоСтоимость = 0;
		//		Для Каждого ЭлементМассивСебестоимость из МассивСтрокРасхода Цикл
		//			 ИтогоСтоимость = ИтогоСтоимость + ЭлементМассивСебестоимость.Стоимость;
		//			 ДвижСебестоимость.Удалить(ЭлементМассивСебестоимость);
		//		КонецЦикла;
		//		
		//		//Общую сумму распределяем по строкам готовой проидукции
		//		ИтогоКоличество = ДвижСебестоимость.Итог("Количество");
		//		Для Каждого СтрокаСебестоимость из ДвижСебестоимость Цикл
		//			 СтрокаСебестоимость.Стоимость = ИтогоСтоимость * СтрокаСебестоимость.Количество / ИтогоКоличество;
		//			 СтрокаСебестоимость.СтоимостьБезНДС =  СтрокаСебестоимость.Стоимость;
		//			 СтрокаСебестоимость.СтоимостьРегл = СтрокаСебестоимость.Стоимость;
		//			 СтрокаСебестоимость.СтоимостьУпр = СтрокаСебестоимость.Стоимость;
		//			 //СтрокаСебестоимость.РасчетСебестоимости = Истина;
		//			 //СтрокаСебестоимость.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Потребление;
		//			 //
		//		КонецЦикла;
		//		
		//						 
		//	КонецЕсли;	
		//	
		//	Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
		//		НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
		//	КонецЦикла;
		//	//КонецЕсли;
		//	
		//КонецЦикла;
				
		Попытка  
			ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
		КонецПопытки;	
		
		УдалитьДокументСборка(ДокСборка);
				
	КонецЦикла;
	
КонецПроцедуры	

Функция	СоздатьИЗаполнитьДокСборка(пЭтотОбъект, пКодСтроки, пНоменклатура, пХарактеристика, пКоличество, НаборСырья  , ТаблСерии , ИмяПоляКоличествоСырья, КоэфДоляСырья, СтрокаГП);
		
		ДокСборка = Документы.СборкаТоваров.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ДокСборка,пЭтотОбъект,"Организация,Дата,Склад");
		
		ДокСборка.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
		ДокСборка.Номенклатура   		= пНоменклатура; 
		ДокСборка.Характеристика 		= пХарактеристика; 
		ДокСборка.Серия 		 		= СтрокаГП.Серия;
		ДокСборка.СтатусУказанияСерий 	= СтрокаГП.СтатусУказанияСерий;
		
		ОтборСерии = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",пНоменклатура, пХарактеристика, пКодСтроки);
		СерииПоГП = ТаблСерии.НайтиСтроки(ОтборСерии);
		
		Для Каждого мСерия из СерииПоГП Цикл
			НовСтрокаСерии = ДокСборка.Серии.Добавить();	
			НовСтрокаСерии.Номенклатура 	= мСерия.Номенклатура;
			НовСтрокаСерии.Характеристика 	= мСерия.Характеристика;
			НовСтрокаСерии.Серия 			= мСерия.Серия;
			НовСтрокаСерии.Количество 		= мСерия.Количество;				
		КонецЦикла;	
		
		ДокСборка.Количество   		   = пКоличество;
		ДокСборка.КоличествоУпаковок   = пКоличество;
		
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		ДокСборка.Комментарий = Строка(пЭтотОбъект);  
		
		ДокСборка.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.СборкаТоваров;
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		
		ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(ДокСборка);
		УчетНДСКэшированныеЗначенияПараметров = Неопределено;	
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокСборка.СборкаПодДеятельность, ПараметрыЗаполнения,	УчетНДСКэшированныеЗначенияПараметров);
		
		для Каждого СтрокаСырья из НаборСырья Цикл
			
			Если пЭтотОбъект.ВидОперацииПроизводства = Перечисления.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства Тогда
				Продолжить;			
			КонецЕсли;
			
			СтрокаТовара = ДокСборка.Товары.Добавить();
			СтрокаТовара.Количество 			= СтрокаСырья[ИмяПоляКоличествоСырья] * КоэфДоляСырья;// * гпГпПроцент; //сырье берем в долях от продукции для распределения //	СтрокаТовара.Количество = СтрокаСырья.Количество *(1 - ОКР((пГПКолБрак + пГПОтходы) / (пГПКол+пГПКолБрак + пГПОтходы), 6)); //Сырье под брак списываем как бы пропорционально количеству брака от общего числа
			СтрокаТовара.КоличествоУпаковок 	= СтрокаТовара.Количество;//  СтрокаСырья.Количество *(1 - ОКР((пГПКолБрак+пГПОтходы) / (пГПКол+пГПКолБрак + пГПОтходы), 6)); //Сырье под брак списываем как бы пропорционально количеству брака от общего числа
			СтрокаТовара.Номенклатура 			= СтрокаСырья.Номенклатура;
			СтрокаТовара.Характеристика 		= СтрокаСырья.Характеристика;
			СтрокаТовара.Серия 					= СтрокаСырья.Серия;
			СтрокаТовара.СтатусУказанияСерий 	= СтрокаСырья.СтатусУказанияСерий;
			
			ОтборСерииСырье = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",
												СтрокаТовара.Номенклатура,
												СтрокаТовара.Характеристика, 
												пКодСтроки);
			
			СерииПоСырье = ТаблСерии.НайтиСтроки(ОтборСерииСырье);

			Для Каждого мСерия из СерииПоСырье Цикл			
				НовСтрокаСерии = ДокСборка.Серии.Добавить();	
				НовСтрокаСерии.Номенклатура 		= мСерия.Номенклатура;
				НовСтрокаСерии.Характеристика 		= мСерия.Характеристика;
				НовСтрокаСерии.Серия 				= мСерия.Серия;
				НовСтрокаСерии.Количество 			= ?(СтрокаСырья.Количество=0,0, мСерия.Количество*СтрокаТовара.Количество/СтрокаСырья.Количество);	
			КонецЦикла;	
			
		КонецЦикла;	

		
		ДокСборка.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			ДокСборка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Возврат ДокСборка;			
			
КонецФункции
	
//++20200911	
Функция	СоздатьИЗаполнитьДокПриобретениеУслугПрочихАктивов(пЭтотОбъект)
	ДокПриобретение = Документы.ПриобретениеУслугПрочихАктивов.СоздатьДокумент();	
	ЗаполнитьЗначенияСвойств(ДокПриобретение,пЭтотОбъект,"Организация,Контрагент,Партнер,Дата");
	мВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокПриобретение.Валюта = мВалюта;
	ДокПриобретение.ВалютаВзаиморасчетов = мВалюта;
	ДокПриобретение.ДатаПлатежа = пЭтотОбъект.Дата;
	
	ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(ДокПриобретение);
	УчетНДСКэшированныеЗначенияПараметров = Неопределено;	
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокПриобретение.ЗакупкаПодДеятельность, ПараметрыЗаполнения,	УчетНДСКэшированныеЗначенияПараметров);
		
	ДокПриобретение.НалогообложениеНДС = ДокПриобретение.ЗакупкаПодДеятельность;

	ДокПриобретение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ДокПриобретение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ДокПриобретение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокПриобретение.Курс = 1;		
	ДокПриобретение.Кратность = 1;
	ИтогоСумма = 0;
	Для Каждого мРасход из пЭтотОбъект.ПрочиеРасходы Цикл
		НоваяСтрокаРасходов = ДокПриобретение.Расходы.Добавить();
		НоваяСтрокаРасходов.Содержание = СокрЛП(мРасход.СтатьяРасходов);
		НоваяСтрокаРасходов.Количество = 1;
		НоваяСтрокаРасходов.Цена = мРасход.Сумма;
		НоваяСтрокаРасходов.Сумма = мРасход.Сумма;		
		НоваяСтрокаРасходов.СтавкаНДС = мРасход.СтавкаНДС;
		НоваяСтрокаРасходов.СуммаНДС = мРасход.Сумма - мРасход.СуммаБезНДС;
		НоваяСтрокаРасходов.СуммаСНДС = мРасход.Сумма;
		НоваяСтрокаРасходов.СтатьяРасходов = мРасход.СтатьяРасходов;
		НоваяСтрокаРасходов.СуммаВзаиморасчетов = мРасход.Сумма;
		НоваяСтрокаРасходов.АналитикаРасходов = ЭтотОбъект.Ссылка;
		НоваяСтрокаРасходов.СуммаНДСВзаиморасчетов = мРасход.Сумма - мРасход.СуммаБезНДС;
		НоваяСтрокаРасходов.Подразделение = пЭтотОбъект.Подразделение;
		ИтогоСумма = ИтогоСумма + НоваяСтрокаРасходов.Сумма; 
	КонецЦикла;	
	НоваяСтрокаРасшПлатежа = ДокПриобретение.РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРасшПлатежа.Сумма = ИтогоСумма; //Сумма в валюте документа
	НоваяСтрокаРасшПлатежа.СуммаВзаиморасчетов = ИтогоСумма; //Сумма в валюте взаиморасчетов.
	
	ДокПриобретение.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ДокПриобретение.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	Возврат ДокПриобретение;
Конецфункции

Процедура ПеренестиДвиженияВОтчетПроизводства(ДокСборка, ДокПроизводство, Движения)	
	
	ДвижДокСборка = ДокСборка.Движения;
	
	//может пригодиться в цикле
	тчТоварыЗаказа = Неопределено;
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
		тчТоварыЗаказа = ДокументОснование.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ДокСборка.Номенклатура, ДокСборка.Характеристика));
	КонецЕсли;
	
	МД_ДокСборка = ДокСборка.метаданные().Движения;
	МД_ЭтотОбъект = ДокПроизводство.метаданные().Движения;
	МД_Массив = Новый Массив;
	Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
		Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
			Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
				МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	ДвижСебестоимость = новый ТаблицаЗначений;
	Для каждого ЭлементМД_Массив из МД_Массив цикл
		Если Движения.Найти(ЭлементМД_Массив)=Неопределено ТОгда
			Продолжить;
		КонецЕсли;
		
		
		ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
		ДвижСебестоимость.Колонки.Удалить("Регистратор");
		
		Движения[ЭлементМД_Массив].Записывать = Истина;
		Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
			
			//++debug
			Если ЕстьОперации Тогда
				Если (ЭлементМД_Массив="СвободныеОстатки" 
					ИЛИ ЭлементМД_Массив="ТоварыНаСкладах" 
					ИЛИ ЭлементМД_Массив="ТоварыОрганизаций" 
					ИЛИ ЭлементМД_Массив="ПартииТоваровОрганизаций") И СтрокаДвижСебестоимость.ВидДвижения = ВидДвиженияНакопления.Приход  Тогда
					
					Если НЕ СтатусЗаказаЗавершено Тогда //Если цикл производства еще не выполнен
						Продолжить; 					  //то на склад ничего не приходуем
						
					ИначеЕсли тчТоварыЗаказа<>Неопределено Тогда //если цикл выполнен и это скорее всего последняя операция
						// то приходуем готовую продукцию, но нужно на все количество из заказа
						Если тчТоварыЗаказа.Количество()>0 Тогда
							Если ЭлементМД_Массив="СвободныеОстатки" ИЛИ ЭлементМД_Массив="ТоварыНаСкладах"  Тогда
								СтрокаДвижСебестоимость.ВНаличии = 	тчТоварыЗаказа[0].Количество;
							ИначеЕсли ЭлементМД_Массив="ТоварыОрганизаций"  ИЛИ ЭлементМД_Массив="ПартииТоваровОрганизаций" Тогда
								СтрокаДвижСебестоимость.Количество = тчТоварыЗаказа[0].Количество;
							КонецЕсли;	
						КонецЕсли;								
					КонецЕсли;
					
				ИначеЕсли ЭлементМД_Массив="СебестоимостьТоваров" И НЕ СтатусЗаказаЗавершено Тогда 
					Продолжить;// СтрокаДвижСебестоимость.Количество = 0;
				КонецЕсли;
			КонецЕсли;	
			//--debug
			
			НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
			
			Если ( ЭлементМД_Массив="СебестоимостьТоваров" 
				ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
				ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" ) 
				И НоваяСтрокаДвижСебестоимость.Партия = ДокСборка.Ссылка  Тогда
				НоваяСтрокаДвижСебестоимость.Партия = ДокПроизводство.Ссылка;
			ИначеЕсли ( ЭлементМД_Массив="СебестоимостьТоваров"
				ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
				ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" )
				И НоваяСтрокаДвижСебестоимость.КорПартия = ДокСборка.Ссылка  Тогда
				НоваяСтрокаДвижСебестоимость.КорПартия = ДокПроизводство.Ссылка;	
			ИначеЕсли ЭлементМД_Массив="ТоварыКОтгрузке" И НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ДокСборка.Ссылка  Тогда
				НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ДокПроизводство.Ссылка;	 

			ИначеЕсли ЭлементМД_Массив="ПартииПрочихРасходов" Тогда
				Если НоваяСтрокаДвижСебестоимость.ДокументПоступленияРасходов = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.ДокументПоступленияРасходов = ДокПроизводство.Ссылка;					
				КонецЕсли;
				//Если НоваяСтрокаДвижСебестоимость.АналитикаРасходов = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.АналитикаРасходов = ДокПроизводство.Ссылка;					
				//КонецЕсли;
				
			ИначеЕсли ЭлементМД_Массив="ДвиженияКонтрагентДоходыРасходы" И НоваяСтрокаДвижСебестоимость.ОбъектРасчетов = ДокСборка.Ссылка  Тогда
							НоваяСтрокаДвижСебестоимость.ОбъектРасчетов = ДокПроизводство.Ссылка;
							НоваяСтрокаДвижСебестоимость.ИсточникГФУРАсчетов = ДокПроизводство.Ссылка;

			КонецЕсли;	

		КонецЦикла;  		

	КонецЦикла;
	
	Если ЕстьОперации И СтатусЗаказаЗавершено  И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.вт_ЗаказВПроизводство") Тогда
		//Возможно необходимо дополнить в регистр СебестоимостьТоваров движения  Расход на списание сырья
		// если перед этим были другие этапы выполнения операций и списывалось сырье
		
		//собрать расход сырья по всем предыдущим выпускам в разрезе этого заказа
		тзнОборотыСырья = РегистрыНакопления.вт_ОперацииВыпускаСырье.Обороты(Новый Граница(ДокументОснование.МоментВремени(), ВидГраницы.Включая), 
														Новый Граница(МоментВремени(), ВидГраницы.Исключая),
														Новый Структура("ЗаказПроизводства,Номенклатура,Характеристика", ДокументОснование, ДокСборка.Номенклатура, ДокСборка.Характеристика),
														"НоменклатураСырье,ХарактеристикаСырье","Количество");
		Для Каждого СтрокаоборотСырья из тзнОборотыСырья Цикл 												
			
			Если НЕ СтрокаоборотСырья.КоличествоРасход>0 Тогда
				Продолжить;
			КонецЕсли;
			
			запросключа = новый запрос("ВЫБРАТЬ
			                           |	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
			                           |ИЗ
			                           |	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
			                           |ГДЕ
			                           |	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
			                           |	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
			                           |	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &МестоХранения
			                           |	//И КлючиАналитикиУчетаНоменклатуры.Организация = &Организация
			                           |	И КлючиАналитикиУчетаНоменклатуры.ПометкаУдаления = ЛОЖЬ");
			
			запросключа.УстановитьПараметр("Номенклатура", СтрокаоборотСырья.НоменклатураСырье);
			запросключа.УстановитьПараметр("Характеристика", СтрокаоборотСырья.ХарактеристикаСырье);
			запросключа.УстановитьПараметр("МестоХранения" , ЭтотОбъект.Склад);
			запросключа.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
			ВыборкаКлюча = запросключа.Выполнить().Выбрать();
			Если НЕ ВыборкаКлюча.Следующий() ТОгда    
				Продолжить;
			КонецЕсли;
			
			СтрокаСебест = Движения.СебестоимостьТоваров.Добавить();
			
			СтрокаСебест.Период = Дата;
			СтрокаСебест.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаСебест.АналитикаУчетаНоменклатуры=ВыборкаКлюча.Ссылка;
			СтрокаСебест.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах;
			СтрокаСебест.ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(Организация, ДокСборка.ХозяйственнаяОперация);
			СтрокаСебест.Организация = Организация;
			СтрокаСебест.Количество = СтрокаоборотСырья.КоличествоРасход;
			СтрокаСебест.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
			СтрокаСебест.КорАналитикаУчетаНоменклатуры = ДокСборка.АналитикаУчетаНоменклатуры;
			СтрокаСебест.КорРазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах;
			СтрокаСебест.КорВидЗапасов = СтрокаСебест.ВидЗапасов;
			СтрокаСебест.КорПартия = Ссылка;
			
			СтрокаСебест.КорВидДеятельностиНДС = ДокСборка.СборкаПодДеятельность;
			СтрокаСебест.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Потребление;
			
			СтруктОтбора = Новый Структура("Дата, ВидЦенности, НалогообложениеНДС",
											Дата,
											перечисления.ВидыЦенностей.Товары,
											ДокСборка.СборкаПодДеятельность);
											
			СтрокаСебест.КорАналитикаУчетаПартий = Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(СтруктОтбора);
			
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СформироватьДвиженияСебестоимостьБракаИзДругихДвижений(Движения)
	ТаблГП = ЭтотОбъект.Товары.Выгрузить();
	ТаблГП.Свернуть("Номенклатура, Характеристика, НоменклатураБрака, ХарактеристикаБрака, КодСтроки","КоличествоПлан, БракКолВо");
	
	
	ТаблСырье = ЭтотОбъект.вт_ПроизводствоСырье.Выгрузить(,"ГотоваяПродукция, Номенклатура, Характеристика, Серия, Количество, КлючСвязиСтроки");
	ТаблСырье.Свернуть("ГотоваяПродукция, Номенклатура, Характеристика, Серия, КлючСвязиСтроки","Количество");
	
	ТаблСерии = ЭтотОбъект.Серии.Выгрузить();
	ТаблСерии.Свернуть("Номенклатура, Характеристика, Серия, КлючСвязиСтроки, Назначение", "Количество");
	
	НомерСтрокаГП = 0; 
	
		
	Для Каждого СтрокаГП из ТаблГП Цикл
		
		Если  СтрокаГП.БракКолВо=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерСтрокаГП = НомерСтрокаГП + 1; 
		пГотПрод = СтрокаГП.Номенклатура;
		НоменклатураБрака = СтрокаГП.НоменклатураБрака;
		ХарактеристикаБрака = СтрокаГП.ХарактеристикаБрака;
		пГПКолБрак = СтрокаГП.БракКолВо;
		пГПКол = СтрокаГП.КоличествоПлан;
		
		ОтборГП = Новый Структура("ГотоваяПродукция, КлючСвязиСтроки",пГотПрод, СтрокаГП.КодСтроки);
		СырьеПоГП = ТаблСырье.НайтиСтроки(ОтборГП);
		
		пГПОтходы  = 0;
		ОтходыПоГП = вт_БракДробленка.НайтиСтроки(ОтборГП);
		Для Каждого СтрокаОтходовПоГП из ОтходыПоГП Цикл
			пГПОтходы = пГПОтходы +  СтрокаОтходовПоГП.КоличествоБрака;
		КонецЦикла;			
		

		всегоПриходНаСклад = пГПКол + пГПКолБрак + пГПОтходы;
		
		гпГпПроцент     = ОКР(пГПКол     / всегоПриходНаСклад,3);
		гпБракПроцент   = ОКР(пГПКолБрак / всегоПриходНаСклад,3);
		гпОтходыПроцент = ОКР(пГПОтходы  / всегоПриходНаСклад,3);
		
		
		ДокСборка = Документы.СборкаТоваров.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ДокСборка,ЭтотОбъект,"Организация,Дата,Склад");
		Если ЗначениеЗаполнено(НоменклатураБрака) Тогда
			ДокСборка.Номенклатура = НоменклатураБрака;
			
		Иначе
			ДокСборка.Номенклатура = пГотПрод;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ХарактеристикаБрака) Тогда
			ДокСборка.Характеристика = ХарактеристикаБрака;
		Иначе
			ДокСборка.Характеристика = СтрокаГП.Характеристика;
		КонецЕсли;
		
		ДокСборка.Количество   = пГПКолБрак;
		
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		ДокСборка.Комментарий = Строка(Ссылка);  
		//ДокСборка.СборкаПодДеятельность = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;

		ДокСборка.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.СборкаТоваров;
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		
		ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(ДокСборка);
		УчетНДСКэшированныеЗначенияПараметров = Неопределено;	
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокСборка.СборкаПодДеятельность, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		
			Если ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.ПроизводствоДляЗаказчика 
				ИЛИ
				ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.СобственноеПроизводство
				Тогда
				//Только если мы делаем производство для заказчика, значит используем сырье со склада
				для Каждого СтрокаСырья из СырьеПоГП Цикл
					СтрокаТовара = ДокСборка.Товары.Добавить();
					СтрокаТовара.Количество 	=  СтрокаСырья.Количество * гпБракПроцент;//берем сырья пропорционально доле брака // ОКР(пГПКолБрак / пГПКол, 6); //Сырье под брак списываем как бы пропорционально количеству брака от общего числа
					СтрокаТовара.Номенклатура   =  СтрокаСырья.Номенклатура;
					СтрокаТовара.Характеристика =  СтрокаСырья.Характеристика;
				
					//++14.06.2019 
					//СтрокаТовара.СтатусУказанияСерий = 1;
					СтрокаТовара.СтатусУказанияСерий = вт_ПолучитьСтатусУказанияСерий(СтрокаТовара.Номенклатура);
					ОтборСерииСырье = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",
														СтрокаТовара.Номенклатура,
														СтрокаТовара.Характеристика, 
														СтрокаГП.КодСтроки);
					СерииПоСырье = ТаблСерии.НайтиСтроки(ОтборСерииСырье);
					
					Для Каждого мСерия из СерииПоСырье Цикл			
						НовСтрокаСерии = ДокСборка.Серии.Добавить();	
						НовСтрокаСерии.Номенклатура = мСерия.Номенклатура;
						НовСтрокаСерии.Характеристика = мСерия.Характеристика;
						НовСтрокаСерии.Серия = мСерия.Серия;
						НовСтрокаСерии.Количество = ?(СтрокаСырья.Количество=0,0,
														мСерия.Количество*СтрокаТовара.Количество/СтрокаСырья.Количество);					
					КонецЦикла;	 					
					//--14.06.2019

					
				КонецЦикла;	
			КонецЕсли;

		ДокСборка.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			ДокСборка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Если НЕ ДокСборка.Проведен Тогда
			Попытка
				УдалитьДокументСборка(ДокСборка);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		
		
		ДвижДокСборка = ДокСборка.Движения;
		
		МД_ДокСборка = ДокСборка.метаданные().Движения;
		МД_ЭтотОбъект = ЭтотОбъект.метаданные().Движения;
		МД_Массив = Новый Массив;
		Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
			Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
				Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
					 МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		ДвижСебестоимость = новый ТаблицаЗначений;
		Для каждого ЭлементМД_Массив из МД_Массив цикл
			
			ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
			ДвижСебестоимость.Колонки.Удалить("Регистратор");
			
			//Если НомерСтрокаГП = 1 Тогда
			//	Движения[ЭлементМД_Массив].Записывать = Истина;
			//	Движения[ЭлементМД_Массив].Загрузить(ДвижСебестоимость);
			//Иначе
			Движения[ЭлементМД_Массив].Записывать = Истина;
			Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
				
				НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
				
				Если ( ЭлементМД_Массив="СебестоимостьТоваров" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" ) 
					И НоваяСтрокаДвижСебестоимость.Партия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.Партия = ЭтотОбъект.Ссылка;
				ИначеЕсли ( ЭлементМД_Массив="СебестоимостьТоваров"
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" )
					И НоваяСтрокаДвижСебестоимость.КорПартия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.КорПартия = ЭтотОбъект.Ссылка;	
				ИначеЕсли ЭлементМД_Массив="ТоварыКОтгрузке" И НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ЭтотОбъект.Ссылка;	 
				КонецЕсли;	
			КонецЦикла;

			//КонецЕсли;
			
		КонецЦикла;
				
		Попытка  
			ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
		КонецПопытки;	
		
		УдалитьДокументСборка(ДокСборка);
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура СнятьРезервыДляПоступленияИзПроизводства()
	
	Если ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.ПолучениеИзПроизводства Тогда 
		
		//Если получаем из внешнего производства и передавали материалы для переработки, 
		// то значит ранее мы их ставили в резерв (когда передавали)
		// и теперь резерв нужно снять что бы далее провелась сборка и списалось сырье
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура КАК Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Характеристика КАК Характеристика,
		|	СУММА(вт_ОтчетПроизводствавт_ПроизводствоСырье.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_СЫРЬЕ
		|ИЗ
		|	Документ.вт_ОтчетПроизводства.вт_ПроизводствоСырье КАК вт_ОтчетПроизводствавт_ПроизводствоСырье
		|ГДЕ
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Номенклатура,
		|	вт_ОтчетПроизводствавт_ПроизводствоСырье.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЫРЬЕ.Номенклатура КАК Номенклатура,
		|	ВТ_СЫРЬЕ.Характеристика КАК Характеристика,
		|	СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток КАК ВРезервеСоСкладаОстаток
		|ПОМЕСТИТЬ ВТ_РЕЗЕРВЫ
		|ИЗ
		|	ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
		|				&Период,
		|				Склад = &склад
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							ВТ_СЫРЬЕ.Номенклатура КАК Номенклатура,
		|							ВТ_СЫРЬЕ.Характеристика КАК Характеристика
		|						ИЗ
		|							ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ)) КАК СвободныеОстаткиОстатки
		|		ПО ВТ_СЫРЬЕ.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
		|			И ВТ_СЫРЬЕ.Характеристика = СвободныеОстаткиОстатки.Характеристика
		|ГДЕ
		|	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток > 0
		|			И СвободныеОстаткиОстатки.ВНаличииОстаток >= СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЫРЬЕ.Номенклатура КАК Номенклатура,
		|	ВТ_СЫРЬЕ.Характеристика КАК Характеристика,
		|	вт_ДавальческоеСырьеПереданноеОстатки.КоличествоОстаток КАК ОстатокПереданного
		|ПОМЕСТИТЬ ВТ_ОСТАТОК_ПЕРЕДАННОГО
		|ИЗ
		|	ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ДавальческоеСырьеПереданное.Остатки(
		|				&Период,
		|				Партнер = &Партнер
		|					И Контрагент = &Контрагент
		|					И Договор = &Договор
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							ВТ_СЫРЬЕ.Номенклатура КАК Номенклатура,
		|							ВТ_СЫРЬЕ.Характеристика КАК Характеристика
		|						ИЗ
		|							ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ)) КАК вт_ДавальческоеСырьеПереданноеОстатки
		|		ПО ВТ_СЫРЬЕ.Номенклатура = вт_ДавальческоеСырьеПереданноеОстатки.Номенклатура
		|			И ВТ_СЫРЬЕ.Характеристика = вт_ДавальческоеСырьеПереданноеОстатки.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СЫРЬЕ.Номенклатура КАК Номенклатура,
		|	ВТ_СЫРЬЕ.Характеристика КАК Характеристика,
		|	ВТ_ОСТАТОК_ПЕРЕДАННОГО.ОстатокПереданного КАК ОстатокПереданного,
		|	ВТ_РЕЗЕРВЫ.ВРезервеСоСкладаОстаток КАК ВРезервеСоСкладаОстаток,
		|	ВТ_СЫРЬЕ.Количество КАК Количество
		|ИЗ
		|	ВТ_СЫРЬЕ КАК ВТ_СЫРЬЕ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОСТАТОК_ПЕРЕДАННОГО КАК ВТ_ОСТАТОК_ПЕРЕДАННОГО
		|		ПО ВТ_СЫРЬЕ.Номенклатура = ВТ_ОСТАТОК_ПЕРЕДАННОГО.Номенклатура
		|			И ВТ_СЫРЬЕ.Характеристика = ВТ_ОСТАТОК_ПЕРЕДАННОГО.Характеристика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РЕЗЕРВЫ КАК ВТ_РЕЗЕРВЫ
		|		ПО ВТ_СЫРЬЕ.Номенклатура = ВТ_РЕЗЕРВЫ.Номенклатура
		|			И ВТ_СЫРЬЕ.Характеристика = ВТ_РЕЗЕРВЫ.Характеристика");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(Дата,Ссылка));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Движения.СвободныеОстатки.Записывать=Истина;
		
		Пока Выборка.Следующий() Цикл
			СнятьСОстаткаКоличество = Мин(Выборка.Количество,Выборка.ОстатокПереданного, Выборка.ВРезервеСоСкладаОстаток);
			Если СнятьСОстаткаКоличество <= 0 Тогда 
				Продолжить;
			КонецЕсли;	 
			НовСтрСвобОст = Движения.СвободныеОстатки.Добавить();
			НовСтрСвобОст.ВидДвижения = ВидДвиженияНакопления.Расход;
			НовСтрСвобОст.Номенклатура = Выборка.Номенклатура;
			НовСтрСвобОст.Характеристика = Выборка.Характеристика;
			НовСтрСвобОст.Склад = ЭтотОбъект.Склад;
			НовСтрСвобОст.Период = Дата;
			НовСтрСвобОст.ВРезервеСоСклада = Выборка.Количество; 
		КонецЦикла;
		
		
		Движения.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СформироватьДвиженияСебестоимостьИзДругихДвижений(Движения)
	
	ТаблГП = ЭтотОбъект.Товары.Выгрузить();
	ТаблГП.Свернуть("Номенклатура, Характеристика, Серия, КодСтроки","Количество, КоличествоПлан, БракКолВо");
	
	ТаблСерии = ЭтотОбъект.Серии.Выгрузить();
	ТаблСерии.Свернуть("Номенклатура, Характеристика, Серия, КлючСвязиСтроки, Назначение", "Количество");
	
	ТаблСырье = ЭтотОбъект.вт_ПроизводствоСырье.Выгрузить(,"ГотоваяПродукция, Номенклатура, Характеристика, Серия, Количество, КлючСвязиСтроки");
	ТаблСырье.Свернуть("ГотоваяПродукция, Номенклатура, Характеристика, Серия, КлючСвязиСтроки","Количество");
	
	
	НомерСтрокаГП = 0; 
	СнятьРезервСырьяДокументаОснования();
	СнятьРезервыДляПоступленияИзПроизводства();
	 
	Для Каждого СтрокаГП из ТаблГП Цикл
		//Если СтрокаГП.Количество = 0 Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		НомерСтрокаГП = НомерСтрокаГП + 1; 
		пГотПрод = СтрокаГП.Номенклатура;
		пГПКол = СтрокаГП.Количество;
		пГПКолБрак = СтрокаГП.БракКолВо;
		пГПОтходы  = 0;
		
		ОтборГП = Новый Структура("ГотоваяПродукция, КлючСвязиСтроки",пГотПрод, СтрокаГП.КодСтроки);
		СырьеПоГП = ТаблСырье.НайтиСтроки(ОтборГП);
		
		ОтборСерии = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",пГотПрод,СтрокаГП.Характеристика, СтрокаГП.КодСтроки);
		СерииПоГП = ТаблСерии.НайтиСтроки(ОтборСерии);
		
		ОтходыПоГП = вт_БракДробленка.НайтиСтроки(ОтборГП);
		Для Каждого СтрокаОтходовПоГП из ОтходыПоГП Цикл
			пГПОтходы = пГПОтходы +  СтрокаОтходовПоГП.КоличествоБрака;
		КонецЦикла;	
		
		всегоПриходНаСклад = пГПКол + пГПКолБрак + пГПОтходы;
		
		гпГпПроцент     = ОКР(пГПКол     / всегоПриходНаСклад,3);
		гпБракПроцент   = ОКР(пГПКолБрак / всегоПриходНаСклад,3);
		гпОтходыПроцент = ОКР(пГПОтходы  / всегоПриходНаСклад,3);
		
		ДокСборка = Документы.СборкаТоваров.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ДокСборка,ЭтотОбъект,"Организация,Дата,Склад");
		ДокСборка.ВариантПриемкиТоваров=перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
		
		ДокСборка.Номенклатура =пГотПрод; 
		ДокСборка.Характеристика = СтрокаГП.Характеристика; 
		
		//++11.06.2019
		Для Каждого мСерия из СерииПоГП Цикл
			//ДокСборка.СтатусУказанияСерий = 2;
			ДокСборка.СтатусУказанияСерий = вт_ПолучитьСтатусУказанияСерий(мСерия.Номенклатура);
			НовСтрокаСерии = ДокСборка.Серии.Добавить();	
			НовСтрокаСерии.Номенклатура = мСерия.Номенклатура;
			НовСтрокаСерии.Характеристика = мСерия.Характеристика;
			НовСтрокаСерии.Серия = мСерия.Серия;
			НовСтрокаСерии.Количество = мСерия.Количество;				
		КонецЦикла;	
		
		//Результат = ПолучитьСерии(ДокСборка.Номенклатура, ДокСборка.Характеристика, СтрокаГП.КодСтроки);
		//	Если НЕ Результат.Пустой() Тогда
		//	Выборка = Результат.Выбрать();
		//	
		//	Пока Выборка.Следующий() Цикл
		//		ДокСборка.СтатусУказанияСерий = 1;
		//		НовСтрокаСерии = ДокСборка.Серии.Добавить();	
		//		НовСтрокаСерии.Номенклатура = пГотПрод;
		//		НовСтрокаСерии.Характеристика = СтрокаГП.Характеристика;
		//		НовСтрокаСерии.Серия = Выборка.Серия;
		//		НовСтрокаСерии.Количество = Выборка.Количество;	
		//	КонецЦикла;
		//КонецЕсли;
		
		
		//Если ЗначениеЗаполнено(СтрокаГП.Серия) Тогда
		//	ДокСборка.СтатусУказанияСерий = 10;
		//	НовСтрокаСерии = ДокСборка.Серии.Добавить();
		//	НовСтрокаСерии.Номенклатура = пГотПрод;
		//	НовСтрокаСерии.Характеристика = СтрокаГП.Характеристика;
		//	НовСтрокаСерии.Серия = СтрокаГП.Серия;
		//	НовСтрокаСерии.Количество = пГПКол;
		//КонецЕсли;	
		//--11.06.2019
		
		ДокСборка.Количество   		   = пГПКол;
		ДокСборка.КоличествоУпаковок   = пГПКол;
		
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		ДокСборка.Комментарий = Строка(Ссылка);  
		//ДокСборка.СборкаПодДеятельность = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
		ДокСборка.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.СборкаТоваров;
		ДокСборка.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
		
		ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(ДокСборка);
		УчетНДСКэшированныеЗначенияПараметров = Неопределено;	
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокСборка.СборкаПодДеятельность, ПараметрыЗаполнения,	УчетНДСКэшированныеЗначенияПараметров);
		
		//Если ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.ПроизводствоДляЗаказчика 
		//	ИЛИ
		//	ЭтотОбъект.ВидОперацииПроизводства=Перечисления.вт_ВидыОперацийПроизводства.СобственноеПроизводство
		//	Тогда
			//Только если мы делаем производство для заказчика, значит используем сырье со склада
			для Каждого СтрокаСырья из СырьеПоГП Цикл
				СтрокаТовара = ДокСборка.Товары.Добавить();
			    СтрокаТовара.Количество = СтрокаСырья.Количество * гпГпПроцент; //сырье берем в долях от продукции для распределения //	СтрокаТовара.Количество = СтрокаСырья.Количество *(1 - ОКР((пГПКолБрак + пГПОтходы) / (пГПКол+пГПКолБрак + пГПОтходы), 6)); //Сырье под брак списываем как бы пропорционально количеству брака от общего числа
				СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;//  СтрокаСырья.Количество *(1 - ОКР((пГПКолБрак+пГПОтходы) / (пГПКол+пГПКолБрак + пГПОтходы), 6)); //Сырье под брак списываем как бы пропорционально количеству брака от общего числа
				СтрокаТовара.Номенклатура =  СтрокаСырья.Номенклатура;
				СтрокаТовара.Характеристика =  СтрокаСырья.Характеристика;
				//СтрокаТовара.СтатусУказанияСерий = 1;
				СтрокаТовара.СтатусУказанияСерий = вт_ПолучитьСтатусУказанияСерий(СтрокаСырья.Номенклатура);
				
				//++11.06.2019 
				ОтборСерииСырье = Новый Структура("Номенклатура,Характеристика,КлючСвязиСтроки",
				СтрокаТовара.Номенклатура,
				СтрокаТовара.Характеристика, 
				СтрокаГП.КодСтроки);
				СерииПоСырье = ТаблСерии.НайтиСтроки(ОтборСерииСырье);
				
				//++11.06.2019
				Для Каждого мСерия из СерииПоСырье Цикл			
					НовСтрокаСерии = ДокСборка.Серии.Добавить();	
					НовСтрокаСерии.Номенклатура = мСерия.Номенклатура;
					НовСтрокаСерии.Характеристика = мСерия.Характеристика;
					НовСтрокаСерии.Серия = мСерия.Серия;
					НовСтрокаСерии.Количество = ?(СтрокаСырья.Количество=0,0,
														мСерия.Количество*СтрокаТовара.Количество/СтрокаСырья.Количество);	
					//СтрокаТовара.СтатусУказанияСерий = 2;
					СтрокаТовара.СтатусУказанияСерий = вт_ПолучитьСтатусУказанияСерий(мСерия.Номенклатура);
				КонецЦикла;	
				
				//
				//Рез = ПолучитьСерии(СтрокаТовара.Номенклатура,СтрокаТовара.Характеристика, СтрокаГП.КодСтроки);
				//Если Не Рез.Пустой() Тогда
				//	Выборка1 = Рез.Выбрать();	
				//	Пока Выборка1.Следующий() Цикл 
				//		НовСтрокаСерии = ДокСборка.Серии.Добавить();	
				//		НовСтрокаСерии.Номенклатура = СтрокаТовара.Номенклатура;
				//		НовСтрокаСерии.Характеристика = СтрокаТовара.Характеристика;
				//		НовСтрокаСерии.Серия = Выборка1.Серия;
				//		НовСтрокаСерии.Количество = Выборка1.Количество*СтрокаТовара.Количество/СтрокаСырья.Количество;	
				//		
				//	КонецЦикла;
				//КонецЕсли;	
				//--11.06.2019
				
				//Если ЗначениеЗаполнено(СтрокаСырья.Серия) Тогда
				//	СтрокаТовара.Серия = СтрокаСырья.Серия;
				//	СтрокаТовара.СтатусУказанияСерий = 2;
				//КонецЕсли;						
			КонецЦикла;	
		//КонецЕсли;
		
		ДокСборка.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			ДокСборка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Если НЕ ДокСборка.Проведен Тогда
			УдалитьДокументСборка(ДокСборка);
			Продолжить;
		КонецЕсли;
		
		ДвижДокСборка = ДокСборка.Движения;
		
		МД_ДокСборка = ДокСборка.метаданные().Движения;
		МД_ЭтотОбъект = ЭтотОбъект.метаданные().Движения;
		МД_Массив = Новый Массив;
		Для каждого МД_СтрЭтотОбъект из МД_ЭтотОбъект цикл
			Для каждого МД_СтрДокСборка из МД_ДокСборка цикл
				Если МД_СтрДокСборка.Имя = МД_СтрЭтотОбъект.Имя тогда
					МД_Массив.Добавить(МД_СтрЭтотОбъект.Имя);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		ДвижСебестоимость = новый ТаблицаЗначений;
		Для каждого ЭлементМД_Массив из МД_Массив цикл
			Если Движения.Найти(ЭлементМД_Массив)=Неопределено ТОгда
				Продолжить;
			КонецЕсли;
			
			ДвижСебестоимость = ДвижДокСборка[ЭлементМД_Массив].выгрузить();
			ДвижСебестоимость.Колонки.Удалить("Регистратор");
			
			//Если НомерСтрокаГП = 1 Тогда
			//	Движения[ЭлементМД_Массив].Записывать = Истина;
			//	Движения[ЭлементМД_Массив].Загрузить(ДвижСебестоимость);
			//Иначе
			Движения[ЭлементМД_Массив].Записывать = Истина;
			Для каждого СтрокаДвижСебестоимость Из ДвижСебестоимость Цикл
				
				НоваяСтрокаДвижСебестоимость = Движения[ЭлементМД_Массив].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижСебестоимость, СтрокаДвижСебестоимость);
				
				Если ( ЭлементМД_Массив="СебестоимостьТоваров" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" ) 
					И НоваяСтрокаДвижСебестоимость.Партия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.Партия = ЭтотОбъект.Ссылка;
				ИначеЕсли ( ЭлементМД_Массив="СебестоимостьТоваров"
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН2_4" 
					ИЛИ ЭлементМД_Массив="ДетализацияПартийТоваровДляНДСиУСН" )
					И НоваяСтрокаДвижСебестоимость.КорПартия = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.КорПартия = ЭтотОбъект.Ссылка;	
				ИначеЕсли ЭлементМД_Массив="ТоварыКОтгрузке" И НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ДокСборка.Ссылка  Тогда
					НоваяСтрокаДвижСебестоимость.ДокументОтгрузки = ЭтотОбъект.Ссылка;	 
				КонецЕсли;	
			КонецЦикла;
			//КонецЕсли;
			
		КонецЦикла;
		
		Попытка  
			ДокСборка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Попытка
			УдалитьДокументСборка(ДокСборка); 
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьСерии(Номенклатура,Характеристика, КодСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вт_ОтчетПроизводстваСерии.Ссылка КАК Ссылка,
	               |	вт_ОтчетПроизводстваСерии.НомерСтроки КАК НомерСтроки,
	               |	вт_ОтчетПроизводстваСерии.Серия КАК Серия,
	               |	вт_ОтчетПроизводстваСерии.Количество КАК Количество,
	               |	вт_ОтчетПроизводстваСерии.Номенклатура КАК Номенклатура,
	               |	вт_ОтчетПроизводстваСерии.Характеристика КАК Характеристика,
	               |	вт_ОтчетПроизводстваСерии.Назначение КАК Назначение,
	               |	вт_ОтчетПроизводстваСерии.Склад КАК Склад,
	               |	вт_ОтчетПроизводстваСерии.КлючСвязиСтроки КАК КлючСвязиСтроки
	               |ИЗ
	               |	Документ.вт_ОтчетПроизводства.Серии КАК вт_ОтчетПроизводстваСерии
	               |ГДЕ
	               |	вт_ОтчетПроизводстваСерии.Ссылка = &Ссылка
	               |	И вт_ОтчетПроизводстваСерии.Номенклатура = &Номенклатура
	               |	И вт_ОтчетПроизводстваСерии.Характеристика = &Характеристика
	               |	И вт_ОтчетПроизводстваСерии.КлючСвязиСтроки = &КодСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("КодСтроки", КодСтроки);
	Результат = Запрос.Выполнить();
	Возврат Результат;	
КонецФункции

Процедура УдалитьДокументСборка(ДокОбъект)
	
	 //   ДокОбъект.УстановитьПометкуУдаления(Истина);
		
		УдалитьДанныеДокументов(ДокОбъект.Ссылка);
		
		ДокОбъект.ОбменДанными.Загрузка=истина;	
		
	    ДокОбъект.Удалить();		
	
КонецПроцедуры

Процедура УдалитьДанныеДокументов(ДокСсылка)
	НЗ = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	НЗ.Отбор.Ссылка.Установить(ДокСсылка);
	НЗ.Прочитать();
	НЗ.Очистить();
	НЗ.Записать(Истина);	
КонецПроцедуры

Процедура ЗаменаСкладаВДвижениях()
	
	Перем СтрокаТекДвижение, ТекДвижение, ТекРеквизит;
	
	Для каждого ТекДвижение Из Движения Цикл
		Для каждого СтрокаТекДвижение Из ТекДвижение Цикл
			Для каждого ТекРеквизит Из СтрокаТекДвижение Цикл
				//меняем склад сырья на склад готовой продукции	
			КонецЦикла;					
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	//ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	//ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	//СформироватьСписокРегистровДляКонтроля();

	//ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	//ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	//ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьТабличнуюЧастьТовары() Экспорт
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ЗаказВПроизводство")  Тогда
#Область Старый_Вариант	

		Запрос = Новый Запрос("ВЫБРАТЬ
		|	вт_ЗаказВПроизводствоПродукция.Номенклатура,
		|	вт_ЗаказВПроизводствоОстатки.КоличествоОстаток КАК Количество,
		|	вт_ЗаказВПроизводствоОстатки.КоличествоОстаток КАК КоличествоПлан,
		|	вт_ЗаказВПроизводствоПродукция.Характеристика,
		|	ПлановаяСебестоимость.Себестоимость КАК Цена,
		|	вт_ЗаказВПроизводствоОстатки.КоличествоОстаток * ПлановаяСебестоимость.Себестоимость КАК Сумма,
		|	вт_ЗаказВПроизводствоПродукция.ВариантПроизводства КАК ВариантПроизводства
		|ИЗ
		|	Документ.вт_ЗаказВПроизводство.Товары КАК вт_ЗаказВПроизводствоПродукция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ЗаказВПроизводство.Остатки(&Период, ) КАК вт_ЗаказВПроизводствоОстатки
		|		ПО вт_ЗаказВПроизводствоПродукция.Ссылка = вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ПлановаяСебестоимостьВыпуска КАК ПлановаяСебестоимость 
		|		ПО ПлановаяСебестоимость.Номенклатура = вт_ЗаказВПроизводствоПродукция.Номенклатура И
		|		   ПлановаяСебестоимость.Характеристика = вт_ЗаказВПроизводствоПродукция.Характеристика
		|		   И ПлановаяСебестоимость.ПланЗаказ = &Заказ
		|ГДЕ
		|	вт_ЗаказВПроизводствоПродукция.Ссылка = &Заказ");
		
#КонецОбласти		
		
		 Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	вт_ЗаказВПроизводствоПродукция.Номенклатура КАК Номенклатура,
		 |	вт_ЗаказВПроизводствоПродукция.Характеристика КАК Характеристика,
		 |	вт_ЗаказВПроизводствоПродукция.ВариантПроизводства КАК ВариантПроизводства,
		 |	вт_ЗаказВПроизводствоПродукция.Ссылка КАК Ссылка
		 |ПОМЕСТИТЬ вт_ЗаказВПроизводствоПродукция
		 |ИЗ
		 |	Документ.вт_ЗаказВПроизводство.Товары КАК вт_ЗаказВПроизводствоПродукция
		 |ГДЕ
		 |	вт_ЗаказВПроизводствоПродукция.Ссылка = &Заказ
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	вт_ЗаказВПроизводствоПродукция.Номенклатура КАК Номенклатура,
		 |	вт_ЗаказВПроизводствоОстатки.КоличествоОстаток КАК Количество,
		 |	вт_ЗаказВПроизводствоОстатки.КоличествоОстаток КАК КоличествоПлан,
		 |	вт_ЗаказВПроизводствоПродукция.Характеристика КАК Характеристика,
		 |	ПлановаяСебестоимость.Себестоимость КАК Цена,
		 |	вт_ЗаказВПроизводствоОстатки.КоличествоОстаток * ПлановаяСебестоимость.Себестоимость КАК Сумма,
		 |	вт_ЗаказВПроизводствоПродукция.ВариантПроизводства КАК ВариантПроизводства
		 |ИЗ
		 |	вт_ЗаказВПроизводствоПродукция КАК вт_ЗаказВПроизводствоПродукция
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ЗаказВПроизводство.Остатки(&Период, ) КАК вт_ЗаказВПроизводствоОстатки
		 |		ПО вт_ЗаказВПроизводствоПродукция.Ссылка = вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства
		 |			И вт_ЗаказВПроизводствоПродукция.Номенклатура = вт_ЗаказВПроизводствоОстатки.Номенклатура
		 |			И вт_ЗаказВПроизводствоПродукция.Характеристика = вт_ЗаказВПроизводствоОстатки.Характеристика
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ПлановаяСебестоимостьВыпуска КАК ПлановаяСебестоимость
		 |		ПО (ПлановаяСебестоимость.Номенклатура = вт_ЗаказВПроизводствоПродукция.Номенклатура)
		 |			И (ПлановаяСебестоимость.Характеристика = вт_ЗаказВПроизводствоПродукция.Характеристика)
		 |			И (ПлановаяСебестоимость.ПланЗаказ = &Заказ)
		 |ГДЕ
		 |	вт_ЗаказВПроизводствоПродукция.Ссылка = &Заказ");
		
		
		
		Запрос.УстановитьПараметр("Заказ",ДокументОснование);
		Запрос.УстановитьПараметр("Период",КонецДня(ТекущаяДата()));
		
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
		//заполняем сырье 		
		НппСтрок = 1;
		Для Каждого СтрокаТовара из Товары Цикл
			СтрокаТовара.КодСтроки = НппСтрок;
			
			пВариантПроизводства = СтрокаТовара.ВариантПроизводства;
			Если НЕ ЗначениеЗаполнено(пВариантПроизводства) Тогда
				пВариантПроизводства = ПолучитьСырьеТовара(СтрокаТовара.Номенклатура); 			
			КонецЕсли;	
			
			Если пВариантПроизводства <> Неопределено Тогда
				СтрокаТовара.ВариантПроизводства     = пВариантПроизводства;
				СтрокаТовара.ВесДетали 			     = пВариантПроизводства.ВесДетали;
				
				Если пВариантПроизводства.Состав.Количество() > 0 Тогда
					Для Каждого СтрокаСырье Из пВариантПроизводства.Состав Цикл						
						НовСтрокаСырье = вт_ПроизводствоСырье.Добавить();
						НовСтрокаСырье.Номенклатура 	      = СтрокаСырье.Сырье;
						НовСтрокаСырье.Характеристика 		  = СтрокаСырье.Характеристика;
						НовСтрокаСырье.КоличествоПлан         = СтрокаСырье.Количество * СтрокаТовара.КоличествоПлан / пВариантПроизводства.Количество;
						НовСтрокаСырье.Количество             = СтрокаСырье.Количество * СтрокаТовара.Количество  / пВариантПроизводства.Количество;
						НовСтрокаСырье.ГотоваяПродукция       = СтрокаТовара.Номенклатура;
						НовСтрокаСырье.КлючСвязиСтроки        = СтрокаТовара.КодСтроки;						
					КонецЦикла;	
				КонецЕсли;	
				
				втЗаполнитьБракДробленкаПоСпецификацииСервер(НппСтрок,СтрокаТовара.Номенклатура,пВариантПроизводства,СтрокаТовара.КоличествоПлан);
				
			КонецЕсли;			
			НппСтрок = НппСтрок + 1;
			
		КонецЦикла;	
		
						 
		
	ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ПланПроизводства") Тогда
		
		ЭтотОбъект.Склад = ДокументОснование.СкладПроизводства;
		
		Если  ЗначениеЗаполнено(ДокументОснование.ДокументОснования) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	вт_ПланПроизводстваТоваровОстатки.Номенклатура,
			|	вт_ПланПроизводстваТоваровОстатки.Характеристика,
			|	вт_ПланПроизводстваТоваровОстатки.КоличествоОстаток КАК Количество,
			|	вт_ПланПроизводстваТоваровОстатки.КоличествоОстаток КАК КоличествоПлан,
			|	ПлановаяСебестоимость.Себестоимость КАК Цена,
			|	вт_ПланПроизводстваТоваровОстатки.КоличествоОстаток * ПлановаяСебестоимость.Себестоимость КАК Сумма,
			|	вт_ПланПроизводстваТовары.ВариантПроизводства КАК ВариантПроизводства,
			|	вт_ПланПроизводстваТовары.ВариантПроизводства.ВесДетали КАК ВесДетали
			|ИЗ
			|	РегистрНакопления.вт_ПланПроизводстваТоваров.Остатки(&Период, ЗаказПроизводства = &Заказ) КАК вт_ПланПроизводстваТоваровОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ПлановаяСебестоимостьВыпуска КАК ПлановаяСебестоимость
			|		ПО (ПлановаяСебестоимость.Номенклатура = вт_ПланПроизводстваТоваровОстатки.Номенклатура)
			|			И (ПлановаяСебестоимость.Характеристика = вт_ПланПроизводстваТоваровОстатки.Характеристика)
			|			И (ПлановаяСебестоимость.ПланЗаказ = &Заказ)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ПланПроизводства.Товары КАК вт_ПланПроизводстваТовары
			|		ПО вт_ПланПроизводстваТовары.Ссылка = &План 
			|			И вт_ПланПроизводстваТоваровОстатки.Номенклатура = вт_ПланПроизводстваТовары.Номенклатура
			|			И вт_ПланПроизводстваТоваровОстатки.ЗаказПроизводства = вт_ПланПроизводстваТовары.Ссылка.ДокументОснования");
			
			
			Запрос.УстановитьПараметр("Заказ",ДокументОснование.ДокументОснования);
			Запрос.УстановитьПараметр("План",ДокументОснование);
			Запрос.УстановитьПараметр("Период",КонецДня(ТекущаяДата()));
			
			Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		иначе
			запрос = новый запрос("ВЫБРАТЬ
			                      |	вт_ПланПроизводстваРеквизитПланПоЗаказам.Номенклатура КАК Номенклатура,
			                      |	ЕСТЬNULL(вт_ЗаказВПроизводствоОстатки.КоличествоОстаток, вт_ПланПроизводстваРеквизитПланПоЗаказам.ВЗаказе) КАК Количество,
			                      |	ЕСТЬNULL(вт_ЗаказВПроизводствоОстатки.КоличествоОстаток, вт_ПланПроизводстваРеквизитПланПоЗаказам.ВЗаказе) КАК КоличествоПлан,
			                      |	ЕСТЬNULL(Номенклатура_Расширение.Себестоимость, 0) КАК Цена,
			                      |	вт_ПланПроизводстваРеквизитПланПоЗаказам.ВЗаказе * ЕСТЬNULL(Номенклатура_Расширение.Себестоимость, 0) КАК Сумма,
			                      |	вт_ПланПроизводстваРеквизитПланПоЗаказам.Заказ.ДокументОснование КАК вт_Заказ,
			                      |	вт_Заказы.ВариантПроизводства.ВесДетали КАК ВесДетали,
			                      |	вт_Заказы.ВариантПроизводства КАК ВариантПроизводства
			                      |ПОМЕСТИТЬ ВТ_Товары
			                      |ИЗ
			                      |	Документ.вт_ПланПроизводства.РеквизитПланПоЗаказам КАК вт_ПланПроизводстваРеквизитПланПоЗаказам
			                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ЗаказВПроизводство.Товары КАК вт_Заказы
			                      |		ПО (вт_Заказы.Ссылка = вт_ПланПроизводстваРеквизитПланПоЗаказам.Заказ)
			                      |			И (вт_Заказы.Номенклатура = вт_ПланПроизводстваРеквизитПланПоЗаказам.Номенклатура)
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.вт_ЗаказВПроизводство.Остатки(&Период, ) КАК вт_ЗаказВПроизводствоОстатки
			                      |		ПО вт_ПланПроизводстваРеквизитПланПоЗаказам.Номенклатура = вт_ЗаказВПроизводствоОстатки.Номенклатура
			                      |			И вт_ПланПроизводстваРеквизитПланПоЗаказам.Характеристика = вт_ЗаказВПроизводствоОстатки.Характеристика
			                      |			И вт_ПланПроизводстваРеквизитПланПоЗаказам.Заказ = вт_ЗаказВПроизводствоОстатки.ЗаказПроизводства
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Номенклатура_Расширение КАК Номенклатура_Расширение
			                      |		ПО вт_ПланПроизводстваРеквизитПланПоЗаказам.Номенклатура = Номенклатура_Расширение.Номенклатура
			                      |ГДЕ
			                      |	вт_ПланПроизводстваРеквизитПланПоЗаказам.Ссылка = &Ссылка
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ
			                      |	ВТ_Товары.Номенклатура КАК Номенклатура,
			                      |	СУММА(ВТ_Товары.Количество) КАК Количество,
			                      |	СУММА(ВТ_Товары.КоличествоПлан) КАК КоличествоПлан,
			                      |	МАКСИМУМ(ВТ_Товары.Цена) КАК Цена,
			                      |	СУММА(ВТ_Товары.Сумма) КАК Сумма,
			                      |	ВТ_Товары.вт_Заказ КАК вт_Заказ,
			                      |	ВТ_Товары.ВариантПроизводства КАК ВариантПроизводства,
			                      |	СРЕДНЕЕ(ВТ_Товары.ВесДетали) КАК ВесДетали
			                      |ИЗ
			                      |	ВТ_Товары КАК ВТ_Товары
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	ВТ_Товары.Номенклатура,
			                      |	ВТ_Товары.вт_Заказ,
			                      |	ВТ_Товары.ВариантПроизводства");
			
			Запрос.УстановитьПараметр("Ссылка",ДокументОснование);
			Запрос.УстановитьПараметр("Период",Новый Граница(?(ЗначениеЗаполнено(ЭтотОбъект.Дата),ЭтотОбъект.Дата,ТекущаяДата()),ВидГраницы.Включая));

			Товары.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
	
		НппСтрок = 1;
		Для Каждого СтрокаТовары из Товары Цикл
			СтрокаТовары.КодСтроки = НппСтрок;
			
			НппСтрок = НппСтрок + 1;
		КонецЦикла;	
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ.КодСтроки,
		               |	ВТ.Номенклатура,
					   |	ВТ.Характеристика,
		               |	ВТ.ВариантПроизводства
		               |ПОМЕСТИТЬ ВТ_ТОВАРЫ
		               |ИЗ
		               |	&ВТ КАК ВТ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТОВАРЫ.КодСтроки КАК КлючСвязиСтроки,
		               |	ВТ_ТОВАРЫ.Номенклатура КАК ГотоваяПродукция,
		               |	вт_ПланПроизводстваРеквизитТаблицаПлана.Номенклатура,
		               |	вт_ПланПроизводстваРеквизитТаблицаПлана.ПотребностьПоготовойПродукции КАК КоличествоПлан,
		               |	вт_ПланПроизводстваРеквизитТаблицаПлана.ПотребностьПоготовойПродукции КАК Количество,
		               |	ВТ_ТОВАРЫ.ВариантПроизводства
		               |ИЗ
		               |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вт_ПланПроизводства.РеквизитТаблицаПлана КАК вт_ПланПроизводстваРеквизитТаблицаПлана
		               |		ПО ВТ_ТОВАРЫ.Номенклатура = вт_ПланПроизводстваРеквизитТаблицаПлана.ГотоваяПродукция
		               |ГДЕ
		               |	вт_ПланПроизводстваРеквизитТаблицаПлана.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("ВТ",Товары.Выгрузить());
		Запрос.УстановитьПараметр("Ссылка",ДокументОснование);
		вт_ПроизводствоСырье.Загрузить(Запрос.Выполнить().Выгрузить());		
		
		
	ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.вт_ПоступлениеДавальческогоСырья") Тогда
		
		
	КонецЕсли;
		
	//заполняем оборудование 		
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Номенклатура.вт_ОсновноеОборудованиеПроизводства
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|ГДЕ
	//|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
	//
	//Запрос.УстановитьПараметр("МассивНоменклатуры", Товары.ВыгрузитьКолонку("Номенклатура"));  		
	//РезультатЗапроса = Запрос.Выполнить();
	////Заполняем основным оборудованием номенклатуры
	//Если Не РезультатЗапроса.Пустой() Тогда
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	//	КодСтроки = 1;
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если ВыборкаДетальныеЗаписи.вт_ОсновноеОборудованиеПроизводства <> Неопределено Тогда
	//			Если Не ВыборкаДетальныеЗаписи.вт_ОсновноеОборудованиеПроизводства.Пустая() Тогда
	//				СтрокаОборудования = вт_ОборудованиеПроизводства.Добавить();
	//				СтрокаОборудования.Оборудование = ВыборкаДетальныеЗаписи.вт_ОсновноеОборудованиеПроизводства;
	//				СтрокаОборудования.КодСтроки = КодСтроки;	
	//				КодСтроки = КодСтроки + 1;
	//			КонецЕсли;
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЕсли;			
	
	//Связываем товар с оборудованием 
	//И далее заполняем сырье
	КодСтроки = 1;
	Для каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.КодСтроки = КодСтроки;
		КодСтроки = КодСтроки + 1;
		//заполняем ключ связи с оборудованим
		Для каждого СтрокаОборудования из вт_ОборудованиеПроизводства Цикл
			Если СтрокаТовара.Номенклатура.вт_ОсновноеОборудованиеПроизводства = СтрокаОборудования.Оборудование Тогда
				СтрокаТовара.Оборудование = СтрокаОборудования.Оборудование;
				СтрокаТовара.КлючСвязиОборудования = СтрокаОборудования.КодСтроки;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюДоходовПоУмолчанию()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДанныеДокумента.АналитикаДоходов,
	|	ДанныеДокумента.СтатьяДоходов
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ответственный = &Ответственный
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|");
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатьяДоходов    = Выборка.СтатьяДоходов;
		АналитикаДоходов = Выборка.АналитикаДоходов;
	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	
	Ответственный = Пользователи.ТекущийПользователь();
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад",Склад)) Тогда
	//	Склад = Неопределено;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = КонстантыСервер.ПолучитьЗначениеКонстанты("вт_ПодразделениеПроизводства");
	КонецЕсли;
	
	ЗаполнитьСтатьюДоходовПоУмолчанию();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Виды запасов

// Процедура формирует сообщения об ошибках заполнения видов запасов документа.
//
// Параметры:
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок заполнения
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сборка превышает остаток товара организации %1 на складе %2 %3 %4'"),
			Организация,
			Склад,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка);
			
		КонецЦикла;                                                                                       
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуТарифовПоСотруднику(ВыбранныйСотрудник) Экспорт
	   Запрос = Новый Запрос("ВЫБРАТЬ
	                         |	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
	                         |	вт_ОтчетПроизводстваТовары.КоличествоПлан КАК КоличествоПлан
	                         |ПОМЕСТИТЬ ВТ_ТОВАРЫ
	                         |ИЗ
	                         |	&ТТ КАК вт_ОтчетПроизводстваТовары
	                         |
	                         |;
							 |ВЫБРАТЬ
	                         |	вт_ОтчетПроизводстваТовары.Номенклатура КАК Номенклатура,
	                         |	вт_ОтчетПроизводстваТовары.Количество КАК Количество
	                         |ПОМЕСТИТЬ ВТ_ОПЕРАЦИИ
	                         |ИЗ
	                         |	&ТТ_Операции КАК вт_ОтчетПроизводстваТовары
	                         |
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	                         |	ВТ_ТОВАРЫ.Номенклатура КАК Номенклатура,
	                         |	ВТ_ТОВАРЫ.КоличествоПлан КАК КоличествоПлан,
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа КАК ПредметТарифа
	                         |ПОМЕСТИТЬ ВТ_ПОТОВАРАМ
	                         |ИЗ
	                         |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	                         |		ПО ВТ_ТОВАРЫ.Номенклатура = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	                         |ГДЕ
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	                         |;
							 |/////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	                         |	ВТ_ОПЕРАЦИИ.Номенклатура КАК Номенклатура,
	                         |	ВТ_ОПЕРАЦИИ.Количество КАК Количество,
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа КАК ПредметТарифа
	                         |ПОМЕСТИТЬ ВТ_ПООПЕРАЦИЯМ
	                         |ИЗ
	                         |	ВТ_ОПЕРАЦИИ КАК ВТ_ОПЕРАЦИИ
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	                         |		ПО ВТ_ОПЕРАЦИИ.Номенклатура = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	                         |ГДЕ
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВТ_ТОВАРЫ.Номенклатура КАК Номенклатура,
	                         |	ВТ_ТОВАРЫ.КоличествоПлан КАК КоличествоПлан,
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	                         |	ВТ_ТОВАРЫ.Номенклатура КАК ПредметТарифа
	                         |ПОМЕСТИТЬ ВТ_ПОВИДАМ
	                         |ИЗ
	                         |	ВТ_ТОВАРЫ КАК ВТ_ТОВАРЫ
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	                         |		ПО ВТ_ТОВАРЫ.Номенклатура.ВидНоменклатуры = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПОТОВАРАМ КАК ВТ_ПОТОВАРАМ
	                         |		ПО ВТ_ТОВАРЫ.Номенклатура = ВТ_ПОТОВАРАМ.Номенклатура
	                         |ГДЕ
	                         |	ЕСТЬNULL(ВТ_ПОТОВАРАМ.КоличествоПлан, 1) = 1
	                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	                         |;
	                         |
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВТ_ОПЕРАЦИИ.Номенклатура КАК Номенклатура,
	                         |	ВТ_ОПЕРАЦИИ.Количество КАК Количество,
	                         |	вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Тариф КАК Тариф,
	                         |	ВТ_ОПЕРАЦИИ.Номенклатура КАК ПредметТарифа
	                         |ПОМЕСТИТЬ ВТ_ПОВИДАМ_ОПЕРАЦИИ
	                         |ИЗ
	                         |	ВТ_ОПЕРАЦИИ КАК ВТ_ОПЕРАЦИИ
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вт_ТарифыСотрудниковВыпускПродукции.СрезПоследних(&НаДату, ) КАК вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних
	                         |		ПО ВТ_ОПЕРАЦИИ.Номенклатура.ВидНоменклатуры = вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.ПредметТарифа
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПООПЕРАЦИЯМ КАК ВТ_ПООПЕРАЦИЯМ
	                         |		ПО ВТ_ОПЕРАЦИИ.Номенклатура = ВТ_ПООПЕРАЦИЯМ.Номенклатура
	                         |ГДЕ
	                         |	ЕСТЬNULL(ВТ_ПООПЕРАЦИЯМ.Количество, 1) = 1
	                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Сотрудник = &Сотрудник
	                         |	И вт_ТарифыСотрудниковВыпускПродукцииСрезПоследних.Подразделение = &Подразделение
	                         |;
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
							 |	&Сотрудник КАК Сотрудник,
	                         |	ВТ_ПОТОВАРАМ.Тариф КАК Тариф,
	                         |	ВТ_ПОТОВАРАМ.Номенклатура КАК Номенклатура,
	                         |	ВТ_ПОТОВАРАМ.КоличествоПлан КАК Количество,
	                         |	ВТ_ПОТОВАРАМ.ПредметТарифа КАК РазрезНачисления
	                         |ИЗ
	                         |	ВТ_ПОТОВАРАМ КАК ВТ_ПОТОВАРАМ
	                         |
	                         |ОБЪЕДИНИТЬ ВСЕ
	                         |
	                         |ВЫБРАТЬ
							 |	&Сотрудник КАК Сотрудник,
	                         |	ВТ_ПОВИДАМ.Тариф,
	                         |	ВТ_ПОВИДАМ.Номенклатура,
	                         |	ВТ_ПОВИДАМ.КоличествоПлан,
	                         |	ВТ_ПОВИДАМ.ПредметТарифа
	                         |ИЗ
	                         |	ВТ_ПОВИДАМ КАК ВТ_ПОВИДАМ
							 |
	                         |ОБЪЕДИНИТЬ ВСЕ
							 |
							 |ВЫБРАТЬ
							 |	&Сотрудник КАК Сотрудник,
	                         |	ВТ_ПООПЕРАЦИЯМ.Тариф КАК Тариф,
	                         |	ВТ_ПООПЕРАЦИЯМ.Номенклатура КАК Номенклатура,
	                         |	ВТ_ПООПЕРАЦИЯМ.Количество КАК Количество,
	                         |	ВТ_ПООПЕРАЦИЯМ.ПредметТарифа КАК РазрезНачисления
	                         |ИЗ
	                         |	ВТ_ПООПЕРАЦИЯМ КАК ВТ_ПООПЕРАЦИЯМ
	                         |
							 |ОБЪЕДИНИТЬ ВСЕ
							 |
	                         |ВЫБРАТЬ
							 |	&Сотрудник КАК Сотрудник,
	                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.Тариф,
	                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.Номенклатура,
	                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.Количество,
	                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ.ПредметТарифа
	                         |ИЗ
	                         |	ВТ_ПОВИДАМ_ОПЕРАЦИИ КАК ВТ_ПОВИДАМ_ОПЕРАЦИИ
							 |");
	   Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	   Запрос.УстановитьПараметр("НаДату",КонецДня(ЭтотОбъект.Дата));
	   Запрос.УстановитьПараметр("Сотрудник",ВыбранныйСотрудник);
	   Запрос.УстановитьПараметр("Подразделение",ЭтотОбъект.Подразделение);
	   
	   Запрос.УстановитьПараметр("ТТ",ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, КоличествоПлан"));
	   Запрос.УстановитьПараметр("ТТ_Операции",ЭтотОбъект.Операции.Выгрузить(,"Номенклатура, Количество"));
	   
	   Выборка = Запрос.Выполнить().Выбрать();
	   Пока Выборка.Следующий() Цикл
		    НоваяСтрока = ЭтотОбъект.Сотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Выборка.Тариф * Выборка.Количество;
	   КонецЦикла;
	   
	   
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ПолучитьСырьеТовара(пНоменклатура)
	пВариантПроизводства = Неопределено;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	вт_ВариантыПроизводстваПоТехКартам.Ссылка
		|ИЗ
		|	Справочник.вт_ВариантыПроизводстваПоТехКартам КАК вт_ВариантыПроизводстваПоТехКартам
		|ГДЕ
		|	вт_ВариантыПроизводстваПоТехКартам.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	вт_ВариантыПроизводстваПоТехКартам.Основной";
	
	Запрос.УстановитьПараметр("Владелец", пНоменклатура);		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		пВариантПроизводства = Выборка.Ссылка;
	КонецЕсли;
	Возврат пВариантПроизводства;	
КонецФункции	

Функция ПолучитьСырьеКВыводуИЗРезерва(РезервСырьяЗаказан,РезервСырьяПотрачен);
	
	Для Каждого СтрокаЗаказана Из РезервСырьяЗаказан Цикл
		Потрачено = РезервСырьяПотрачен.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Склад",
		СтрокаЗаказана.Номенклатура, СтрокаЗаказана.Характеристика, СтрокаЗаказана.Склад));
		Если Потрачено.Количество() = 1 Тогда
			//В РезервСырьяЗаказан пишем количество, которое потрачено из резерва			
			КонтрольВключен = Документы.вт_ЗаказВПроизводство.ВключенКонтрольПоОстаткамСУчетомРезерва(СтрокаЗаказана.Склад,
			СтрокаЗаказана.Номенклатура, СтрокаЗаказана.Характеристика);
			Если НЕ КонтрольВключен Тогда 			
				СтрокаЗаказана.ВНаличии = Мин(СтрокаЗаказана.ВНаличии, Потрачено[0].ВРезервеПодЗаказ);
			КонецЕсли;	
			СтрокаЗаказана.ВРезервеПодЗаказ = Мин(СтрокаЗаказана.ВРезервеПодЗаказ, Потрачено[0].ВРезервеПодЗаказ);			
		КонецЕсли;
	КонецЦикла;	
	Возврат РезервСырьяЗаказан;
КонецФункции	

Функция ПолучитьИзрасходованноеСырье()
	ТЗРезерв = Новый ТаблицаЗначений;
	ТЗРезерв.Колонки.Добавить("Номенклатура");
	ТЗРезерв.Колонки.Добавить("Характеристика");
	ТЗРезерв.Колонки.Добавить("Склад");
	ТЗРезерв.Колонки.Добавить("ВРезервеПодЗаказ");
	Для Каждого СырьеИзрасходовано Из вт_ПроизводствоСырье Цикл
		СтрокаСырья = ТЗРезерв.Добавить();
		СтрокаСырья.Номенклатура = СырьеИзрасходовано.Номенклатура;
		СтрокаСырья.Характеристика = СырьеИзрасходовано.Характеристика;
		СтрокаСырья.Склад = Склад; //СкладСырья
		СтрокаСырья.ВРезервеПодЗаказ = СырьеИзрасходовано.Количество;
	КонецЦикла;	
	ТЗРезерв.Свернуть("Номенклатура, Характеристика, Склад", "ВРезервеПодЗаказ");
	Возврат ТЗРезерв;
КонецФункции

Функция ПолучитьРезервСырья(ДокументОснование)
	НужныйДокумент = ДокументОснование;
	//Движения = РегистрыНакопления.СвободныеОстатки.СоздатьНаборЗаписей();
	//Движения.Отбор.Регистратор.Значение = НужныйДокумент;
	//Движения.Прочитать();
	//ТЗРезерв = Новый ТаблицаЗначений;
	//ТЗРезерв.Колонки.Добавить("Номенклатура");
	//ТЗРезерв.Колонки.Добавить("Характеристика");
	//ТЗРезерв.Колонки.Добавить("Склад");
	//ТЗРезерв.Колонки.Добавить("ВРезервеПодЗаказ");
	//Для Каждого ОчередноеДвижение Из Движения Цикл
	//	Если ОчередноеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
	//		СтрокаРезерва = ТЗРезерв.Добавить();
	//		СтрокаРезерва.Номенклатура  =  ОчередноеДвижение.Номенклатура;
	//		СтрокаРезерва.Характеристика = ОчередноеДвижение.Характеристика;
	//		СтрокаРезерва.Склад = ОчередноеДвижение.Склад;
	//		СтрокаРезерва.ВРезервеПодЗаказ = ОчередноеДвижение.ВРезервеПодЗаказ;
	//	КонецЕсли;	
	//КонецЦикла;   
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СвободныеОстаткиОбороты.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОбороты.Характеристика КАК Характеристика,
	|	СвободныеОстаткиОбороты.Склад КАК Склад,
	|	СвободныеОстаткиОбороты.ВРезервеПодЗаказПриход КАК ВРезервеПодЗаказ,
	|	СвободныеОстаткиОбороты.ВНаличииРасход КАК ВНаличии
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Обороты(, , Регистратор, ) КАК СвободныеОстаткиОбороты
	|ГДЕ
	|	СвободныеОстаткиОбороты.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор",ДокументОснование);
	ТЗРезерв = Запрос.Выполнить().Выгрузить();
	ТЗРезерв.Свернуть("Номенклатура, Характеристика, Склад", "ВРезервеПодЗаказ, ВНаличии");
	Возврат ТЗРезерв;
КонецФункции	

Процедура СнятьРезервСырьяДокументаОснования()
	//СырьеВывестиИзРезерва - общая переменная модуля (Таблица значений) заполняется в обработчике ПередЗаписью
	Если СырьеВывестиИзРезерва=Неопределено ТОгда
		Возврат;
	КонецЕсли;	
	СырьеВывестиИзРезерва.Колонки.Добавить("ВидДвижения");
	СырьеВывестиИзРезерва.Колонки.Добавить("Период");
	ТаблДвиж  = СырьеВывестиИзРезерва.СкопироватьКолонки();
	Для Каждого СтрДвиж Из СырьеВывестиИзРезерва Цикл
		КонтрольВключен = Документы.вт_ЗаказВПроизводство.ВключенКонтрольПоОстаткамСУчетомРезерва(СтрДвиж.Склад,
		СтрДвиж.Номенклатура,стрДвиж.Характеристика);
		Если Не КонтрольВключен Тогда
			СтрокаТаблДвиж = ТаблДвиж.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблДвиж,СтрДвиж,,"ВРезервеПодЗаказ"); // ВРезервеПодЗаказ - исключаем, берем в запись ВНаличии
			СтрокаТаблДвиж.ВидДвижения = ВидДвиженияНакопления.Приход;   // Возвращаем снятое заказом с наличия сырье
			СтрокаТаблДвиж.Период = Дата;
		КонецЕсли;	
		СтрокаТаблДвиж = ТаблДвиж.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблДвиж,СтрДвиж,,"ВНаличии"); //ВНаличии - исключаем, Берем в запись ВРезервеПодЗаказ 
		СтрокаТаблДвиж.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаТаблДвиж.Период = Дата;   
		
	КонецЦикла;	
	
	ЭтотОбъект.Движения.СвободныеОстатки.Загрузить(ТаблДвиж);
	ЭтотОбъект.Движения.СвободныеОстатки.Записать(Истина);
КонецПроцедуры

Процедура втЗаполнитьБракДробленкаПоСпецификацииСервер(КодСтроки, ГотоваяПродукция, ВариантПроизводства, КоличествоПлан) Экспорт
		 	 
	 //Загружаем новые данные по этой номенклатура
	  Для Каждого СтрокаОтходы из ВариантПроизводства.Отходы Цикл
		 ОтборПоСырье = Новый Структура("Дробленка, ГотоваяПродукция, КлючСвязиСтроки", СтрокаОтходы.Номенклатура, ГотоваяПродукция, КодСтроки);
		 НайденыСтрокиСырье = ЭтотОбъект.вт_БракДробленка.НайтиСтроки(ОтборПоСырье);
		 Если НайденыСтрокиСырье.количество()=0  Тогда
			 СтрокаНовая = ЭтотОбъект.вт_БракДробленка.Добавить();
			 СтрокаНовая.ГотоваяПродукция = ГотоваяПродукция;
			 СтрокаНовая.Дробленка = СтрокаОтходы.Номенклатура;
			 СтрокаНовая.Количество = КоличествоПлан *СтрокаОтходы.Количество/100; //Отходы заданы в % от общего числа продукции
			 СтрокаНовая.КлючСвязиСтроки = КодСтроки;
		Иначе                                      
			 Для каждого ПозицияНайденоСырье из НайденыСтрокиСырье  Цикл
				 ПозицияНайденоСырье.ГотоваяПродукция = ГотоваяПродукция;
				 ПозицияНайденоСырье.Дробленка = СтрокаОтходы.Номенклатура;
				 ПозицияНайденоСырье.Количество = КоличествоПлан*СтрокаОтходы.Количество/100; //Отходы заданы в % от общего числа продукции
				 ПозицияНайденоСырье.КлючСвязиСтроки = КодСтроки;
			 КонецЦикла;	 
		 КонецЕсли;		 		 
	 КонецЦикла;
	 	
 КонецПроцедуры	
 
///////////////////////////////////////////////////
//
/////////////////////////////////////////////////// 
Процедура ОбработатьДокументыРасходов_ПередЗаписью(РежимЗаписи)
	
	МетаДокРасход = Метаданные.Документы.ПрочиеДоходыРасходы;
	
	///////////////////////////////////////////////////
	//Прочие расходы
	///////////////////////////////////////////////////
	        
	Если ЗначениеЗаполнено(ДокументПрочихРасходов) Тогда
		ОбработатьДокументПрочийРасход_ПередЗаписью(ДокументПрочихРасходов, РежимЗаписи);
		//ДокРасход = ДокументПрочихРасходов.ПолучитьОбъект();
		//
		//Если ЭтотОбъект.ПометкаУдаления И НЕ Ссылка.ПометкаУдаления ТОгда
		//	ДокРасход.УстановитьПометкуУдаления(Истина);
		//ИначеЕсли Ссылка.ПометкаУдаления И НЕ ЭтотОбъект.ПометкаУдаления тОгда
		//	ДокРасход.УстановитьПометкуУдаления(Ложь);
		//ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ДокРасход.Проведен Тогда
		//	ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//ИначеЕсли ДокРасход.ПрочиеРасходы.Количество() = 0 Тогда
		//	Если ПравоДоступа("Удаление",МетаДокРасход) Тогда
		//		ДокРасход.Удалить();
		//		ДокументПрочихРасходов = Неопределено;
		//	КонецЕсли;
		//ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение ТОгда
		//	ДокРасход.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////
	//расходы по з/п
	///////////////////////////////////////////////////
		
	Если ЗначениеЗаполнено(ДокументРасходовЗарплата) Тогда
		ОбработатьДокументПрочийРасход_ПередЗаписью(ДокументРасходовЗарплата, РежимЗаписи);
		
		//ДокРасход = ДокументРасходовЗарплата.ПолучитьОбъект();
		//
		//Если ЭтотОбъект.ПометкаУдаления И НЕ Ссылка.ПометкаУдаления ТОгда
		//	ДокРасход.УстановитьПометкуУдаления(Истина);
		//ИначеЕсли Ссылка.ПометкаУдаления И НЕ ЭтотОбъект.ПометкаУдаления тОгда
		//	ДокРасход.УстановитьПометкуУдаления(Ложь);
		//ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ДокРасход.Проведен Тогда

		//	ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);	

		//ИначеЕсли ДокРасход.ПрочиеРасходы.Количество() = 0 Тогда
		//	Если ПравоДоступа("Удаление",МетаДокРасход) Тогда
		//		ДокРасход.Удалить();	
		//		ДокументРасходовЗарплата = Неопределено;
		//	КонецЕсли;
		//ИначеЕсли 	РежимЗаписи = РежимЗаписиДокумента.Проведение ТОгда
		//	ДокРасход.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////
	//расходы по операциям
	///////////////////////////////////////////////////
	Если ЗначениеЗаполнено(ДокументРасходовОперации) Тогда
		ОбработатьДокументПрочийРасход_ПередЗаписью(ДокументРасходовОперации, РежимЗаписи);

		//ДокРасход = ДокументРасходовОперации.ПолучитьОбъект();
		//
		//Если ЭтотОбъект.ПометкаУдаления И НЕ Ссылка.ПометкаУдаления ТОгда
		//	ДокРасход.УстановитьПометкуУдаления(Истина);
		//ИначеЕсли Ссылка.ПометкаУдаления И НЕ ЭтотОбъект.ПометкаУдаления тОгда
		//	ДокРасход.УстановитьПометкуУдаления(Ложь);
		//ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ДокРасход.Проведен Тогда
		//	ДокРасход.Записать(РежимЗаписиДокумента.ОтменаПроведения);		
		//ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//	ДокРасход.Записать(РежимЗаписиДокумента.Проведение);			
		//КонецЕсли;
		
	КонецЕсли;
	 
КонецПроцедуры	 

Процедура ОбработатьДокументПрочийРасход_ПередЗаписью(ДокументРасходовСсылка, РежимЗаписи)
	ДокументРасходов = ДокументРасходовСсылка.ПолучитьОбъект();
	Если ЭтотОбъект.ПометкаУдаления И НЕ Ссылка.ПометкаУдаления ТОгда
		ДокументРасходов.УстановитьПометкуУдаления(Истина);
	ИначеЕсли Ссылка.ПометкаУдаления И НЕ ЭтотОбъект.ПометкаУдаления тОгда
		ДокументРасходов.УстановитьПометкуУдаления(Ложь);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ДокументРасходов.Проведен Тогда
		ДокументРасходов.Записать(РежимЗаписиДокумента.ОтменаПроведения);		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И ДокументРасходов.ПометкаУдаления=ЛОЖЬ Тогда
		ДокументРасходов.Записать(РежимЗаписиДокумента.Проведение);			
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработатьДокументыРасходов_ПриЗаписи()
	
 	Если ЗначениеЗаполнено(ДокументПрочихРасходов) Тогда
		ПроверитьУстановитьАналитикуПрочихРасходов(ДокументПрочихРасходов);
	КонецЕсли;
	
	///////////////////////////////////////////////////
	//расходы по з/п
	///////////////////////////////////////////////////
		
	Если ЗначениеЗаполнено(ДокументРасходовЗарплата) Тогда
		ПроверитьУстановитьАналитикуПрочихРасходов(ДокументРасходовЗарплата);
	КонецЕсли;
	
	///////////////////////////////////////////////////
	//расходы по операциям
	///////////////////////////////////////////////////
	Если ЗначениеЗаполнено(ДокументРасходовОперации) Тогда
		ПроверитьУстановитьАналитикуПрочихРасходов(ДокументРасходовОперации);
	КонецЕсли;

	
КонецПроцедуры

Процедура ПроверитьУстановитьАналитикуПрочихРасходов(ДокСсылка)
	ДокРасход = ДокСсылка.ПолучитьОбъект();
	
	ДелатьЗапись = ЛОЖЬ; 
	Для Каждого СтрокаРасходов из ДокРасход.ПрочиеРасходы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасходов.АналитикаРасходов) Тогда
			СтрокаРасходов.АналитикаРасходов 		= ЭтотОбъект.Ссылка;
			ДелатьЗапись = ИСТИНА; 
		КонецЕсли;
	КонецЦикла;	
	
	Если ДелатьЗапись Тогда
		 ДокРасход.Записать(?(ДокРасход.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	 
КонецПроцедуры	 
#КонецЕсли

