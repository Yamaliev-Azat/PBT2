
&ИзменениеИКонтроль("ПостроитьДеревоЦен")
Процедура Расш2_ПостроитьДеревоЦен(Форма, ИмяТаблицы)

	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();

	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ДеревоЗначений = Новый ТаблицаЗначений;
	Иначе
		ДеревоЗначений = Новый ДеревоЗначений;
	КонецЕсли;

	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));

	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда

		ДеревоЗначений.Колонки.Добавить("НоменклатураПартнера",     Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));

		Если ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
			ДеревоЗначений.Колонки.Добавить("Упаковка",                              Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименование",              Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураСопоставленаАвтоматически", Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("СтрокаСопоставлена",                    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("КоличествоНоменклатурыДляВыбора",       Новый ОписаниеТипов("Число"));
			ДеревоЗначений.Колонки.Добавить("АртикулОтличается",                     Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименованиеОтличается",    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЦенаНеРаспознана",                      Новый ОписаниеТипов("Булево"));
		КонецЕсли;

	Иначе
		ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",      Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ДеревоЗначений.Колонки.Добавить("РеквизитСортировки", Новый ОписаниеТипов("Число"));
	КонецЕсли;

	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл

		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда

			ИмяКолонки = ВидЦены.ИмяКолонки;

			ДеревоЗначений.Колонки.Добавить(                          ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СтараяЦена"              + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ПроцентИзменения"        + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СуммаИзменения"          + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"         + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаАвтоматически"   + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("КартинкаИзмененаВручную" + ИмяКолонки, Новый ОписаниеТипов("Число"),                                                                 ВидЦены.Наименование);
			#Вставка
			ДеревоЗначений.Колонки.Добавить("Валюта" 				  + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"),  											   ВидЦены.Наименование);
			#КонецВставки
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "Упаковка");
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	КолонкаОтступ = ДеревоЗначений.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Отступ'"));

	РеквизитыТаблицыЦен = Форма.ПолучитьРеквизиты(ИмяТаблицы);
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если СтрНайти(Реквизит.Имя, "ВидЦены") ИЛИ СтрНайти(Реквизит.Имя, "Отступ") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти(ИмяТаблицы + "." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(КолонкаОтступ.Имя, КолонкаОтступ.ТипЗначения, ИмяТаблицы, КолонкаОтступ.Заголовок, Истина));

	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Форма.Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, "ВидЦены") ИЛИ СтрНайти(ТекЭлемент.Имя, "Отступ") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	Для Каждого Оформление Из Форма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Оформление Из УсловныеОформления Цикл
		Форма.УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;

	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл

		ИмяКолонки = ВидЦены.ИмяКолонки;

		Если ВидЦены.Выбрана ИЛИ ?(Форма.ОтображатьВлияющиеЦены, ВидЦены.Влияет, Ложь) Тогда

			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;

			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда

				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;

			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда

				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;

			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда

				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоФормуламОтДругихВидовЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;

			КонецЕсли;

			НоваяГруппа = ДобавитьГруппуФормы(Форма, "ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);

			Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Или
				ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда

				Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
					ДатаДействующихЦен = КонецДня(Форма.ДатаДействующихЦен);
				Иначе
					ДатаДействующихЦен = НачалоДня(Форма.Дата)-1;
				КонецЕсли;
				ЗаголовокКолонкиСтараяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена на %1'"), Формат(ДатаДействующихЦен, "ДЛФ=D"));

			Иначе

				ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Действующая цена'"), НСтр("ru='Цена'"));

			КонецЕсли;

			Если ВидЦены.Выбрана Тогда

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);

				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Изменение'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);

				НовоеПоле = ДобавитьПолеФормы(Форма,"СуммаИзменения" + ИмяКолонки, СтруктураПараметров);

				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Изменение цены'");

				#Вставка
				////////////////////
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Валюта'"));
				//СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенВалютаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             6);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"Валюта" + ИмяКолонки, СтруктураПараметров);

				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Валюта'");			
				
				////////////////////////
				#КонецВставки				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              "%");
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             6);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"ПроцентИзменения" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения цены'");

				НоваяГруппаЦена = ДобавитьГруппуФормы(Форма, "ГруппаЦена" + ИмяКолонки, НСтр("ru='Цена'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);

				НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + "Картинка" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаЦена);
				НовоеПоле.ПутьКДанным         = "ДеревоЦен.ИзмененаВручную" + ИмяКолонки;
				НовоеПоле.Заголовок           = "";
				НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
				НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
				НовоеПоле.ТолькоПросмотр      = Истина;
				НовоеПоле.Ширина              = 2;
				НовоеПоле.ОтображатьВШапке    = Ложь;
				НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.Изменить;
				НовоеПоле.КартинкаШапки = БиблиотекаКартинок.Изменить;
				НовоеПоле.Видимость  = Истина;
				НовоеПоле.РастягиватьПоГоризонтали = Ложь;

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Цена'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);

				НовоеПоле = ДобавитьПолеФормы(Форма, ИмяКолонки, СтруктураПараметров);


			Иначе

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);

				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);

				НовоеПоле.ЦветТекста = WebЦвета.Серый;

			КонецЕсли;

			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы(Форма, "ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Ед. изм.'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);

				НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы." + ИмяТаблицы + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Упаковка'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенУпаковкаПриИзменении");
				СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "Подключаемый_ДеревоЦенУпаковкаНачалоВыбора");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
				СтруктураПараметров.Вставить("ОтображатьВШапке",       Ложь);

				ДобавитьПолеФормы(Форма,"Упаковка" + ИмяКолонки, СтруктураПараметров);

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);

				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);

			Иначе
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);

				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
			КонецЕсли;

			// Условное оформление увеличившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;

			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);

			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);

			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);

			// Условное оформление уменьшившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;

			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);

			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);

			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноЗеленый);

			// Условное оформление единиц измерения
			НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, "ДеревоЦенЕдиницаИзмерения" + ИмяКолонки, "ДеревоЦен.Упаковка" + ИмяКолонки);

			Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда

				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;

				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;

				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ХарактеристикиИспользуются");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Ложь;

				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);

				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

				//

				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;

				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;

				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Характеристика");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);

				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;

				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;

				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПроцентИзменения" + ИмяКолонки);

				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ШиринаПоля",             30);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);

	НовоеПоле = ДобавитьПолеФормы(Форма, "Отступ", СтруктураПараметров);
	НовоеПоле.ЦветТекста = WebЦвета.Серый;
	НовоеПоле.Видимость  = Истина;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.РастягиватьПоГоризонтали = Истина;

	ДеревоЦенЗначение = Форма.РеквизитФормыВЗначение(ИмяТаблицы);
	ДеревоЦенЗначение.Колонки.Очистить();

	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;

	Форма.ЗначениеВРеквизитФормы(ДеревоЦенЗначение, ИмяТаблицы);
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ВыбранныеЦеныИзменены") Тогда
		Форма.ВыбранныеЦеныИзменены = Ложь;
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ЗагрузитьТабличнуюЧастьТовары")
Процедура Расш2_ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных)

	УстановитьПривилегированныйРежим(Истина);

	Если Не ЭтоРегистрацияЦенПоставщика(Форма) Тогда

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		#Вставка
		|	ВременнаяТаблицаТовары.Валюта                         КАК Валюта,
		#КонецВставки
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
		|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
		|;
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		#Вставка
		|	ВременнаяТаблицаТовары.Валюта                         КАК Валюта,
		#КонецВставки		
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную,
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ КАК ДействующаяЦена,
		|	
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 ТОГДА 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ)/ 
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
		|	
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, (Номенклатура, Характеристика) В (Выбрать Номенклатура, Характеристика ИЗ ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
		|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
		|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");

	Иначе

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.НоменклатураПартнера           КАК НоменклатураПартнера,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦеныПоставщика              КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
		|;
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.НоменклатураПартнера           КАК НоменклатураПартнера,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ЛОЖЬ                                                  КАК ЦенаИзмененаВручную,
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ КАК ДействующаяЦена,
		|	
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 ТОГДА 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ)/ 
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
		|	
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Дата) КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.Номенклатура           = ВременнаяТаблицаТовары.Номенклатура
		|			 И ЦеныНоменклатуры.Характеристика         = ВременнаяТаблицаТовары.Характеристика
		|			 И ЦеныНоменклатуры.ВидЦеныПоставщика      = ВременнаяТаблицаТовары.ВидЦены
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");

	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки1",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ЦеныНоменклатуры.Упаковка",
	"ЦеныНоменклатуры.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки2",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ВременнаяТаблицаТовары.Упаковка",
	"ВременнаяТаблицаТовары.Номенклатура"));
	
	ТаблицаТоваров = Форма.Объект.Товары.Выгрузить();

	ДобавитьТоварыПоОтбору(Форма,,ТаблицаТоваров);

	Если ТаблицаТоваров.Колонки.Найти("Индекс") = Неопределено Тогда
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	КонецЕсли;

	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("Дата", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных);

КонецПроцедуры

&ИзменениеИКонтроль("ЗагрузитьТоварыВДеревоЦен")
Процедура Расш2_ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных)

	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыДереваЦен = Форма.ДеревоЦен;
	Иначе
		ЭлементыДереваЦен = Форма.ДеревоЦен.ПолучитьЭлементы();
	КонецЕсли;

	Пока ВыборкаНоменклатура.Следующий() Цикл

		ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаНоменклатура, КэшДанных);

		Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;

		Если ЭлементНоменклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаНоменклатура.ВидЦены, КэшДанных);

		ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаНоменклатура.Цена;
		ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаНоменклатура.ДействующаяЦена;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.ДействующаяЦена) Тогда
			ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ВыборкаНоменклатура.Цена - ВыборкаНоменклатура.ДействующаяЦена;
		КонецЕсли;
		ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаНоменклатура.Процент;
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			ЭлементНоменклатура["Упаковка"         + ИмяКолонки] = ВыборкаНоменклатура.Упаковка;
		КонецЕсли;
		ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаНоменклатура.ЦенаИзмененаВручную;

		#Вставка
		ЭлементНоменклатура["Валюта"  + ИмяКолонки] = ВыборкаНоменклатура.Валюта;
		#КонецВставки
	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("ПоместитьСтрокуЦенВТабличнуюЧасть")
Процедура Расш2_ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, СтрокаЦен)

	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Параметры.Форма);

	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл

		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда

			ИмяКолонки = ВидЦены.ИмяКолонки;
			ЕстьКолонкаЦены = СтрокаЦен.Свойство(ИмяКолонки);
			Если ЕстьКолонкаЦены Тогда
				Цена = СтрокаЦен[ИмяКолонки];
			КонецЕсли;

			Если ЭтоРегистрацияЦенПоставщика Тогда
				Если Цена = 0 ИЛИ Не ЕстьКолонкаЦены Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			НоваяСтрока                = Параметры.ТабличныеЧасти[0].Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
			Если ЭтоРегистрацияЦенПоставщика Тогда
				НоваяСтрока.НоменклатураПартнера = СтрокаЦен.НоменклатураПартнера;
				НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;
			Иначе
				НоваяСтрока.ВидЦены = ВидЦены.Ссылка;
			КонецЕсли;
			#Вставка
			Валюта = СтрокаЦен["Валюта" + ИмяКолонки];
			НоваяСтрока.Валюта = Валюта;
			#КонецВставки

			Если ЕстьКолонкаЦены Тогда
				НоваяСтрока.Цена = Цена;
				Если Не ЭтоРегистрацияЦенПоставщика Тогда
					НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
				КонецЕсли;
			КонецЕсли;

			Если Параметры.Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ИмяКолонки = "Упаковка" + ИмяКолонки;
				Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
					НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
