
Функция гл_ПолучитьДокументыПоОбразцу(парам_Номенклатура, парам_КодПродукта, парам_ДокументПоступления) Экспорт
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	АктОтбораТЧ_Образцы.Ссылка КАК Документ,
	                |	АктОтбораТЧ_Образцы.Ссылка.ВИСтрокой КАК ВИСтрокой
	                |ИЗ
	                |	Документ.АктОтбора.ТЧ_Образцы КАК АктОтбораТЧ_Образцы
	                |ГДЕ
	                |	АктОтбораТЧ_Образцы.Ссылка.Номенклатура = &Номенклатура
	                |	И АктОтбораТЧ_Образцы.КодПродукта = &КодПродукта
	                |	И АктОтбораТЧ_Образцы.Ссылка = &ДокументПоступления
	                |	И АктОтбораТЧ_Образцы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	АктПриемаОбразцовТЧ_Образцы.Ссылка,
	                |	NULL
	                |ИЗ
	                |	Документ.АктПриемаОбразцов.ТЧ_Образцы КАК АктПриемаОбразцовТЧ_Образцы
	                |ГДЕ
	                |	АктПриемаОбразцовТЧ_Образцы.Номенклатура = &Номенклатура
	                |	И АктПриемаОбразцовТЧ_Образцы.КодПродукта = &КодПродукта
	                |	И АктПриемаОбразцовТЧ_Образцы.ДокументПоступления = &ДокументПоступления
	                |	И АктПриемаОбразцовТЧ_Образцы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ПротоколАнализа.Ссылка,
	                |	ПротоколАнализа.ВИСтрокой
	                |ИЗ
	                |	Документ.ПротоколАнализа КАК ПротоколАнализа
	                |ГДЕ
	                |	ПротоколАнализа.Номенклатура = &Номенклатура
	                |	И ПротоколАнализа.КодПродукта = &КодПродукта
	                |	И ПротоколАнализа.ДокументПоступления = &ДокументПоступления
	                |	И ПротоколАнализа.ПометкаУдаления = ЛОЖЬ
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	КартаРазрешения.Ссылка,
	                |	NULL
	                |ИЗ
	                |	Документ.КартаРазрешения КАК КартаРазрешения
	                |ГДЕ
	                |	КартаРазрешения.Номенклатура = &Номенклатура
	                |	И КартаРазрешения.КодПродукта = &КодПродукта
	                |	И КартаРазрешения.ДокументПоступления = &ДокументПоступления
	                |	И КартаРазрешения.ПометкаУдаления = ЛОЖЬ
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	УдостоверениеКачества.Ссылка,
	                |	NULL
	                |ИЗ
	                |	Документ.УдостоверениеКачества КАК УдостоверениеКачества
	                |ГДЕ
	                |	УдостоверениеКачества.Номенклатура = &Номенклатура
	                |	И УдостоверениеКачества.КодПродукта = &КодПродукта
	                |	И УдостоверениеКачества.ДокументПоступления = &ДокументПоступления
	                |	И УдостоверениеКачества.ПометкаУдаления = ЛОЖЬ";
	 
	 Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	 Запрос.УстановитьПараметр("КодПродукта", парам_КодПродукта);
	 Запрос.УстановитьПараметр("ДокументПоступления", парам_ДокументПоступления);
	 
	 Результат = Запрос.Выполнить();
	 
	 Возврат Результат;
 КонецФункции
 
 Функция гл_ПолучитьДокументыПоКодуПродукта(парам_Номенклатура, парам_КодПродукта, ДатаНач, парам_Лаборатория = "") Экспорт  //0017796
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	АктОтбораТЧ_Образцы.Ссылка КАК Документ
	                |ИЗ
	                |	Документ.АктОтбора.ТЧ_Образцы КАК АктОтбораТЧ_Образцы
	                |ГДЕ
	                |	АктОтбораТЧ_Образцы.Номенклатура = &Номенклатура
	                |	И АктОтбораТЧ_Образцы.КодПродукта = &КодПродукта
	                |	И АктОтбораТЧ_Образцы.Ссылка.Дата >= &ДатаНач
	                |	И АктОтбораТЧ_Образцы.Лаборатория = &Лаборатория
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	АктПриемаОбразцовТЧ_Образцы.Ссылка
	                |ИЗ
	                |	Документ.АктПриемаОбразцов.ТЧ_Образцы КАК АктПриемаОбразцовТЧ_Образцы
	                |ГДЕ
	                |	АктПриемаОбразцовТЧ_Образцы.Номенклатура = &Номенклатура
	                |	И АктПриемаОбразцовТЧ_Образцы.КодПродукта = &КодПродукта
	                |	И АктПриемаОбразцовТЧ_Образцы.Ссылка.Дата >= &ДатаНач
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	НаправлениеНаАнализТЧ_Образцы.Ссылка
	                |ИЗ
	                |	Документ.НаправлениеНаАнализ.ТЧ_Образцы КАК НаправлениеНаАнализТЧ_Образцы
	                |ГДЕ
	                |	НаправлениеНаАнализТЧ_Образцы.Номенклатура = &Номенклатура
	                |	И НаправлениеНаАнализТЧ_Образцы.КодПродукта = &КодПродукта
	                |	И НаправлениеНаАнализТЧ_Образцы.Ссылка.Дата >= &ДатаНач
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	НаправлениеНаПовторныйАнализТЧ_Образцы.Ссылка
	                |ИЗ
	                |	Документ.НаправлениеНаПовторныйАнализ.ТЧ_Образцы КАК НаправлениеНаПовторныйАнализТЧ_Образцы
	                |ГДЕ
	                |	НаправлениеНаПовторныйАнализТЧ_Образцы.Номенклатура = &Номенклатура
	                |	И НаправлениеНаПовторныйАнализТЧ_Образцы.КодПродукта = &КодПродукта
	                |	И НаправлениеНаПовторныйАнализТЧ_Образцы.Ссылка.Дата >= &ДатаНач
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ПротоколАнализа.Ссылка
	                |ИЗ
	                |	Документ.ПротоколАнализа КАК ПротоколАнализа
	                |ГДЕ
	                |	ПротоколАнализа.Номенклатура = &Номенклатура
	                |	И ПротоколАнализа.КодПродукта = &КодПродукта
	                |	И ПротоколАнализа.Дата >= &ДатаНач
	                |	И ПротоколАнализа.МестоХранения = &Лаборатория
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	КартаРазрешения.Ссылка
	                |ИЗ
	                |	Документ.КартаРазрешения КАК КартаРазрешения
	                |ГДЕ
	                |	КартаРазрешения.Номенклатура = &Номенклатура
	                |	И КартаРазрешения.КодПродукта = &КодПродукта
	                |	И КартаРазрешения.Дата >= &ДатаНач
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	УдостоверениеКачества.Ссылка
	                |ИЗ
	                |	Документ.УдостоверениеКачества КАК УдостоверениеКачества
	                |ГДЕ
	                |	УдостоверениеКачества.Номенклатура = &Номенклатура
	                |	И УдостоверениеКачества.КодПродукта = &КодПродукта
	                |	И УдостоверениеКачества.Дата >= &ДатаНач
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЧекЛист.Ссылка
	                |ИЗ
	                |	Документ.ЧекЛист КАК ЧекЛист
	                |ГДЕ
	                |	ЧекЛист.Номенклатура = &Номенклатура
	                |	И ЧекЛист.КодПродукта = &КодПродукта
	                |	И ЧекЛист.Дата >= &ДатаНач";
	 
	 Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	 Запрос.УстановитьПараметр("КодПродукта", парам_КодПродукта);
	 Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	 
	 //0024273
	 Если ЗначениеЗаполнено(парам_Лаборатория) Тогда
	    Запрос.УстановитьПараметр("Лаборатория", парам_Лаборатория);
	 Иначе	
	    Запрос.Текст = СтрЗаменить(Запрос.Текст, "И АктОтбораТЧ_Образцы.Лаборатория = &Лаборатория", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПротоколАнализа.МестоХранения = &Лаборатория", "");
	 КонецЕсли; 
	 Результат = Запрос.Выполнить();
	 
	 Возврат Результат;
КонецФункции 

Функция гл_ЕстьАктПриемаПоОбразцу(парам_Номенклатура, парам_КодПродукта, парам_ДокументПоступления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
	|	АктПриемаОбразцовТЧ_Образцы.Ссылка
	|ИЗ
	|	Документ.АктПриемаОбразцов.ТЧ_Образцы КАК АктПриемаОбразцовТЧ_Образцы
	|ГДЕ
	|	АктПриемаОбразцовТЧ_Образцы.Номенклатура = &Номенклатура
	|	И АктПриемаОбразцовТЧ_Образцы.КодПродукта = &КодПродукта
	|	И АктПриемаОбразцовТЧ_Образцы.ДокументПоступления = &ДокументПоступления";
	
	Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	Запрос.УстановитьПараметр("КодПродукта", парам_КодПродукта);
	Запрос.УстановитьПараметр("ДокументПоступления", парам_ДокументПоступления);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

Функция гл_ПолучитьОстатокОбразца(парам_Номенклатура, парам_КодПродукта, парам_ДокументПоступления, парам_МестоХранения, парам_НаДату = "", парам_Организация = "") Экспорт
	Если парам_НаДату = "" Тогда 
		парам_НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
	               |	СУММА(ОстаткиОбразцовОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ОстаткиОбразцов.Остатки(
	               |		&НаДату,
	               |		МестоХранения = &МестоХранения
	               |			И Номенклатура = &Номенклатура
	               |			И КодПродукта = &КодПродукта
	               |			И ДокументПоступления = &ДокументПоступления
	               |			И Организация = &Организация) КАК ОстаткиОбразцовОстатки";
	
	Запрос.УстановитьПараметр("НаДату", парам_НаДату);			   
	Запрос.УстановитьПараметр("МестоХранения", парам_МестоХранения);
	Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	Запрос.УстановитьПараметр("КодПродукта", парам_КодПродукта);
	Запрос.УстановитьПараметр("Организация", парам_Организация);
	Запрос.УстановитьПараметр("ДокументПоступления", парам_ДокументПоступления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Если ТипЗнч(Выборка.КоличествоОстаток) = Тип("Число")  Тогда
		Результат = Выборка.КоличествоОстаток;
	Иначе
		Результат = 0;
		
		
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция гл_ПолучитьТаблицуОстатков(парам_МестоХранения = "", парам_НаДату, парам_Организация = "") Экспорт
	Запрос = Новый Запрос;
	
	Если НЕ парам_МестоХранения = "" Тогда
		Запрос.Текст = "ВЫБРАТЬ Разрешенные
		               |	ОстаткиОбразцовОстатки.Номенклатура КАК Номенклатура,
		               |	ОстаткиОбразцовОстатки.ДокументПоступления,
		               |	ОстаткиОбразцовОстатки.КоличествоОстаток КАК Количество,
		               |	ОстаткиОбразцовОстатки.КодПродукта,
		               |	ОстаткиОбразцовОстатки.Номенклатура.Код КАК Код,
		               |	АктОтбораТЧ_Образцы.Производитель,
		               |	АктОтбораТЧ_Образцы.СтранаПроисхождения,
		               |	АктОтбораТЧ_Образцы.Серия,
		               |	АктОтбораТЧ_Образцы.ДатаИзготовления,
		               |	АктОтбораТЧ_Образцы.СрокГодности,
		               |	АктОтбораТЧ_Образцы.ЕдиницаИзмерения,
		               |	АктОтбораТЧ_Образцы.НомерЗамеса,
		               |	ОстаткиОбразцовОстатки.МестоХранения
		               |ИЗ
		               |	РегистрНакопления.ОстаткиОбразцов.Остатки(
		               |		&НаДату,
		               |		МестоХранения = &МестоХранения
		               |			"+?(ЗначениеЗаполнено(парам_Организация)," И Организация = &Организация","")+") КАК ОстаткиОбразцовОстатки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОтбора.ТЧ_Образцы КАК АктОтбораТЧ_Образцы
		               |		ПО ОстаткиОбразцовОстатки.ДокументПоступления = АктОтбораТЧ_Образцы.Ссылка
		               |			И ОстаткиОбразцовОстатки.Номенклатура = АктОтбораТЧ_Образцы.Номенклатура
		               |			И ОстаткиОбразцовОстатки.КодПродукта = АктОтбораТЧ_Образцы.КодПродукта
		               |ГДЕ
		               |	ОстаткиОбразцовОстатки.КоличествоОстаток > &ПустоеКоличество
		               |	"+?(ЗначениеЗаполнено(парам_Организация)," И АктОтбораТЧ_Образцы.Ссылка.Организация = &Организация","")+"		              
					   |
		               |УПОРЯДОЧИТЬ ПО
		               |	Номенклатура
		               |АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("МестоХранения", парам_МестоХранения);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ Разрешенные
		|	ОстаткиОбразцовОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиОбразцовОстатки.ДокументПоступления,
		|	ОстаткиОбразцовОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиОбразцовОстатки.КодПродукта,
		|	ОстаткиОбразцовОстатки.Номенклатура.Код КАК Код,
		|	АктОтбораТЧ_Образцы.Производитель,
		|	АктОтбораТЧ_Образцы.СтранаПроисхождения,
		|	АктОтбораТЧ_Образцы.Серия,
		|	АктОтбораТЧ_Образцы.ДатаИзготовления,
		|	АктОтбораТЧ_Образцы.СрокГодности,
		|	АктОтбораТЧ_Образцы.ЕдиницаИзмерения,
		|	АктОтбораТЧ_Образцы.НомерЗамеса,
		|	ОстаткиОбразцовОстатки.МестоХранения
		|ИЗ
		|	РегистрНакопления.ОстаткиОбразцов.Остатки(&НаДату, "+?(ЗначениеЗаполнено(парам_Организация),"Организация = &Организация","")+") КАК ОстаткиОбразцовОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОтбора.ТЧ_Образцы КАК АктОтбораТЧ_Образцы
		|		ПО ОстаткиОбразцовОстатки.ДокументПоступления = АктОтбораТЧ_Образцы.Ссылка
		|			И ОстаткиОбразцовОстатки.Номенклатура = АктОтбораТЧ_Образцы.Номенклатура
		|			И ОстаткиОбразцовОстатки.КодПродукта = АктОтбораТЧ_Образцы.КодПродукта
		|ГДЕ
		|	ОстаткиОбразцовОстатки.КоличествоОстаток > &ПустоеКоличество
		|   "+?(ЗначениеЗаполнено(парам_Организация)," И АктОтбораТЧ_Образцы.Ссылка.Организация = &Организация","")+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
	КонецЕсли; 
	
	
	Запрос.УстановитьПараметр("Организация", парам_Организация);
	Запрос.УстановитьПараметр("НаДату", парам_НаДату);
	Запрос.УстановитьПараметр("ПустоеКоличество", 0);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
КонецФункции	

Функция гл_ПолучитьОбщуюТаблицуОбразцов(парам_ДатаОтбораС = "", парам_ДатаОтбораПо = "", парам_Лаб = "") Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтборОбразцов.Номенклатура КАК Номенклатура,
	               |	ОтборОбразцов.Образец.СерияНоменклатуры КАК Серия,
	               |	ОтборОбразцов.Образец.КодПродукта КАК КодПродукта,
	               |	ОтборОбразцов.Образец.НомерЗамеса КАК НомерЗамеса,
	               |	ОтборОбразцов.Образец.ДокументПоступления КАК ДокументПоступления
	               |ИЗ
	               |	РегистрНакопления.ОтборОбразцов.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			1 = 1
	               |				И Лаборатория = &Лаборатория) КАК ОтборОбразцов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборОбразцов.Номенклатура,
	               |	ОтборОбразцов.Образец.КодПродукта,
	               |	ОтборОбразцов.Образец.СерияНоменклатуры,
	               |	ОтборОбразцов.Образец.НомерЗамеса,
	               |	ОтборОбразцов.Образец.ДокументПоступления";
	
	Если ЗначениеЗаполнено(парам_ДатаОтбораС) Тогда
		Запрос.УстановитьПараметр("НачПериода", парам_ДатаОтбораС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачПериода", "");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(парам_ДатаОтбораПо) Тогда
		Запрос.УстановитьПараметр("КонПериода", парам_ДатаОтбораПо);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонПериода", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(парам_Лаб) Тогда
		Запрос.УстановитьПараметр("Лаборатория", парам_Лаб);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Лаборатория = &Лаборатория", "");
	КонецЕсли; 	
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции	

Функция гл_ПолучитьТипНоменклатуры(парам_Номенклатура) Экспорт
	лРезультат = "";
	
	Если парам_Номенклатура.НоменклатурнаяГруппаЛаб = Справочники.НоменклатурныеГруппыЛаб.ГотоваяПродукция Тогда
		лРезультат = "ГотоваяПродукция";
	ИначеЕсли парам_Номенклатура.НоменклатурнаяГруппаЛаб = Справочники.НоменклатурныеГруппыЛаб.Сырье Тогда	
		лРезультат = "Сырье";
	КонецЕсли; 
	
	Возврат лРезультат
КонецФункции		

Функция гл_ПолучитьТаблицуОстатковПоЛабораторииИСтатусу(парам_МестоХранения = "", парам_ВидДокумента, парам_НаДату, парам_ВидИсследования = "", парам_Номенклатура = "", парам_Организация = "") Экспорт
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//Если НЕ парам_МестоХранения = "" Тогда
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
	               |	ОтборОбразцовОстатки.Номенклатура КАК Номенклатура,
	               |	ОтборОбразцовОстатки.КодПродукта,
	               |	ОтборОбразцовОстатки.ДокументПоступления,
	               |	ОтборОбразцовОстатки.КоличествоОстаток,
	               |	ОтборОбразцовОстатки.МестоХранения,
				   |	ОтборОбразцовОстатки.МассаОбразца,
	               |	АктОтбораТЧ_Образцы.Серия,
	               |	АктОтбораТЧ_Образцы.ДатаИзготовления,
				   |	АктОтбораТЧ_Образцы.Поставщик,
				   |	АктОтбораТЧ_Образцы.ДатаПоступленияНаСклад,
	               |	АктОтбораТЧ_Образцы.СрокГодности,
	               |	АктОтбораТЧ_Образцы.Производитель,
	               |	АктОтбораТЧ_Образцы.СтранаПроисхождения,
	               |	АктОтбораТЧ_Образцы.НомерЗамеса
	               |ИЗ
	               |	РегистрНакопления.ОтборОбразцов.Остатки(
	               |		&НаДату,
	               |		ВидДокумента = &ВидДокумента"+?(ЗначениеЗаполнено(парам_МестоХранения)," И МестоХранения = &МестоХранения","")+"
                   | "+?(ЗначениеЗаполнено(парам_Организация)," И Организация = &Организация","")+"
				   |   ) КАК ОтборОбразцовОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОтбора.ТЧ_Образцы КАК АктОтбораТЧ_Образцы
	               |		ПО ОтборОбразцовОстатки.Номенклатура = АктОтбораТЧ_Образцы.Номенклатура
	               |			И ОтборОбразцовОстатки.КодПродукта = АктОтбораТЧ_Образцы.КодПродукта
	               |			И ОтборОбразцовОстатки.ДокументПоступления = АктОтбораТЧ_Образцы.Ссылка
				   |ГДЕ
				   |	ОтборОбразцовОстатки.КоличествоОстаток > &Ноль
				   |    И АктОтбораТЧ_Образцы.Ссылка.Дата МЕЖДУ &НачГода И &КонГода				   
				   |    "+?(ЗначениеЗаполнено(парам_ВидИсследования), " И ОтборОбразцовОстатки.ВидИсследования = &ВидИсследования","")+"
				   |    "+?(ЗначениеЗаполнено(парам_Номенклатура), " И ОтборОбразцовОстатки.Номенклатура = &Номенклатура","")+"				   
				   |    "+?(ЗначениеЗаполнено(парам_Организация)," И АктОтбораТЧ_Образцы.Ссылка.Организация = &Организация","")+" 					   
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
			     
	Запрос.УстановитьПараметр("НаДату", парам_НаДату);
	Запрос.УстановитьПараметр("Ноль", 0);
	Запрос.УстановитьПараметр("ВидДокумента", парам_ВидДокумента);
	Запрос.УстановитьПараметр("ВидИсследования", парам_ВидИсследования);
	Запрос.УстановитьПараметр("МестоХранения", парам_МестоХранения);
	Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	Запрос.УстановитьПараметр("Организация", парам_Организация);
	
	НачГода = НачалоГода(парам_НаДату);
	МесяцНазад = ДобавитьМесяц(парам_НаДату, -2);
	Если НачГода>МесяцНазад Тогда
		Запрос.УстановитьПараметр("НачГода", МесяцНазад);
	Иначе	
		Запрос.УстановитьПараметр("НачГода", НачалоГода(парам_НаДату));
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("КонГода", КонецГода(парам_НаДату));

	
	Результат = Новый ТаблицаЗначений;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
		
КонецФункции // гл_ПолучитьТаблицуОстатковПоЛабораторииИСтатусу()

Функция гл_ПолучитьТаблицуНормативов(парам_Номенклатура, парам_ВидИсследования = "", парам_Показатель = "", пНаДату = "", пПоставщик = "") Экспорт
	
	Если Не ЗначениеЗаполнено(пНаДату) Тогда
		НаДату = ТекущаяДатаСеанса();
	Иначе
		НаДату = пНаДату;
	КонецЕсли; 	
	лТЗРезультат = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НормативыНоменклатуры.Показатель КАК Показатель,
	               |	НормативыНоменклатуры.Значение КАК Значение,
	               |	НормативыНоменклатуры.ВариантСравнения КАК ВариантСравнения,
	               |	НормативыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	НормативыНоменклатуры.Интервал КАК Интервал,
	               |	НормативыНоменклатуры.ПорядокСл КАК ПорядокСл
	               |ИЗ
	               |	РегистрСведений.НормативыНоменклатурыЛаб.СрезПоследних(&НаДату, ) КАК НормативыНоменклатуры
	               |ГДЕ
	               |	НормативыНоменклатуры.Номенклатура = &Номенклатура
	               |	И (НормативыНоменклатуры.ДатаОкончанияДействия > &НаДату
	               |			ИЛИ НормативыНоменклатуры.ДатаОкончанияДействия = &ПустаяДата)
	               |	И НормативыНоменклатуры.Поставщик = &Поставщик";
				   
	Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("Поставщик", пПоставщик); //0021287
	
	Если НЕ парам_ВидИсследования = "" Тогда 
		Запрос.Текст = Запрос.Текст +" И НормативыНоменклатуры.ВидИсследования = &ВидИсследования";
		Запрос.УстановитьПараметр("ВидИсследования", парам_ВидИсследования);
	КонецЕсли;	
	
	Если НЕ парам_Показатель = "" Тогда 
		Запрос.Текст = Запрос.Текст +" И НормативыНоменклатуры.Показатель = &Показатель";
		Запрос.УстановитьПараметр("Показатель", парам_Показатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пПоставщик) Тогда  //0021287
		//	Запрос.Текст = Запрос.Текст +" И НормативыНоменклатуры.Поставщик = &Поставщик";
		//*****сейчас в любом случае надо указывать параметр - потому что при пустом он должен возвращать показатели именно для пустого
		Запрос.УстановитьПараметр("Поставщик", пПоставщик);
	Иначе
		Запрос.УстановитьПараметр("Поставщик", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +" УПОРЯДОЧИТЬ ПО ПорядокСл ";
	лТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	//если по этому поставщику нет нормативов, то надо брать по пустому поставщику.
	//если есть хотя бы один норматив по поставщику - берем только по нему. По пустому - не берем вообще
	Если лТЗРезультат.Количество() = 0 и ЗначениеЗаполнено(пПоставщик) Тогда //002128
	    Возврат гл_ПолучитьТаблицуНормативов(парам_Номенклатура, парам_ВидИсследования, парам_Показатель, пНаДату, "");
	КонецЕсли;
	
	Возврат лТЗРезультат;
	
КонецФункции

Функция гл_ПолучитьЗначениеНорматива(парам_Номенклатура, парам_ВидИсследования, парам_Показатель, ВариантСравнения = "", Интервал = "", ЕдиницаИзмерения = "", НаАнгл = Ложь, пНаДату = "", пДопустимоеОтклонение = "") Экспорт 
	лРезультат = "";
	
	Если Не ЗначениеЗаполнено(пНаДату) Тогда
	   НаДату = ТекущаяДатаСеанса();
   Иначе
	    НаДату = пНаДату;
	КонецЕсли; 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НормативыНоменклатуры.Значение,
	               |	НормативыНоменклатуры.ВариантСравнения,
	               |	НормативыНоменклатуры.Интервал,
	               |	НормативыНоменклатуры.ЕдиницаИзмерения,
	               |	НормативыНоменклатуры.наАнглийскомЯзыке,
	               |	НормативыНоменклатуры.ПорядокСл КАК ПорядокСл,
	               |	НормативыНоменклатуры.ДопустимоеОтклонение
	               |ИЗ
	               |	РегистрСведений.НормативыНоменклатурыЛаб.СрезПоследних(&НаДату, ) КАК НормативыНоменклатуры
	               |ГДЕ
	               |	НормативыНоменклатуры.ВидИсследования = &ВидИсследования
	               |	И (НормативыНоменклатуры.ДатаОкончанияДействия > &НаДату
	               |			ИЛИ НормативыНоменклатуры.ДатаОкончанияДействия = &ПустаяДата)
	               |	И НормативыНоменклатуры.Номенклатура = &Номенклатура
	               |	И НормативыНоменклатуры.Показатель = &Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокСл";
	
	Запрос.УстановитьПараметр("ВидИсследования", парам_ВидИсследования);
	Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	Запрос.УстановитьПараметр("Показатель", парам_Показатель);
	Запрос.УстановитьПараметр("НаДату", НаДату);
    Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();	 
		лРезультат =Выборка.Значение;
		ВариантСравнения = Выборка.ВариантСравнения;
		Интервал = Выборка.Интервал;
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НаимАнгл = Выборка.наАнглийскомЯзыке;
		пДопустимоеОтклонение = Выборка.ДопустимоеОтклонение
	КонецЕсли; 
	
	Если НаАнгл Тогда
	   Возврат Выборка.наАнглийскомЯзыке;
	Иначе	
	   Возврат лРезультат;
	КонецЕсли; 
	
КонецФункции

Функция гл_ПолучитьТаблицуПротоколов(парам_Номенклатура, парам_Серия ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПротоколАнализа.Ссылка КАК ПротоколАнализа,
	|	ПротоколАнализа.ВидИсследования КАК ВидИсследования
	|ИЗ
	|	Документ.ПротоколАнализа КАК ПротоколАнализа
	|ГДЕ
	|	ПротоколАнализа.Номенклатура = &Номенклатура
	|	И ПротоколАнализа.Серия = &Серия";
	
	Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
	Запрос.УстановитьПараметр("Серия", парам_Серия);
	
	Результат = Запрос.Выполнить();
	
	лТЗРезультат = Результат.Выгрузить();
	
	Возврат лТЗРезультат;
	
КонецФункции // гл_ПолучитьТаблицуПротоколов()

Функция гл_ПолучитьТаблицуПоказателей(парам_МассивПротоколов) Экспорт 
	
	//0013660
	//И НормативыНоменклатурыЛабСрезПоследних.НеВыводитьВУК = ЛОЖЬ именно в ГДЕ должно быть
	//потому что он тоже периодический и когда-то этот показатель может больше не выводиться
	//не надо в таком случае брать предыдущее значение
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПротоколАнализаТЧ_Показатели.Показатель,
	|	ПротоколАнализаТЧ_Показатели.Значение,
	|	НормативыНоменклатурыЛабСрезПоследних.НеВыводитьВУК
	|ИЗ
	|	Документ.ПротоколАнализа.ТЧ_Показатели КАК ПротоколАнализаТЧ_Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативыНоменклатурыЛаб.СрезПоследних(&НаДату, ) КАК НормативыНоменклатурыЛабСрезПоследних
	|		ПО ПротоколАнализаТЧ_Показатели.Показатель = НормативыНоменклатурыЛабСрезПоследних.Показатель
	|			И ПротоколАнализаТЧ_Показатели.Ссылка.Номенклатура = НормативыНоменклатурыЛабСрезПоследних.Номенклатура
	|ГДЕ
	|	ПротоколАнализаТЧ_Показатели.Ссылка В(&СписокПротоколов)
	|	И ПротоколАнализаТЧ_Показатели.Показатель.Ссылка <> &ПустаяСсылка
	|	И НормативыНоменклатурыЛабСрезПоследних.НеВыводитьВУК = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокПротоколов", парам_МассивПротоколов);
	Запрос.УстановитьПараметр("НаДату", парам_МассивПротоколов[0].Дата);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПланыВидовХарактеристик.НормативыНеИсп.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
КонецФункции

Функция гл_ПолучитШаблонныеДанные(парам_Номенклатура, парам_НаДату = "")Экспорт
	Если парам_НаДату = "" Тогда 
		парам_НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	лТЗРезультат = Новый ТаблицаЗначений;
	//для кажого вида исследований берем только последний шаблон
	ВыборкаВидов = Справочники.ВидыИсследований.Выбрать();
	Пока ВыборкаВидов.Следующий() Цикл
		ТекВид = ВыборкаВидов.Ссылка; 
		Если ТекВид = Справочники.ВидыИсследований.ФункциональныеСвойства Тогда
			Продолжить;
		КонецЕсли; 
		//получаем последнюю дату, на которую есть заполенные значения. Все что было до этой даты счтаем не действительным
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныЗначенийПоказателей.Период КАК Период
		|ИЗ
		|	РегистрСведений.ШаблоныЗначенийПоказателей КАК ШаблоныЗначенийПоказателей
		|ГДЕ
		|	ШаблоныЗначенийПоказателей.Номенклатура = &Номенклатура
		|	И ШаблоныЗначенийПоказателей.ВидИсследования = &ВидИсследования
		|	И ШаблоныЗначенийПоказателей.Период <= &НаДату
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("НаДату", парам_НаДату);
		Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
		Запрос.УстановитьПараметр("ВидИсследования", ТекВид);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследнийПериод = Выборка.Период;
		Иначе	
			ПоследнийПериод = парам_НаДату;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	ШаблоныЗначенийПоказателейСрезПоследних.ВидИсследования КАК ВидИсследования,
		|	ШаблоныЗначенийПоказателейСрезПоследних.Показатель,
		|	ШаблоныЗначенийПоказателейСрезПоследних.Значение,
		|	ШаблоныЗначенийПоказателейСрезПоследних.ЕдиницаИзмерения,
		|	ШаблоныЗначенийПоказателейСрезПоследних.наАнглийскомЯзыке
		|ИЗ
		|	РегистрСведений.ШаблоныЗначенийПоказателей.СрезПоследних(&НаДату, Номенклатура = &Номенклатура) КАК ШаблоныЗначенийПоказателейСрезПоследних
		|ГДЕ
		//|	ШаблоныЗначенийПоказателейСрезПоследних.ВидИсследования <> &ВидИсследования
		|	ШаблоныЗначенийПоказателейСрезПоследних.ВидИсследования = &ВидИсследования
		|И ШаблоныЗначенийПоказателейСрезПоследних.Период = &ПоследнийПериод	              
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныЗначенийПоказателейСрезПоследних.ВидИсследования,
		|	ШаблоныЗначенийПоказателейСрезПоследних.Показатель,
		|	ШаблоныЗначенийПоказателейСрезПоследних.Значение,
		|	ШаблоныЗначенийПоказателейСрезПоследних.ЕдиницаИзмерения,
		|	ШаблоныЗначенийПоказателейСрезПоследних.наАнглийскомЯзыке";
		
		Запрос.УстановитьПараметр("НаДату", парам_НаДату);
		Запрос.УстановитьПараметр("Номенклатура", парам_Номенклатура);
		//раньше брали по всем видам кроме функциональных
		Запрос.УстановитьПараметр("ВидИсследования", ТекВид);//Справочники.ВидыИсследований.ФункциональныеСвойства);
		Запрос.УстановитьПараметр("ПоследнийПериод", ПоследнийПериод);
		Результат = Запрос.Выполнить();
		Если лТЗРезультат.Количество() = 0 Тогда
			лТЗРезультат  = Результат.Выгрузить();
		Иначе	
			лТЗРезультатВрем  = Результат.Выгрузить();
			Для каждого СтрВрем Из лТЗРезультатВрем Цикл
				НовСтр = лТЗРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрВрем);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат лТЗРезультат;
КонецФункции // гл_ПолучитШаблонныеДанные()

Функция гл_ДополнитьНулями(Знач парам_Число, парам_ДлинаСтроки)
	лРезультат = "";
	
	парам_Число = Строка(парам_Число);
	
	Если СтрДлина(парам_Число) > парам_ДлинаСтроки Тогда
		//Длина исходной строки превышает длину результирующей
		лРезультат = Лев(парам_Число, парам_ДлинаСтроки);
    Иначе
		Если парам_ДлинаСтроки > 0 Тогда
			//Для лПеременнаяЦикла = 1 По парам_ДлинаСтроки Цикл
			Пока СтрДлина(парам_Число) <> парам_ДлинаСтроки Цикл 
				парам_Число = "0" + парам_Число;
			КонецЦикла; 
			лРезультат = парам_Число;
		КонецЕсли; 
    КонецЕсли; 
	
    Возврат лРезультат;
КонецФункции // гл_ДополнитьНулями()
 
Функция РассчитатьПогрешность(пПогрешность, пЗначение) Экспорт
	
	Если Не ЗначениеЗаполнено(пПогрешность) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Если пПогрешность.ВидФормулы = 2 Тогда
		Возврат пПогрешность.Значение;
	КонецЕсли;
	
	Погр = 0;
	Выполнить(пПогрешность.Формула);
	Рез = пЗначение*(Погр);	
	
	Возврат Рез;
	
КонецФункции // ()
 
Функция гл_УпорядочитьПоВидамИсследований(парам_ТаблицаЗначений) Экспорт 
	лРезультат = Новый ТаблицаЗначений;
	
	лРезультат = парам_ТаблицаЗначений.Скопировать();
	лРезультат.Очистить();
	
	Для каждого лСтрокаТЗ Из парам_ТаблицаЗначений Цикл
		Если лСтрокаТЗ.ВидИсследования = Справочники.ВидыИсследований.Органолептика Тогда
			лНоваяСтрока = лРезультат.Вставить(0);
		ИначеЕсли лСтрокаТЗ.ВидИсследования = Справочники.ВидыИсследований.ФизикоХимическиеИсследования Тогда
			лНоваяСтрока = лРезультат.Вставить(1);
		ИначеЕсли лСтрокаТЗ.ВидИсследования = Справочники.ВидыИсследований.МикробиологическиеИсследования Тогда
			лНоваяСтрока = лРезультат.Вставить(2);
		ИначеЕсли лСтрокаТЗ.ВидИсследования = Справочники.ВидыИсследований.ФункциональныеСвойства Тогда
			лНоваяСтрока = лРезультат.Вставить(3);
		Иначе
			лНоваяСтрока = лРезультат.Добавить();
			//Продолжить;
		КонецЕсли; 
		
		Для каждого лКолонка Из парам_ТаблицаЗначений.Колонки Цикл
			лНоваяСтрока[лКолонка.Имя] = лСтрокаТЗ[лКолонка.Имя];
		КонецЦикла; 
	КонецЦикла; 	
	
	Возврат лРезультат;
КонецФункции

Функция ЕстьЗаявкиВНормативах(пНоменклатура) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НормативыНоменклатурыЛабСрезПоследних.ВидИсследования
	|ИЗ
	|	РегистрСведений.НормативыНоменклатурыЛаб.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Заявка = Истина) КАК НормативыНоменклатурыЛабСрезПоследних
	|ГДЕ
	|	(НормативыНоменклатурыЛабСрезПоследних.ДатаОкончанияДействия >= &ТекущаяДата
	|			ИЛИ НормативыНоменклатурыЛабСрезПоследних.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("Номенклатура", пНоменклатура);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ()
  
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция гл_ОбразецСоответствуетНормативам(парам_ПротоколАнализа, парам_СписокПоказателей = "", ТЧ, ТЗНесоответствий=Неопределено) Экспорт
	лСписокПоказателейНесоответствия = Новый СписокЗначений;
	лРезультат = Истина;
	
	//создаем структуру ТЗНесоответствий
	Если ТипЗнч(ТЧ) = Тип("ТаблицаЗначений") Тогда
		ТЗНесоответствий = ТЧ.Скопировать();
	Иначе		
		ТЗНесоответствий = ТЧ.Выгрузить();
	КонецЕсли;
	ТЗНесоответствий.Очистить();
	ТЗНесоответствий.Колонки.Добавить("НормативноеЗначение");
	
	Для каждого лСтрокаТЧПоказатели Из ТЧ Цикл
		лЗначениеФакт = лСтрокаТЧПоказатели.Значение;
		лИнтервал = "";
		лВариантСравнения = "";
		
		лДопустимоеОтклонение = "";
		лЗначениеНорматива = Лаборатория_Сервер.гл_ПолучитьЗначениеНорматива(парам_ПротоколАнализа.Номенклатура, парам_ПротоколАнализа.ВидИсследования, лСтрокаТЧПоказатели.Показатель, лВариантСравнения, лИнтервал,,,парам_ПротоколАнализа.Дата, лДопустимоеОтклонение);
		
		//27.11.2018 потому что должны брать данные из документа
		лВариантСравнения = лСтрокаТЧПоказатели.ВариантСравнения;
		лЗначениеНорматива = лСтрокаТЧПоказатели.ЗначениеПоТУ;
		
		//Если НЕ лЗначениеНорматива = "" Тогда 
		Если ЗначениеЗаполнено(лЗначениеНорматива) Тогда 
			//Значение норматива не пустое
			
			Если (ТипЗНЧ(лЗначениеНорматива) = Тип("Число")) ИЛИ (ТипЗНЧ(лЗначениеНорматива) = Тип("Дата")) Тогда
				//устанавливаем по умолчанию
				лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.соответствует;
				//если отклоение не число - то ставим его равным 0
				Если НЕ ЗначениеЗаполнено(лДопустимоеОтклонение) Тогда
				    лДопустимоеОтклонение = 0;
				КонецЕсли; 
				Если НЕ ТипЗнч(лДопустимоеОтклонение) = Тип("Число") Тогда
					лДопустимоеОтклонение = 0;
				КонецЕсли;
				
				//brava погрешности
				Если лДопустимоеОтклонение = 0 Тогда
				    лДопустимоеОтклонение = лСтрокаТЧПоказатели.Погрешность;
				КонецЕсли; 
				
				//Сравнение числовых значений и дат
				Если ЗначениеЗаполнено(лВариантСравнения) Тогда
					Если лВариантСравнения = Перечисления.ВариантыСравнения.НеБолее Тогда
						//Меньше или равно
						//лЗначениеНорматива = лЗначениеНорматива + лДопустимоеОтклонение;
						Если НЕ лЗначениеФакт <= лЗначениеНорматива +лДопустимоеОтклонение Тогда
							//Значение не соответствует нормативному
							лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
							лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
							лСтрокаТЧПоказатели.Комментарий = "";
							ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива);
						Иначе
							//инц 0015149 brava
							//в нормативе, но только по погрешности
							Если лЗначениеФакт > лЗначениеНорматива - лДопустимоеОтклонение Тогда
								лСтрокаТЧПоказатели.Комментарий = "Входит в погрешность метода";
							Иначе
								лСтрокаТЧПоказатели.Комментарий = "";
							КонецЕсли;
						КонецЕсли; 
					ИначеЕсли лВариантСравнения = Перечисления.ВариантыСравнения.Менее Тогда //0019391
						//Меньше
						//лЗначениеНорматива = лЗначениеНорматива + лДопустимоеОтклонение;
						Если НЕ лЗначениеФакт < лЗначениеНорматива +лДопустимоеОтклонение Тогда
							//Значение не соответствует нормативному
							лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
							лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
							лСтрокаТЧПоказатели.Комментарий = "";
							ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива);
						Иначе
							//инц 0015149 brava
							//в нормативе, но только по погрешности
							Если лЗначениеФакт > лЗначениеНорматива - лДопустимоеОтклонение Тогда
								лСтрокаТЧПоказатели.Комментарий = "Входит в погрешность метода";
							Иначе
								лСтрокаТЧПоказатели.Комментарий = "";
							КонецЕсли;
						КонецЕсли; 
						
					ИначеЕсли лВариантСравнения = Перечисления.ВариантыСравнения.НеМенее Тогда 
						//лЗначениеНорматива = лЗначениеНорматива - лДопустимоеОтклонение;
						//Больше или равно
						Если НЕ лЗначениеФакт >= лЗначениеНорматива - лДопустимоеОтклонение Тогда
							//Значение не соответствует нормативному
							лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
							лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
							лСтрокаТЧПоказатели.Комментарий = "";
							ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива);
						Иначе
							//инц 0015149 brava
							//в нормативе, но только по погрешности
							Если лЗначениеФакт < лЗначениеНорматива + лДопустимоеОтклонение Тогда
								лСтрокаТЧПоказатели.Комментарий = "Входит в погрешность метода";
							Иначе
								лСтрокаТЧПоказатели.Комментарий = "";
							КонецЕсли;
						КонецЕсли; 
					ИначеЕсли лВариантСравнения = Перечисления.ВариантыСравнения.ВИнтервале Тогда 
						//В интервале (плюс-минус)
						Если (лЗначениеФакт >= лЗначениеНорматива - лИнтервал - лДопустимоеОтклонение) И (лЗначениеФакт <= лЗначениеНорматива + лИнтервал+лДопустимоеОтклонение) Тогда
							//инц 0015149 brava
							//в нормативе, но только по погрешности
							Если (лЗначениеФакт >= лЗначениеНорматива - лИнтервал) И (лЗначениеФакт <= лЗначениеНорматива + лИнтервал) Тогда
								лСтрокаТЧПоказатели.Комментарий = "";
							Иначе
								лСтрокаТЧПоказатели.Комментарий = "Входит в погрешность метода";
							КонецЕсли;
						Иначе	
							//Значение не соответствует нормативному
							лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
							лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
							лСтрокаТЧПоказатели.Комментарий = "";
							ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива)
						КонецЕсли; 
					ИначеЕсли лВариантСравнения = Перечисления.ВариантыСравнения.Между Тогда 
						//В интервале (от и до)
						Если (лЗначениеФакт >= лЗначениеНорматива - лДопустимоеОтклонение) И (лЗначениеФакт <= лИнтервал + лДопустимоеОтклонение) Тогда
							//инц 0015149 brava
							//в нормативе, но только по погрешности
							Если (лЗначениеФакт >= лЗначениеНорматива) И (лЗначениеФакт <= лИнтервал) Тогда
								лСтрокаТЧПоказатели.Комментарий = "";
							Иначе
								лСтрокаТЧПоказатели.Комментарий = "Входит в погрешность метода";
							КонецЕсли;
						Иначе	
							//Значение не соответствует нормативному
							лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
							лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
							лСтрокаТЧПоказатели.Комментарий = "";
							ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива)
						КонецЕсли; 
					КонецЕсли; 
					
				Иначе
					//если вариант не выбран - то статус не заполяем с 27.11.2018 brava
					//закоментировал 29.11.2018 потому что статус может быть проставлен ЦИРом
					Если парам_ПротоколАнализа.Заявка = Ложь Тогда
						лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.ПустаяСсылка();
					КонецЕсли; 
					

					////Вариант сравнения - РАВНО
					////Если НЕ лЗначениеФакт = лЗначениеНорматива Тогда
					////из-за отклонения даже равно становится интервалом
					//Если (лЗначениеФакт >= лЗначениеНорматива + лДопустимоеОтклонение) И (лЗначениеФакт <= лИнтервал - лДопустимоеОтклонение) Тогда
					//	//Значение не соответствует нормативному
					//	лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
					//	лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
					//	лСтрокаТЧПоказатели.Комментарий = "";
					//	ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива);
					//Иначе
					//	//инц 0015149 brava
					//	//в нормативе, но только по погрешности
					//	Если НЕ лЗначениеФакт = лЗначениеНорматива Тогда
					//		лСтрокаТЧПоказатели.Комментарий = "Входит в погрешность метода";
					//	Иначе
					//		лСтрокаТЧПоказатели.Комментарий = "";
					//	КонецЕсли;
					//КонецЕсли; 
				КонецЕсли; 
			ИначеЕсли ТипЗНЧ(лЗначениеНорматива) = Тип("Строка") Тогда
				//brava
				Если лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.соответствует Тогда
					Продолжить;
				КонецЕсли;
				лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.соответствует;
				//brava
				//Строки сравниваются по равенству, либо по соответствию Не допускается = Отсутствует (-ют)
				Если Найти(НРЕГ(лЗначениеНорматива), "не допуска") Тогда
					Если (Найти(НРЕГ(лЗначениеФакт), "отсутству") = 0) И (НЕ НРЕГ(СОКРЛП(лЗначениеФакт)) = НРЕГ(СОКРЛП(лЗначениеНорматива))
						// олег
						И (Найти(НРЕГ(лЗначениеФакт), "не обнаружен") = 0)
						// олег
						
						) Тогда
						//Значение не соответствует нормативному
						лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
						лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
						ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива)
					КонецЕсли;
				ИначеЕсли Найти(НРЕГ(лЗначениеФакт), "не соответству") Тогда
					лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
					лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
					ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива)
				ИначеЕсли Найти(НРЕГ(лЗначениеФакт), "соответству") Тогда
					//Значение соответствует нормативному
				Иначе
					Если НЕ НРЕГ(СОКРЛП(лЗначениеФакт)) = НРЕГ(СОКРЛП(лЗначениеНорматива)) Тогда
						//Значение не соответствует нормативному
						лСписокПоказателейНесоответствия.Добавить(лСтрокаТЧПоказатели.Показатель);
						лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.несоответствует;
						ДобавитьСтрВТЗНесоотв(лСтрокаТЧПоказатели, ТЗНесоответствий, лЗначениеНорматива)
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		Иначе
			//закоментировал 29.11.2018 потому что статус может быть проставлен ЦИРом
			Если парам_ПротоколАнализа.Заявка = Ложь Тогда
				лСтрокаТЧПоказатели.Статус = Перечисления.СтатусРезультатаИсследований.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Если лСписокПоказателейНесоответствия.Количество() > 0 Тогда
		лРезультат = Ложь;
		парам_СписокПоказателей = лСписокПоказателейНесоответствия;	
	КонецЕсли; 
	
	Возврат лРезультат;
КонецФункции // гл_ОбразецСоответствуетНормативам()

Процедура ДобавитьСтрВТЗНесоотв(СтрТЧ, ТЗНесоотв, НормативноеЗначение)

	НовСтрТЗНесоотв = ТЗНесоотв.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрТЗНесоотв, СтрТЧ);
	НовСтрТЗНесоотв.НормативноеЗначение = НормативноеЗначение;

КонецПроцедуры
 
Функция ЕстьЭталонПоОраголептике(пНом, НаДату, СрокЭталона = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭталоныПоОрганолептике.Номенклатура,
	               |	ЭталоныПоОрганолептике.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	               |ИЗ
	               |	РегистрСведений.ЭталоныПоОрганолептике КАК ЭталоныПоОрганолептике
	               |ГДЕ
	               |	ЭталоныПоОрганолептике.ДатаВведения <= &НаДату
	               |	И ЭталоныПоОрганолептике.ДатаОкончанияДействия >= &НаДату
	               |	И ЭталоныПоОрганолептике.Номенклатура = &Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОкончанияДействия УБЫВ";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("Номенклатура", пНом);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе	
		//0017561
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			СрокЭталона = Выборка.ДатаОкончанияДействия;
		КонецЕсли; 
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ()

Функция гл_ЕстьКартаНаПротокол(пПротокол, ТолькоЗакрытые = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КартаРазрешения.Ссылка
	|ИЗ
	|	Документ.КартаРазрешения КАК КартаРазрешения
	|ГДЕ
	|	КартаРазрешения.Протокол = &Протокол
	|	И КартаРазрешения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартРазрешения.Решен)";
	
	Если НЕ ТолькоЗакрытые Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КартаРазрешения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартРазрешения.Решен)", "");
	КонецЕсли; 
	Запрос.УстановитьПараметр("Протокол", пПротокол);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе	
		Возврат Истина;	
	КонецЕсли; 	
	
КонецФункции // ()

Функция гл_СоздатьДвиженияПоОстаткамДляВыбора(парам_ВидДокумента, парам_Дата, парам_Основание = Неопределено, парам_ВидОснования = Неопределено, парам_Организация = "")Экспорт
	лРезультат = Неопределено;
	
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = "ВЫБРАТЬ Разрешенные
	                |	ОтборОбразцовОстатки.Номенклатура,
	                |	ОтборОбразцовОстатки.КодПродукта,
	                |	ОтборОбразцовОстатки.ДокументПоступления
	                |ИЗ
	                |	РегистрНакопления.ОтборОбразцов.Остатки(
	                |		&НаДату,
	                |		ВидДокумента = &ВидДокумента
	                |			И Номенклатура = &Номенклатура
	                |			И КодПродукта = &КодПродукта
	                |			И ДокументПоступления = &ДокументПоступления
	                |			И ВидИсследования <> &ВидИсследования
	                |			"+?(ЗначениеЗаполнено(парам_Организация),"И Организация = &Организация","")+") КАК ОтборОбразцовОстатки
	                |ГДЕ
	                |	ОтборОбразцовОстатки.КоличествоОстаток > 0";
					
	лЗапрос.УстановитьПараметр("НаДату", парам_Дата);				
	лЗапрос.УстановитьПараметр("ВидДокумента", парам_ВидОснования);
	лЗапрос.УстановитьПараметр("Номенклатура", парам_Основание.Номенклатура);
	лЗапрос.УстановитьПараметр("КодПродукта", парам_Основание.КодПродукта);
	лЗапрос.УстановитьПараметр("ДокументПоступления", парам_Основание.ДокументПоступления);
	лЗапрос.УстановитьПараметр("Организация", парам_Организация);
	лЗапрос.УстановитьПараметр("ВидИсследования", парам_Основание.ВидИсследования);
					
	Если лЗапрос.Выполнить().Пустой() Тогда 
		лРезультат = Новый Структура;
		лРезультат.Вставить("ВидДокумента", парам_ВидДокумента);
		лРезультат.Вставить("Номенклатура", парам_Основание.Номенклатура);
		лРезультат.Вставить("КодПродукта", парам_Основание.КодПродукта);
		лРезультат.Вставить("ДокументПоступления", парам_Основание.ДокументПоступления);
		лРезультат.Вставить("Организация", парам_Организация);
		лРезультат.Вставить("Количество", 1);
	КонецЕсли;					
	
	Возврат лРезультат;
КонецФункции

Функция ПолучитьСрокГодности(пНом, пНаДату) Экспорт
	
	Если Не ЗначениеЗаполнено(пНом) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СрокиХраненияСрезПоследних.СрокХранения
	|ИЗ
	|	РегистрСведений.СрокиХранения.СрезПоследних(&НаДату, Номенклатура = &Номенклатура) КАК СрокиХраненияСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", пНаДату);
	Запрос.УстановитьПараметр("Номенклатура", пНом);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СрокХранения;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции // ()

Функция ПолучитьСрокГодностиЭталона(пНом, пНаДату) Экспорт
	
	Если Не ЗначениеЗаполнено(пНом) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СрокиГодностиЭталона.СрокХранения
	|ИЗ
	|	РегистрСведений.СрокиГодностиЭталона.СрезПоследних(&НаДату, Номенклатура = &Номенклатура) КАК СрокиГодностиЭталона";
	
	Запрос.УстановитьПараметр("НаДату", пНаДату);
	Запрос.УстановитьПараметр("Номенклатура", пНом);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СрокХранения;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции // ()

Функция ПолучитьОтветсвенногоЗаУК(пДата, пОрганизация, пЛаб) Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОтветственныйЗаУКСрезПоследних.Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныйЗаУК.СрезПоследних(&НаДату, Организация = &Организация И Лаборатория = &Лаборатория) КАК ОтветственныйЗаУКСрезПоследних";
		
		Запрос.УстановитьПараметр("НаДату", пДата);
		Запрос.УстановитьПараметр("Лаборатория", пЛаб);
		Запрос.УстановитьПараметр("Организация", пОрганизация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();	
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Сотрудник;	
		
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции // ()

Функция ДоступныРолиЛаборатории() Экспорт

	Если РольДоступна("ЗаведующийЛабораторией") 
		ИЛИ РольДоступна("СотрудникЛаборатории") 
		Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;

КонецФункции // ()

Функция ПолучитьРазрешительныеДокументыНаНом(Номенклатура, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры КАК СертификатНоменклатуры,
	               |	ОбластиДействияСертификатовНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Наименование КАК Наименование,
	               |	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ДатаНачалаСрокаДействия КАК ДатаЗаключения
	               |ИЗ
	               |	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	               |ГДЕ
	               |	ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
	               |	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ДатаНачалаСрокаДействия >= &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаЗаключения УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Декл = Выборка.СертификатНоменклатуры;
		Возврат Декл;
	КонецЦикла;	
	
	Возврат "";
	
КонецФункции


